
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	c0 12 00 20 c1 12 00 08 8d 32 00 08 95 12 00 08     ... .....2......
 8000010:	95 12 00 08 95 12 00 08 95 12 00 08 00 00 00 00     ................
	...
 800002c:	15 0f 00 08 95 12 00 08 00 00 00 00 c1 0e 00 08     ................
 800003c:	99 21 00 08                                         .!..

08000040 <_irq_vector_table>:
 8000040:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000050:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000060:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000070:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000080:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000090:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 80000a0:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 80000b0:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 80000c0:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 80000d0:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 80000e0:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 80000f0:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000100:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000110:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000120:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000130:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000140:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000150:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000160:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000170:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000180:	c5 0f 00 08 c5 0f 00 08 c5 0f 00 08 c5 0f 00 08     ................
 8000190:	c5 0f 00 08                                         ....

Disassembly of section text:

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a8:	f000 b80c 	b.w	80001c4 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 f81b 	bl	80001ee <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__aeabi_idiv0>:
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop

080001c8 <__popcountsi2>:
 80001c8:	0843      	lsrs	r3, r0, #1
 80001ca:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 80001d4:	0880      	lsrs	r0, r0, #2
 80001d6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80001da:	4418      	add	r0, r3
 80001dc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80001e0:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80001e4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80001e8:	4358      	muls	r0, r3
 80001ea:	0e00      	lsrs	r0, r0, #24
 80001ec:	4770      	bx	lr

080001ee <__udivmoddi4>:
 80001ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f2:	4686      	mov	lr, r0
 80001f4:	468c      	mov	ip, r1
 80001f6:	4608      	mov	r0, r1
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	4615      	mov	r5, r2
 80001fc:	4674      	mov	r4, lr
 80001fe:	4619      	mov	r1, r3
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 80c2 	bne.w	800038a <__udivmoddi4+0x19c>
 8000206:	4285      	cmp	r5, r0
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	d945      	bls.n	800029a <__udivmoddi4+0xac>
 800020e:	b14a      	cbz	r2, 8000224 <__udivmoddi4+0x36>
 8000210:	f1c2 0320 	rsb	r3, r2, #32
 8000214:	fa00 fc02 	lsl.w	ip, r0, r2
 8000218:	fa2e f303 	lsr.w	r3, lr, r3
 800021c:	4095      	lsls	r5, r2
 800021e:	ea43 0c0c 	orr.w	ip, r3, ip
 8000222:	4094      	lsls	r4, r2
 8000224:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000228:	b2a8      	uxth	r0, r5
 800022a:	fbbc f8fe 	udiv	r8, ip, lr
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fb0e cc18 	mls	ip, lr, r8, ip
 8000234:	fb08 f900 	mul.w	r9, r8, r0
 8000238:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d928      	bls.n	8000292 <__udivmoddi4+0xa4>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000246:	d204      	bcs.n	8000252 <__udivmoddi4+0x64>
 8000248:	4599      	cmp	r9, r3
 800024a:	d902      	bls.n	8000252 <__udivmoddi4+0x64>
 800024c:	f1a8 0702 	sub.w	r7, r8, #2
 8000250:	442b      	add	r3, r5
 8000252:	eba3 0309 	sub.w	r3, r3, r9
 8000256:	b2a4      	uxth	r4, r4
 8000258:	fbb3 fcfe 	udiv	ip, r3, lr
 800025c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000260:	fb0c f000 	mul.w	r0, ip, r0
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	42a0      	cmp	r0, r4
 800026a:	d914      	bls.n	8000296 <__udivmoddi4+0xa8>
 800026c:	192c      	adds	r4, r5, r4
 800026e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000272:	d204      	bcs.n	800027e <__udivmoddi4+0x90>
 8000274:	42a0      	cmp	r0, r4
 8000276:	d902      	bls.n	800027e <__udivmoddi4+0x90>
 8000278:	f1ac 0302 	sub.w	r3, ip, #2
 800027c:	442c      	add	r4, r5
 800027e:	1a24      	subs	r4, r4, r0
 8000280:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000284:	b11e      	cbz	r6, 800028e <__udivmoddi4+0xa0>
 8000286:	40d4      	lsrs	r4, r2
 8000288:	2300      	movs	r3, #0
 800028a:	6034      	str	r4, [r6, #0]
 800028c:	6073      	str	r3, [r6, #4]
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	4647      	mov	r7, r8
 8000294:	e7dd      	b.n	8000252 <__udivmoddi4+0x64>
 8000296:	4663      	mov	r3, ip
 8000298:	e7f1      	b.n	800027e <__udivmoddi4+0x90>
 800029a:	bb92      	cbnz	r2, 8000302 <__udivmoddi4+0x114>
 800029c:	1b43      	subs	r3, r0, r5
 800029e:	2101      	movs	r1, #1
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	b2af      	uxth	r7, r5
 80002a6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002aa:	0c20      	lsrs	r0, r4, #16
 80002ac:	fb0e 331c 	mls	r3, lr, ip, r3
 80002b0:	fb0c f807 	mul.w	r8, ip, r7
 80002b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002b8:	4598      	cmp	r8, r3
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0x194>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002c2:	d204      	bcs.n	80002ce <__udivmoddi4+0xe0>
 80002c4:	4598      	cmp	r8, r3
 80002c6:	d902      	bls.n	80002ce <__udivmoddi4+0xe0>
 80002c8:	f1ac 0002 	sub.w	r0, ip, #2
 80002cc:	442b      	add	r3, r5
 80002ce:	eba3 0308 	sub.w	r3, r3, r8
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	fb0c f707 	mul.w	r7, ip, r7
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	42a7      	cmp	r7, r4
 80002e6:	d94e      	bls.n	8000386 <__udivmoddi4+0x198>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002ee:	d204      	bcs.n	80002fa <__udivmoddi4+0x10c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d902      	bls.n	80002fa <__udivmoddi4+0x10c>
 80002f4:	f1ac 0302 	sub.w	r3, ip, #2
 80002f8:	442c      	add	r4, r5
 80002fa:	1be4      	subs	r4, r4, r7
 80002fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000300:	e7c0      	b.n	8000284 <__udivmoddi4+0x96>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	fa20 f103 	lsr.w	r1, r0, r3
 800030a:	4095      	lsls	r5, r2
 800030c:	4090      	lsls	r0, r2
 800030e:	fa2e f303 	lsr.w	r3, lr, r3
 8000312:	4303      	orrs	r3, r0
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	b2af      	uxth	r7, r5
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	fb0e 101c 	mls	r0, lr, ip, r1
 8000322:	0c19      	lsrs	r1, r3, #16
 8000324:	fb0c f807 	mul.w	r8, ip, r7
 8000328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800032c:	4588      	cmp	r8, r1
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d922      	bls.n	800037a <__udivmoddi4+0x18c>
 8000334:	1869      	adds	r1, r5, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d204      	bcs.n	8000346 <__udivmoddi4+0x158>
 800033c:	4588      	cmp	r8, r1
 800033e:	d902      	bls.n	8000346 <__udivmoddi4+0x158>
 8000340:	f1ac 0002 	sub.w	r0, ip, #2
 8000344:	4429      	add	r1, r5
 8000346:	eba1 0108 	sub.w	r1, r1, r8
 800034a:	b29b      	uxth	r3, r3
 800034c:	fbb1 fcfe 	udiv	ip, r1, lr
 8000350:	fb0e 111c 	mls	r1, lr, ip, r1
 8000354:	fb0c f707 	mul.w	r7, ip, r7
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	429f      	cmp	r7, r3
 800035e:	d90e      	bls.n	800037e <__udivmoddi4+0x190>
 8000360:	18eb      	adds	r3, r5, r3
 8000362:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000366:	d204      	bcs.n	8000372 <__udivmoddi4+0x184>
 8000368:	429f      	cmp	r7, r3
 800036a:	d902      	bls.n	8000372 <__udivmoddi4+0x184>
 800036c:	f1ac 0102 	sub.w	r1, ip, #2
 8000370:	442b      	add	r3, r5
 8000372:	1bdb      	subs	r3, r3, r7
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e792      	b.n	80002a0 <__udivmoddi4+0xb2>
 800037a:	4660      	mov	r0, ip
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0x158>
 800037e:	4661      	mov	r1, ip
 8000380:	e7f7      	b.n	8000372 <__udivmoddi4+0x184>
 8000382:	4660      	mov	r0, ip
 8000384:	e7a3      	b.n	80002ce <__udivmoddi4+0xe0>
 8000386:	4663      	mov	r3, ip
 8000388:	e7b7      	b.n	80002fa <__udivmoddi4+0x10c>
 800038a:	4283      	cmp	r3, r0
 800038c:	d906      	bls.n	800039c <__udivmoddi4+0x1ae>
 800038e:	b916      	cbnz	r6, 8000396 <__udivmoddi4+0x1a8>
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e77b      	b.n	800028e <__udivmoddi4+0xa0>
 8000396:	e9c6 e000 	strd	lr, r0, [r6]
 800039a:	e7f9      	b.n	8000390 <__udivmoddi4+0x1a2>
 800039c:	fab3 f783 	clz	r7, r3
 80003a0:	b98f      	cbnz	r7, 80003c6 <__udivmoddi4+0x1d8>
 80003a2:	4283      	cmp	r3, r0
 80003a4:	d301      	bcc.n	80003aa <__udivmoddi4+0x1bc>
 80003a6:	4572      	cmp	r2, lr
 80003a8:	d808      	bhi.n	80003bc <__udivmoddi4+0x1ce>
 80003aa:	ebbe 0402 	subs.w	r4, lr, r2
 80003ae:	eb60 0303 	sbc.w	r3, r0, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	469c      	mov	ip, r3
 80003b6:	b91e      	cbnz	r6, 80003c0 <__udivmoddi4+0x1d2>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e768      	b.n	800028e <__udivmoddi4+0xa0>
 80003bc:	4638      	mov	r0, r7
 80003be:	e7fa      	b.n	80003b6 <__udivmoddi4+0x1c8>
 80003c0:	e9c6 4c00 	strd	r4, ip, [r6]
 80003c4:	e7f8      	b.n	80003b8 <__udivmoddi4+0x1ca>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 f40c 	lsr.w	r4, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa2e f10c 	lsr.w	r1, lr, ip
 80003d6:	fa20 f30c 	lsr.w	r3, r0, ip
 80003da:	40b8      	lsls	r0, r7
 80003dc:	4301      	orrs	r1, r0
 80003de:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003e2:	fa0e f507 	lsl.w	r5, lr, r7
 80003e6:	fbb3 f8f9 	udiv	r8, r3, r9
 80003ea:	fa1f fe84 	uxth.w	lr, r4
 80003ee:	fb09 3018 	mls	r0, r9, r8, r3
 80003f2:	0c0b      	lsrs	r3, r1, #16
 80003f4:	fb08 fa0e 	mul.w	sl, r8, lr
 80003f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003fc:	459a      	cmp	sl, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	d940      	bls.n	8000486 <__udivmoddi4+0x298>
 8000404:	18e3      	adds	r3, r4, r3
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800040a:	d204      	bcs.n	8000416 <__udivmoddi4+0x228>
 800040c:	459a      	cmp	sl, r3
 800040e:	d902      	bls.n	8000416 <__udivmoddi4+0x228>
 8000410:	f1a8 0002 	sub.w	r0, r8, #2
 8000414:	4423      	add	r3, r4
 8000416:	eba3 030a 	sub.w	r3, r3, sl
 800041a:	b289      	uxth	r1, r1
 800041c:	fbb3 f8f9 	udiv	r8, r3, r9
 8000420:	fb09 3318 	mls	r3, r9, r8, r3
 8000424:	fb08 fe0e 	mul.w	lr, r8, lr
 8000428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042c:	458e      	cmp	lr, r1
 800042e:	d92c      	bls.n	800048a <__udivmoddi4+0x29c>
 8000430:	1861      	adds	r1, r4, r1
 8000432:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000436:	d204      	bcs.n	8000442 <__udivmoddi4+0x254>
 8000438:	458e      	cmp	lr, r1
 800043a:	d902      	bls.n	8000442 <__udivmoddi4+0x254>
 800043c:	f1a8 0302 	sub.w	r3, r8, #2
 8000440:	4421      	add	r1, r4
 8000442:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000446:	fba0 9802 	umull	r9, r8, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	4541      	cmp	r1, r8
 8000450:	46ce      	mov	lr, r9
 8000452:	4643      	mov	r3, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x26e>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x278>
 8000458:	454d      	cmp	r5, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x278>
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0304 	sbc.w	r3, r8, r4
 8000464:	3801      	subs	r0, #1
 8000466:	2e00      	cmp	r6, #0
 8000468:	d0a6      	beq.n	80003b8 <__udivmoddi4+0x1ca>
 800046a:	ebb5 020e 	subs.w	r2, r5, lr
 800046e:	eb61 0103 	sbc.w	r1, r1, r3
 8000472:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000476:	fa22 f307 	lsr.w	r3, r2, r7
 800047a:	ea4c 0303 	orr.w	r3, ip, r3
 800047e:	40f9      	lsrs	r1, r7
 8000480:	e9c6 3100 	strd	r3, r1, [r6]
 8000484:	e798      	b.n	80003b8 <__udivmoddi4+0x1ca>
 8000486:	4640      	mov	r0, r8
 8000488:	e7c5      	b.n	8000416 <__udivmoddi4+0x228>
 800048a:	4643      	mov	r3, r8
 800048c:	e7d9      	b.n	8000442 <__udivmoddi4+0x254>
	...

08000490 <main>:
	DT_FOREACH_PROP_ELEM(DT_PATH(zephyr_user), io_channels,
			     DT_SPEC_AND_COMMA)
};

void main(void)
{
 8000490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000494:	b089      	sub	sp, #36	; 0x24
	int err;
	uint16_t buf;
	struct adc_sequence sequence = {
 8000496:	2214      	movs	r2, #20
 8000498:	2100      	movs	r1, #0
 800049a:	a803      	add	r0, sp, #12
 800049c:	f002 ff18 	bl	80032d0 <memset>
 80004a0:	f10d 0306 	add.w	r3, sp, #6
 80004a4:	9305      	str	r3, [sp, #20]
 80004a6:	4c47      	ldr	r4, [pc, #284]	; (80005c4 <main+0x134>)
 80004a8:	2302      	movs	r3, #2
 80004aa:	9306      	str	r3, [sp, #24]
		/* buffer size in bytes, not number of samples */
		.buffer_size = sizeof(buf),
	};

	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 80004ac:	2500      	movs	r5, #0
		if (!device_is_ready(adc_channels[i].dev)) {
 80004ae:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80004b2:	f003 fb0b 	bl	8003acc <z_device_is_ready>
 80004b6:	b928      	cbnz	r0, 80004c4 <main+0x34>
			printk("ADC controller device not ready\n");
 80004b8:	4843      	ldr	r0, [pc, #268]	; (80005c8 <main+0x138>)
 80004ba:	f002 fe66 	bl	800318a <printk>

		// printk("welp");

		k_sleep(K_MSEC(200));
	}
}
 80004be:	b009      	add	sp, #36	; 0x24
 80004c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * Devicetree is not valid.
 * @see adc_channel_setup()
 */
static inline int adc_channel_setup_dt(const struct adc_dt_spec *spec)
{
	if (!spec->channel_cfg_dt_node_exists) {
 80004c4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80004c8:	b163      	cbz	r3, 80004e4 <main+0x54>
		return -ENOTSUP;
	}

	return adc_channel_setup(spec->dev, &spec->channel_cfg);
 80004ca:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
 80004ce:	6883      	ldr	r3, [r0, #8]
 80004d0:	4621      	mov	r1, r4
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4798      	blx	r3
		if (err < 0) {
 80004d6:	1e02      	subs	r2, r0, #0
 80004d8:	da07      	bge.n	80004ea <main+0x5a>
			printk("Could not setup channel #%d (%d)\n", i, err);
 80004da:	483c      	ldr	r0, [pc, #240]	; (80005cc <main+0x13c>)
 80004dc:	4629      	mov	r1, r5
 80004de:	f002 fe54 	bl	800318a <printk>
			return;
 80004e2:	e7ec      	b.n	80004be <main+0x2e>
		return -ENOTSUP;
 80004e4:	f06f 0285 	mvn.w	r2, #133	; 0x85
 80004e8:	e7f7      	b.n	80004da <main+0x4a>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 80004ea:	3501      	adds	r5, #1
 80004ec:	2d05      	cmp	r5, #5
 80004ee:	f104 0410 	add.w	r4, r4, #16
 80004f2:	d1dc      	bne.n	80004ae <main+0x1e>
		printk("ADC reading:\n");
 80004f4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80005d0 <main+0x140>
			printk("- %s, channel %d: ",
 80004f8:	4f36      	ldr	r7, [pc, #216]	; (80005d4 <main+0x144>)
		printk("ADC reading:\n");
 80004fa:	4c37      	ldr	r4, [pc, #220]	; (80005d8 <main+0x148>)
				printk(" = %"PRId32" mV\n", val_mv);
 80004fc:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80005dc <main+0x14c>
		printk("ADC reading:\n");
 8000500:	4648      	mov	r0, r9
 8000502:	f002 fe42 	bl	800318a <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 8000506:	2600      	movs	r6, #0
 8000508:	46a2      	mov	sl, r4
			       adc_channels[i].dev->name,
 800050a:	6825      	ldr	r5, [r4, #0]
			printk("- %s, channel %d: ",
 800050c:	f894 8004 	ldrb.w	r8, [r4, #4]
 8000510:	6829      	ldr	r1, [r5, #0]
 8000512:	4642      	mov	r2, r8
 8000514:	4638      	mov	r0, r7
 8000516:	f002 fe38 	bl	800318a <printk>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
 800051a:	7963      	ldrb	r3, [r4, #5]
 800051c:	b14b      	cbz	r3, 8000532 <main+0xa2>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
 800051e:	2301      	movs	r3, #1
 8000520:	fa03 f308 	lsl.w	r3, r3, r8
 8000524:	9304      	str	r3, [sp, #16]
	seq->resolution = spec->resolution;
 8000526:	7ba3      	ldrb	r3, [r4, #14]
 8000528:	f88d 301c 	strb.w	r3, [sp, #28]
	seq->oversampling = spec->oversampling;
 800052c:	7be3      	ldrb	r3, [r4, #15]
 800052e:	f88d 301d 	strb.w	r3, [sp, #29]
	return api->read(dev, sequence);
 8000532:	68ab      	ldr	r3, [r5, #8]
 8000534:	a903      	add	r1, sp, #12
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4628      	mov	r0, r5
 800053a:	4798      	blx	r3
			if (err < 0) {
 800053c:	1e01      	subs	r1, r0, #0
 800053e:	da03      	bge.n	8000548 <main+0xb8>
				printk("Could not read (%d)\n", err);
 8000540:	4827      	ldr	r0, [pc, #156]	; (80005e0 <main+0x150>)
				printk(" = %"PRId32" mV\n", val_mv);
 8000542:	f002 fe22 	bl	800318a <printk>
 8000546:	e00b      	b.n	8000560 <main+0xd0>
				printk("%"PRIu16, buf);
 8000548:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <main+0x154>)
 800054e:	f002 fe1c 	bl	800318a <printk>
	if (!spec->channel_cfg_dt_node_exists) {
 8000552:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf;
 8000554:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8000558:	b97b      	cbnz	r3, 800057a <main+0xea>
				printk(" (value in mV not available)\n");
 800055a:	4823      	ldr	r0, [pc, #140]	; (80005e8 <main+0x158>)
 800055c:	f002 fe15 	bl	800318a <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
 8000560:	3601      	adds	r6, #1
 8000562:	2e05      	cmp	r6, #5
 8000564:	f104 0410 	add.w	r4, r4, #16
 8000568:	d1cf      	bne.n	800050a <main+0x7a>
		test_lib_function();		
 800056a:	f000 f83f 	bl	80005ec <test_lib_function>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 800056e:	2100      	movs	r1, #0
 8000570:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000574:	f002 fb6e 	bl	8002c54 <z_impl_k_sleep>
	while (1) {
 8000578:	e7bf      	b.n	80004fa <main+0x6a>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
 800057a:	79e3      	ldrb	r3, [r4, #7]
	resolution = spec->resolution;
 800057c:	f894 800e 	ldrb.w	r8, [r4, #14]
	int ret = adc_gain_invert(gain, &adc_mv);
 8000580:	79a0      	ldrb	r0, [r4, #6]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
 8000582:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
 8000584:	bf0a      	itet	eq
 8000586:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
 8000588:	89a2      	ldrhne	r2, [r4, #12]
	return api->ref_internal;
 800058a:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
 800058c:	eb0a 1106 	add.w	r1, sl, r6, lsl #4
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
 8000590:	bf08      	it	eq
 8000592:	891a      	ldrheq	r2, [r3, #8]
	if (spec->channel_cfg.differential) {
 8000594:	7a89      	ldrb	r1, [r1, #10]
 8000596:	068b      	lsls	r3, r1, #26
		resolution -= 1U;
 8000598:	bf48      	it	mi
 800059a:	f108 33ff 	addmi.w	r3, r8, #4294967295	; 0xffffffff
	int32_t adc_mv = *valp * ref_mv;
 800059e:	fb05 f202 	mul.w	r2, r5, r2
	int ret = adc_gain_invert(gain, &adc_mv);
 80005a2:	a902      	add	r1, sp, #8
		resolution -= 1U;
 80005a4:	bf48      	it	mi
 80005a6:	fa5f f883 	uxtbmi.w	r8, r3
	int32_t adc_mv = *valp * ref_mv;
 80005aa:	9202      	str	r2, [sp, #8]
	int ret = adc_gain_invert(gain, &adc_mv);
 80005ac:	f001 f81c 	bl	80015e8 <adc_gain_invert>
	if (ret == 0) {
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d105      	bne.n	80005c0 <main+0x130>
		*valp = (adc_mv >> resolution);
 80005b4:	9d02      	ldr	r5, [sp, #8]
 80005b6:	fa45 f508 	asr.w	r5, r5, r8
				printk(" = %"PRId32" mV\n", val_mv);
 80005ba:	4629      	mov	r1, r5
 80005bc:	4658      	mov	r0, fp
 80005be:	e7c0      	b.n	8000542 <main+0xb2>
			if (err < 0) {
 80005c0:	dbcb      	blt.n	800055a <main+0xca>
 80005c2:	e7fa      	b.n	80005ba <main+0x12a>
 80005c4:	080042ce 	.word	0x080042ce
 80005c8:	0800463a 	.word	0x0800463a
 80005cc:	0800465b 	.word	0x0800465b
 80005d0:	0800467d 	.word	0x0800467d
 80005d4:	0800468b 	.word	0x0800468b
 80005d8:	080042c8 	.word	0x080042c8
 80005dc:	080046d4 	.word	0x080046d4
 80005e0:	0800469e 	.word	0x0800469e
 80005e4:	080046b3 	.word	0x080046b3
 80005e8:	080046b6 	.word	0x080046b6

080005ec <test_lib_function>:
#include <zephyr/sys/printk.h>


void test_lib_function(void)
{
    printk("hello from adc_reader\n");
 80005ec:	4801      	ldr	r0, [pc, #4]	; (80005f4 <test_lib_function+0x8>)
 80005ee:	f002 bdcc 	b.w	800318a <printk>
 80005f2:	bf00      	nop
 80005f4:	080046de 	.word	0x080046de

080005f8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <char_out+0x8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4718      	bx	r3
 80005fe:	bf00      	nop
 8000600:	200001f8 	.word	0x200001f8

08000604 <__printk_hook_install>:
	_char_out = fn;
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <__printk_hook_install+0x8>)
 8000606:	6018      	str	r0, [r3, #0]
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200001f8 	.word	0x200001f8

08000610 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8000610:	b507      	push	{r0, r1, r2, lr}
 8000612:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8000614:	2100      	movs	r1, #0
 8000616:	4602      	mov	r2, r0
 8000618:	9100      	str	r1, [sp, #0]
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <vprintk+0x18>)
 800061c:	f000 f806 	bl	800062c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8000620:	b003      	add	sp, #12
 8000622:	f85d fb04 	ldr.w	pc, [sp], #4
 8000626:	bf00      	nop
 8000628:	080005f9 	.word	0x080005f9

0800062c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 800062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000630:	4681      	mov	r9, r0
 8000632:	b095      	sub	sp, #84	; 0x54
 8000634:	468b      	mov	fp, r1
 8000636:	4617      	mov	r7, r2
 8000638:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800063a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 800063c:	7838      	ldrb	r0, [r7, #0]
 800063e:	b908      	cbnz	r0, 8000644 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000640:	4628      	mov	r0, r5
 8000642:	e358      	b.n	8000cf6 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 8000644:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 8000646:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000648:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 800064a:	d006      	beq.n	800065a <z_cbvprintf_impl+0x2e>
			OUTC('%');
 800064c:	4659      	mov	r1, fp
 800064e:	47c8      	blx	r9
 8000650:	2800      	cmp	r0, #0
 8000652:	f2c0 8350 	blt.w	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000656:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000658:	e1fb      	b.n	8000a52 <z_cbvprintf_impl+0x426>
		} state = {
 800065a:	2218      	movs	r2, #24
 800065c:	2100      	movs	r1, #0
 800065e:	a80e      	add	r0, sp, #56	; 0x38
 8000660:	f002 fe36 	bl	80032d0 <memset>
	if (*sp == '%') {
 8000664:	787b      	ldrb	r3, [r7, #1]
 8000666:	2b25      	cmp	r3, #37	; 0x25
 8000668:	d07d      	beq.n	8000766 <z_cbvprintf_impl+0x13a>
 800066a:	2300      	movs	r3, #0
 800066c:	1c78      	adds	r0, r7, #1
 800066e:	4698      	mov	r8, r3
 8000670:	469e      	mov	lr, r3
 8000672:	469c      	mov	ip, r3
 8000674:	461e      	mov	r6, r3
 8000676:	4601      	mov	r1, r0
		switch (*sp) {
 8000678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800067c:	2a2b      	cmp	r2, #43	; 0x2b
 800067e:	f000 80a1 	beq.w	80007c4 <z_cbvprintf_impl+0x198>
 8000682:	f200 8098 	bhi.w	80007b6 <z_cbvprintf_impl+0x18a>
 8000686:	2a20      	cmp	r2, #32
 8000688:	f000 809f 	beq.w	80007ca <z_cbvprintf_impl+0x19e>
 800068c:	2a23      	cmp	r2, #35	; 0x23
 800068e:	f000 809f 	beq.w	80007d0 <z_cbvprintf_impl+0x1a4>
 8000692:	b12b      	cbz	r3, 80006a0 <z_cbvprintf_impl+0x74>
 8000694:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80006a0:	f1b8 0f00 	cmp.w	r8, #0
 80006a4:	d005      	beq.n	80006b2 <z_cbvprintf_impl+0x86>
 80006a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80006b2:	f1be 0f00 	cmp.w	lr, #0
 80006b6:	d005      	beq.n	80006c4 <z_cbvprintf_impl+0x98>
 80006b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80006c4:	f1bc 0f00 	cmp.w	ip, #0
 80006c8:	d005      	beq.n	80006d6 <z_cbvprintf_impl+0xaa>
 80006ca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80006d6:	b12e      	cbz	r6, 80006e4 <z_cbvprintf_impl+0xb8>
 80006d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 80006e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80006e8:	f003 0044 	and.w	r0, r3, #68	; 0x44
 80006ec:	2844      	cmp	r0, #68	; 0x44
 80006ee:	d103      	bne.n	80006f8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80006f0:	f36f 1386 	bfc	r3, #6, #1
 80006f4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 80006f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80006fc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80006fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000702:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000706:	d17f      	bne.n	8000808 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 8000708:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800070c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 8000710:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000712:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	2a2e      	cmp	r2, #46	; 0x2e
 800071a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800071e:	bf0c      	ite	eq
 8000720:	2101      	moveq	r1, #1
 8000722:	2100      	movne	r1, #0
 8000724:	f361 0241 	bfi	r2, r1, #1, #1
 8000728:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 800072c:	d178      	bne.n	8000820 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	2a2a      	cmp	r2, #42	; 0x2a
 8000732:	d06e      	beq.n	8000812 <z_cbvprintf_impl+0x1e6>
	++sp;
 8000734:	3301      	adds	r3, #1
	size_t val = 0;
 8000736:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000738:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 800073c:	4619      	mov	r1, r3
 800073e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000742:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000746:	2e09      	cmp	r6, #9
 8000748:	f240 8095 	bls.w	8000876 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 800074c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 8000750:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 8000752:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000756:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 800075a:	460a      	mov	r2, r1
 800075c:	f360 0241 	bfi	r2, r0, #1, #1
 8000760:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000764:	e05c      	b.n	8000820 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 8000766:	1cba      	adds	r2, r7, #2
 8000768:	9203      	str	r2, [sp, #12]
 800076a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 800076e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000772:	07da      	lsls	r2, r3, #31
 8000774:	f140 812e 	bpl.w	80009d4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000778:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 800077c:	f1b8 0f00 	cmp.w	r8, #0
 8000780:	da07      	bge.n	8000792 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000782:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000786:	f042 0204 	orr.w	r2, r2, #4
 800078a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
 800078e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8000792:	075e      	lsls	r6, r3, #29
 8000794:	f140 8127 	bpl.w	80009e6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000798:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 800079c:	f1ba 0f00 	cmp.w	sl, #0
 80007a0:	f280 8126 	bge.w	80009f0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 80007a4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80007a8:	f36f 0341 	bfc	r3, #1, #1
 80007ac:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 80007b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80007b4:	e11c      	b.n	80009f0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 80007b6:	2a2d      	cmp	r2, #45	; 0x2d
 80007b8:	d00d      	beq.n	80007d6 <z_cbvprintf_impl+0x1aa>
 80007ba:	2a30      	cmp	r2, #48	; 0x30
 80007bc:	f47f af69 	bne.w	8000692 <z_cbvprintf_impl+0x66>
 80007c0:	2301      	movs	r3, #1
	} while (loop);
 80007c2:	e758      	b.n	8000676 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	e755      	b.n	8000676 <z_cbvprintf_impl+0x4a>
 80007ca:	f04f 0e01 	mov.w	lr, #1
 80007ce:	e752      	b.n	8000676 <z_cbvprintf_impl+0x4a>
 80007d0:	f04f 0801 	mov.w	r8, #1
 80007d4:	e74f      	b.n	8000676 <z_cbvprintf_impl+0x4a>
 80007d6:	2601      	movs	r6, #1
 80007d8:	e74d      	b.n	8000676 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 80007da:	fb0e 6202 	mla	r2, lr, r2, r6
 80007de:	3a30      	subs	r2, #48	; 0x30
 80007e0:	4603      	mov	r3, r0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f810 6b01 	ldrb.w	r6, [r0], #1
 80007e8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80007ec:	f1bc 0f09 	cmp.w	ip, #9
 80007f0:	d9f3      	bls.n	80007da <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d08f      	beq.n	8000716 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80007f6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 80007fa:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 80007fc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80007fe:	f362 0141 	bfi	r1, r2, #1, #1
 8000802:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8000806:	e786      	b.n	8000716 <z_cbvprintf_impl+0xea>
 8000808:	460b      	mov	r3, r1
	size_t val = 0;
 800080a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 800080c:	f04f 0e0a 	mov.w	lr, #10
 8000810:	e7e7      	b.n	80007e2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 8000812:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000816:	f042 0204 	orr.w	r2, r2, #4
 800081a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 800081e:	3302      	adds	r3, #2
	switch (*sp) {
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	2a6c      	cmp	r2, #108	; 0x6c
 8000824:	d047      	beq.n	80008b6 <z_cbvprintf_impl+0x28a>
 8000826:	d82b      	bhi.n	8000880 <z_cbvprintf_impl+0x254>
 8000828:	2a68      	cmp	r2, #104	; 0x68
 800082a:	d031      	beq.n	8000890 <z_cbvprintf_impl+0x264>
 800082c:	2a6a      	cmp	r2, #106	; 0x6a
 800082e:	d04b      	beq.n	80008c8 <z_cbvprintf_impl+0x29c>
 8000830:	2a4c      	cmp	r2, #76	; 0x4c
 8000832:	d051      	beq.n	80008d8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 8000834:	461a      	mov	r2, r3
 8000836:	f812 3b01 	ldrb.w	r3, [r2], #1
 800083a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
 800083c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 800083e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
 8000842:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
 8000846:	f200 80be 	bhi.w	80009c6 <z_cbvprintf_impl+0x39a>
 800084a:	2b6d      	cmp	r3, #109	; 0x6d
 800084c:	d851      	bhi.n	80008f2 <z_cbvprintf_impl+0x2c6>
 800084e:	2b69      	cmp	r3, #105	; 0x69
 8000850:	f200 80b9 	bhi.w	80009c6 <z_cbvprintf_impl+0x39a>
 8000854:	2b57      	cmp	r3, #87	; 0x57
 8000856:	d867      	bhi.n	8000928 <z_cbvprintf_impl+0x2fc>
 8000858:	2b41      	cmp	r3, #65	; 0x41
 800085a:	d003      	beq.n	8000864 <z_cbvprintf_impl+0x238>
 800085c:	3b45      	subs	r3, #69	; 0x45
 800085e:	2b02      	cmp	r3, #2
 8000860:	f200 80b1 	bhi.w	80009c6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000864:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000868:	2204      	movs	r2, #4
 800086a:	f362 0302 	bfi	r3, r2, #0, #3
 800086e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 8000872:	2301      	movs	r3, #1
			break;
 8000874:	e073      	b.n	800095e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 8000876:	fb0c 0202 	mla	r2, ip, r2, r0
 800087a:	3a30      	subs	r2, #48	; 0x30
 800087c:	460b      	mov	r3, r1
 800087e:	e75d      	b.n	800073c <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8000880:	2a74      	cmp	r2, #116	; 0x74
 8000882:	d025      	beq.n	80008d0 <z_cbvprintf_impl+0x2a4>
 8000884:	2a7a      	cmp	r2, #122	; 0x7a
 8000886:	d1d5      	bne.n	8000834 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 8000888:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800088c:	2106      	movs	r1, #6
 800088e:	e00c      	b.n	80008aa <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8000890:	785a      	ldrb	r2, [r3, #1]
 8000892:	2a68      	cmp	r2, #104	; 0x68
 8000894:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000898:	d106      	bne.n	80008a8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 800089a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 800089c:	f361 02c6 	bfi	r2, r1, #3, #4
 80008a0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 80008a4:	3302      	adds	r3, #2
 80008a6:	e7c5      	b.n	8000834 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 80008a8:	2102      	movs	r1, #2
 80008aa:	f361 02c6 	bfi	r2, r1, #3, #4
 80008ae:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 80008b2:	3301      	adds	r3, #1
 80008b4:	e7be      	b.n	8000834 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 80008b6:	785a      	ldrb	r2, [r3, #1]
 80008b8:	2a6c      	cmp	r2, #108	; 0x6c
 80008ba:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80008be:	d101      	bne.n	80008c4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 80008c0:	2104      	movs	r1, #4
 80008c2:	e7eb      	b.n	800089c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 80008c4:	2103      	movs	r1, #3
 80008c6:	e7f0      	b.n	80008aa <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 80008c8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80008cc:	2105      	movs	r1, #5
 80008ce:	e7ec      	b.n	80008aa <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 80008d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80008d4:	2107      	movs	r1, #7
 80008d6:	e7e8      	b.n	80008aa <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 80008d8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80008dc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80008e0:	f022 0202 	bic.w	r2, r2, #2
 80008e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008e8:	f042 0202 	orr.w	r2, r2, #2
 80008ec:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 80008f0:	e7df      	b.n	80008b2 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 80008f2:	3b6e      	subs	r3, #110	; 0x6e
 80008f4:	b2d9      	uxtb	r1, r3
 80008f6:	2301      	movs	r3, #1
 80008f8:	408b      	lsls	r3, r1
 80008fa:	f240 4182 	movw	r1, #1154	; 0x482
 80008fe:	420b      	tst	r3, r1
 8000900:	d137      	bne.n	8000972 <z_cbvprintf_impl+0x346>
 8000902:	f013 0f24 	tst.w	r3, #36	; 0x24
 8000906:	d151      	bne.n	80009ac <z_cbvprintf_impl+0x380>
 8000908:	07d8      	lsls	r0, r3, #31
 800090a:	d55c      	bpl.n	80009c6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 800090c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000910:	2103      	movs	r1, #3
 8000912:	f361 0302 	bfi	r3, r1, #0, #3
 8000916:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 800091a:	f002 0378 	and.w	r3, r2, #120	; 0x78
 800091e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8000922:	424b      	negs	r3, r1
 8000924:	414b      	adcs	r3, r1
 8000926:	e01a      	b.n	800095e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 8000928:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 800092c:	b2c9      	uxtb	r1, r1
 800092e:	2001      	movs	r0, #1
 8000930:	fa00 f101 	lsl.w	r1, r0, r1
 8000934:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8000938:	d194      	bne.n	8000864 <z_cbvprintf_impl+0x238>
 800093a:	f640 0601 	movw	r6, #2049	; 0x801
 800093e:	4231      	tst	r1, r6
 8000940:	d11d      	bne.n	800097e <z_cbvprintf_impl+0x352>
 8000942:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8000946:	d03e      	beq.n	80009c6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8000948:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800094c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000950:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000954:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 8000956:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 800095a:	d034      	beq.n	80009c6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 800095c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 800095e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000962:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000966:	430b      	orrs	r3, r1
 8000968:	f363 0241 	bfi	r2, r3, #1, #1
 800096c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000970:	e6fd      	b.n	800076e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 8000972:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000976:	2102      	movs	r1, #2
 8000978:	f361 0302 	bfi	r3, r1, #0, #3
 800097c:	e7e8      	b.n	8000950 <z_cbvprintf_impl+0x324>
 800097e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 8000982:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000984:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000988:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800098c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800098e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 8000992:	bf02      	ittt	eq
 8000994:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8000998:	f041 0101 	orreq.w	r1, r1, #1
 800099c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 80009a0:	2b63      	cmp	r3, #99	; 0x63
 80009a2:	d1db      	bne.n	800095c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80009a4:	1e13      	subs	r3, r2, #0
 80009a6:	bf18      	it	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	e7d8      	b.n	800095e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 80009ac:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80009b0:	2103      	movs	r1, #3
 80009b2:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 80009b6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80009ba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	e7cb      	b.n	800095e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 80009c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 80009d2:	e7c3      	b.n	800095c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 80009d4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 80009d8:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80009da:	bfb4      	ite	lt
 80009dc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 80009e0:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 80009e4:	e6d5      	b.n	8000792 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 80009e6:	0798      	lsls	r0, r3, #30
 80009e8:	f57f aee2 	bpl.w	80007b0 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 80009ec:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
 80009f0:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
 80009f4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80009f6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 80009fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
 80009fe:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000a02:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000a04:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000a08:	d133      	bne.n	8000a72 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 8000a0a:	1ecb      	subs	r3, r1, #3
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d804      	bhi.n	8000a1a <z_cbvprintf_impl+0x3ee>
 8000a10:	e8df f003 	tbb	[pc, r3]
 8000a14:	21464621 	.word	0x21464621
 8000a18:	21          	.byte	0x21
 8000a19:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8000a1a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8000a1c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8000a1e:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000a22:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000a26:	d11c      	bne.n	8000a62 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8000a28:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8000a2c:	17da      	asrs	r2, r3, #31
 8000a2e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 8000a32:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8000a34:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000a38:	f013 0603 	ands.w	r6, r3, #3
 8000a3c:	d050      	beq.n	8000ae0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 8000a3e:	9b03      	ldr	r3, [sp, #12]
 8000a40:	463a      	mov	r2, r7
 8000a42:	4659      	mov	r1, fp
 8000a44:	4648      	mov	r0, r9
 8000a46:	f002 fbfd 	bl	8003244 <outs>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	f2c0 8153 	blt.w	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000a50:	4405      	add	r5, r0
			continue;
 8000a52:	9f03      	ldr	r7, [sp, #12]
 8000a54:	e5f2      	b.n	800063c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a56:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a5a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000a5c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8000a60:	e7e8      	b.n	8000a34 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 8000a62:	2902      	cmp	r1, #2
 8000a64:	d1e5      	bne.n	8000a32 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000a6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000a70:	e7df      	b.n	8000a32 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d124      	bne.n	8000ac0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000a76:	1ecb      	subs	r3, r1, #3
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d804      	bhi.n	8000a86 <z_cbvprintf_impl+0x45a>
 8000a7c:	e8df f003 	tbb	[pc, r3]
 8000a80:	18101018 	.word	0x18101018
 8000a84:	18          	.byte	0x18
 8000a85:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000a86:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8000a88:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	d014      	beq.n	8000abc <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8000a92:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000a94:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000a98:	d1cc      	bne.n	8000a34 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000a9a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000a9c:	930e      	str	r3, [sp, #56]	; 0x38
 8000a9e:	e7c9      	b.n	8000a34 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8000aa0:	3407      	adds	r4, #7
 8000aa2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000aa6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000aaa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000aae:	e7c1      	b.n	8000a34 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8000ab0:	f854 3b04 	ldr.w	r3, [r4], #4
 8000ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8000aba:	e7bb      	b.n	8000a34 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	e7cd      	b.n	8000a5c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d108      	bne.n	8000ad6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000ac4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000ac6:	f024 0407 	bic.w	r4, r4, #7
 8000aca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000ace:	3408      	adds	r4, #8
 8000ad0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000ad4:	e7ae      	b.n	8000a34 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d1ac      	bne.n	8000a34 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8000ada:	f854 3b04 	ldr.w	r3, [r4], #4
 8000ade:	e7dd      	b.n	8000a9c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 8000ae0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000ae4:	2878      	cmp	r0, #120	; 0x78
 8000ae6:	d8b4      	bhi.n	8000a52 <z_cbvprintf_impl+0x426>
 8000ae8:	2862      	cmp	r0, #98	; 0x62
 8000aea:	d81c      	bhi.n	8000b26 <z_cbvprintf_impl+0x4fa>
 8000aec:	2825      	cmp	r0, #37	; 0x25
 8000aee:	f43f adad 	beq.w	800064c <z_cbvprintf_impl+0x20>
 8000af2:	2858      	cmp	r0, #88	; 0x58
 8000af4:	d1ad      	bne.n	8000a52 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000af6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000b00:	ab08      	add	r3, sp, #32
 8000b02:	aa10      	add	r2, sp, #64	; 0x40
 8000b04:	f002 fb58 	bl	80031b8 <encode_uint>
			if (precision >= 0) {
 8000b08:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000b0c:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000b0e:	f280 809a 	bge.w	8000c46 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d09d      	beq.n	8000a52 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000b16:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b1a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	f000 80c1 	beq.w	8000ca4 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 8000b22:	3001      	adds	r0, #1
 8000b24:	e0be      	b.n	8000ca4 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 8000b26:	3863      	subs	r0, #99	; 0x63
 8000b28:	2815      	cmp	r0, #21
 8000b2a:	d892      	bhi.n	8000a52 <z_cbvprintf_impl+0x426>
 8000b2c:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <z_cbvprintf_impl+0x508>)
 8000b2e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000c09 	.word	0x08000c09
 8000b38:	08000c1b 	.word	0x08000c1b
 8000b3c:	08000a53 	.word	0x08000a53
 8000b40:	08000a53 	.word	0x08000a53
 8000b44:	08000a53 	.word	0x08000a53
 8000b48:	08000a53 	.word	0x08000a53
 8000b4c:	08000c1b 	.word	0x08000c1b
 8000b50:	08000a53 	.word	0x08000a53
 8000b54:	08000a53 	.word	0x08000a53
 8000b58:	08000a53 	.word	0x08000a53
 8000b5c:	08000a53 	.word	0x08000a53
 8000b60:	08000ca9 	.word	0x08000ca9
 8000b64:	08000c41 	.word	0x08000c41
 8000b68:	08000c67 	.word	0x08000c67
 8000b6c:	08000a53 	.word	0x08000a53
 8000b70:	08000a53 	.word	0x08000a53
 8000b74:	08000b8d 	.word	0x08000b8d
 8000b78:	08000a53 	.word	0x08000a53
 8000b7c:	08000c41 	.word	0x08000c41
 8000b80:	08000a53 	.word	0x08000a53
 8000b84:	08000a53 	.word	0x08000a53
 8000b88:	08000c41 	.word	0x08000c41
			if (precision >= 0) {
 8000b8c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000b90:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000b92:	db35      	blt.n	8000c00 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000b94:	4651      	mov	r1, sl
 8000b96:	4638      	mov	r0, r7
 8000b98:	f002 fb86 	bl	80032a8 <strnlen>
			bpe = bps + len;
 8000b9c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000ba0:	2f00      	cmp	r7, #0
 8000ba2:	f43f af56 	beq.w	8000a52 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000ba6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000ba8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000bac:	f013 0210 	ands.w	r2, r3, #16
 8000bb0:	9205      	str	r2, [sp, #20]
 8000bb2:	f000 8093 	beq.w	8000cdc <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 8000bb6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000bb8:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000bba:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000bbc:	bf48      	it	mi
 8000bbe:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000bc0:	9204      	str	r2, [sp, #16]
 8000bc2:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000bc4:	bf48      	it	mi
 8000bc6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000bc8:	f1b8 0f00 	cmp.w	r8, #0
 8000bcc:	f340 80a0 	ble.w	8000d10 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
 8000bd0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000bd4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000bd8:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000bdc:	0750      	lsls	r0, r2, #29
 8000bde:	9306      	str	r3, [sp, #24]
 8000be0:	f100 8096 	bmi.w	8000d10 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
 8000be4:	0651      	lsls	r1, r2, #25
 8000be6:	f140 8089 	bpl.w	8000cfc <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 8000bea:	b13e      	cbz	r6, 8000bfc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000bec:	4659      	mov	r1, fp
 8000bee:	4630      	mov	r0, r6
 8000bf0:	47c8      	blx	r9
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	db7f      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000bf6:	9b06      	ldr	r3, [sp, #24]
 8000bf8:	3501      	adds	r5, #1
 8000bfa:	461e      	mov	r6, r3
					pad = '0';
 8000bfc:	2230      	movs	r2, #48	; 0x30
 8000bfe:	e07e      	b.n	8000cfe <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 8000c00:	4638      	mov	r0, r7
 8000c02:	f002 fb4a 	bl	800329a <strlen>
 8000c06:	e7c9      	b.n	8000b9c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000c0a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
 8000c0e:	2600      	movs	r6, #0
			bps = buf;
 8000c10:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000c12:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 8000c16:	2001      	movs	r0, #1
 8000c18:	e7c6      	b.n	8000ba8 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000c1a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000c1c:	bf5c      	itt	pl
 8000c1e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000c22:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8000c24:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
 8000c28:	bf48      	it	mi
 8000c2a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f6bf af62 	bge.w	8000af6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000c32:	4252      	negs	r2, r2
 8000c34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
 8000c3c:	262d      	movs	r6, #45	; 0x2d
 8000c3e:	e75a      	b.n	8000af6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000c40:	2600      	movs	r6, #0
 8000c42:	e758      	b.n	8000af6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000c44:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000c46:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000c4a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c4e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000c50:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000c54:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000c56:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000c5a:	f67f af5a 	bls.w	8000b12 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000c5e:	ebaa 0303 	sub.w	r3, sl, r3
 8000c62:	9311      	str	r3, [sp, #68]	; 0x44
 8000c64:	e755      	b.n	8000b12 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000c66:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000c68:	b390      	cbz	r0, 8000cd0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c6a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	aa10      	add	r2, sp, #64	; 0x40
 8000c72:	ab08      	add	r3, sp, #32
 8000c74:	2100      	movs	r1, #0
 8000c76:	f002 fa9f 	bl	80031b8 <encode_uint>
				conv->altform_0c = true;
 8000c7a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8000c7e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c82:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c86:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
 8000c8a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c8e:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000c90:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000c94:	dad6      	bge.n	8000c44 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000c96:	2800      	cmp	r0, #0
 8000c98:	f43f aedb 	beq.w	8000a52 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000c9c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000ca0:	1a18      	subs	r0, r3, r0
		char sign = 0;
 8000ca2:	2600      	movs	r6, #0
 8000ca4:	469a      	mov	sl, r3
 8000ca6:	e77f      	b.n	8000ba8 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000caa:	2907      	cmp	r1, #7
 8000cac:	f63f aed1 	bhi.w	8000a52 <z_cbvprintf_impl+0x426>
 8000cb0:	e8df f001 	tbb	[pc, r1]
 8000cb4:	0c06040c 	.word	0x0c06040c
 8000cb8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000cbc:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000cbe:	e6c8      	b.n	8000a52 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000cc0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000cc2:	e6c6      	b.n	8000a52 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000cc4:	17ea      	asrs	r2, r5, #31
 8000cc6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000cca:	e6c2      	b.n	8000a52 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000ccc:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000cce:	e6c0      	b.n	8000a52 <z_cbvprintf_impl+0x426>
 8000cd0:	4f2e      	ldr	r7, [pc, #184]	; (8000d8c <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000cd2:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000cd4:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000cd8:	2005      	movs	r0, #5
 8000cda:	e765      	b.n	8000ba8 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000cdc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000cde:	bf48      	it	mi
 8000ce0:	3001      	addmi	r0, #1
 8000ce2:	e769      	b.n	8000bb8 <z_cbvprintf_impl+0x58c>
 8000ce4:	9307      	str	r3, [sp, #28]
					OUTC(pad);
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	9206      	str	r2, [sp, #24]
 8000cea:	4659      	mov	r1, fp
 8000cec:	47c8      	blx	r9
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000cf4:	da04      	bge.n	8000d00 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 8000cf6:	b015      	add	sp, #84	; 0x54
 8000cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000cfc:	2220      	movs	r2, #32
					pad = '0';
 8000cfe:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000d00:	4619      	mov	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000d08:	dcec      	bgt.n	8000ce4 <z_cbvprintf_impl+0x6b8>
 8000d0a:	4445      	add	r5, r8
 8000d0c:	1a6d      	subs	r5, r5, r1
 8000d0e:	4698      	mov	r8, r3
		if (sign != 0) {
 8000d10:	b12e      	cbz	r6, 8000d1e <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
 8000d12:	4659      	mov	r1, fp
 8000d14:	4630      	mov	r0, r6
 8000d16:	47c8      	blx	r9
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	dbec      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000d1c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000d1e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000d22:	06da      	lsls	r2, r3, #27
 8000d24:	d401      	bmi.n	8000d2a <z_cbvprintf_impl+0x6fe>
 8000d26:	071b      	lsls	r3, r3, #28
 8000d28:	d505      	bpl.n	8000d36 <z_cbvprintf_impl+0x70a>
				OUTC('0');
 8000d2a:	4659      	mov	r1, fp
 8000d2c:	2030      	movs	r0, #48	; 0x30
 8000d2e:	47c8      	blx	r9
 8000d30:	2800      	cmp	r0, #0
 8000d32:	dbe0      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000d34:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000d36:	9b05      	ldr	r3, [sp, #20]
 8000d38:	b133      	cbz	r3, 8000d48 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
 8000d3a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000d3e:	4659      	mov	r1, fp
 8000d40:	47c8      	blx	r9
 8000d42:	2800      	cmp	r0, #0
 8000d44:	dbd7      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000d46:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d48:	9e04      	ldr	r6, [sp, #16]
 8000d4a:	442e      	add	r6, r5
 8000d4c:	e005      	b.n	8000d5a <z_cbvprintf_impl+0x72e>
				OUTC('0');
 8000d4e:	4659      	mov	r1, fp
 8000d50:	2030      	movs	r0, #48	; 0x30
 8000d52:	47c8      	blx	r9
 8000d54:	2800      	cmp	r0, #0
 8000d56:	dbce      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000d58:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d5a:	1b73      	subs	r3, r6, r5
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dcf6      	bgt.n	8000d4e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
 8000d60:	4653      	mov	r3, sl
 8000d62:	463a      	mov	r2, r7
 8000d64:	4659      	mov	r1, fp
 8000d66:	4648      	mov	r0, r9
 8000d68:	f002 fa6c 	bl	8003244 <outs>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	dbc2      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000d70:	4405      	add	r5, r0
		while (width > 0) {
 8000d72:	44a8      	add	r8, r5
 8000d74:	eba8 0305 	sub.w	r3, r8, r5
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f77f ae6a 	ble.w	8000a52 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000d7e:	4659      	mov	r1, fp
 8000d80:	2020      	movs	r0, #32
 8000d82:	47c8      	blx	r9
 8000d84:	2800      	cmp	r0, #0
 8000d86:	dbb6      	blt.n	8000cf6 <z_cbvprintf_impl+0x6ca>
 8000d88:	3501      	adds	r5, #1
			--width;
 8000d8a:	e7f3      	b.n	8000d74 <z_cbvprintf_impl+0x748>
 8000d8c:	08004706 	.word	0x08004706

08000d90 <stm32f3_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000d90:	f04f 0210 	mov.w	r2, #16
 8000d94:	f3ef 8311 	mrs	r3, BASEPRI
 8000d98:	f382 8812 	msr	BASEPRI_MAX, r2
 8000d9c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000da0:	f383 8811 	msr	BASEPRI, r3
 8000da4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <stm32f3_init+0x2c>)
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <stm32f3_init+0x30>)
 8000dac:	601a      	str	r2, [r3, #0]
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <stm32f3_init+0x34>)
 8000db0:	6853      	ldr	r3, [r2, #4]
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6053      	str	r3, [r2, #4]

	/* Allow reflashing the board */
	LL_DBGMCU_EnableDBGSleepMode();

	return 0;
}
 8000db8:	2000      	movs	r0, #0
 8000dba:	4770      	bx	lr
 8000dbc:	2000023c 	.word	0x2000023c
 8000dc0:	007a1200 	.word	0x007a1200
 8000dc4:	e0042000 	.word	0xe0042000

08000dc8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000dc8:	4901      	ldr	r1, [pc, #4]	; (8000dd0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000dca:	2210      	movs	r2, #16
	str	r2, [r1]
 8000dcc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000dce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000dd0:	e000ed10 	.word	0xe000ed10

08000dd4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000dd4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000dd6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000dd8:	f380 8811 	msr	BASEPRI, r0
	isb
 8000ddc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000de6:	b662      	cpsie	i
	isb
 8000de8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000df0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000df2:	2800      	cmp	r0, #0
 8000df4:	db07      	blt.n	8000e06 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <arch_irq_enable+0x18>)
 8000df8:	0941      	lsrs	r1, r0, #5
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f000 001f 	and.w	r0, r0, #31
 8000e00:	4083      	lsls	r3, r0
 8000e02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000e0c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	bfa8      	it	ge
 8000e12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000e16:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	bfb8      	it	lt
 8000e1c:	4b06      	ldrlt	r3, [pc, #24]	; (8000e38 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000e22:	bfac      	ite	ge
 8000e24:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	bfb4      	ite	lt
 8000e30:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 8000e36:	4770      	bx	lr
 8000e38:	e000ed14 	.word	0xe000ed14

08000e3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000e3c:	bf30      	wfi
    b z_SysNmiOnReset
 8000e3e:	f7ff bffd 	b.w	8000e3c <z_SysNmiOnReset>
 8000e42:	bf00      	nop

08000e44 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000e46:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <z_arm_prep_c+0x44>)
 8000e4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000e4e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000e58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000e64:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000e68:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000e6c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000e70:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000e74:	f001 fae4 	bl	8002440 <z_bss_zero>
	z_data_copy();
 8000e78:	f001 ff6a 	bl	8002d50 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000e7c:	f000 fa14 	bl	80012a8 <z_arm_interrupt_init>
	z_cstart();
 8000e80:	f001 fb22 	bl	80024c8 <z_cstart>
 8000e84:	08000000 	.word	0x08000000
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e8e:	490a      	ldr	r1, [pc, #40]	; (8000eb8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000e90:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e92:	6809      	ldr	r1, [r1, #0]
 8000e94:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e96:	4909      	ldr	r1, [pc, #36]	; (8000ebc <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000e98:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e9a:	684b      	ldr	r3, [r1, #4]
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	604b      	str	r3, [r1, #4]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000eac:	6893      	ldr	r3, [r2, #8]
}
 8000eae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000494 	.word	0x20000494
 8000eb8:	08004608 	.word	0x08004608
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000ec0:	4912      	ldr	r1, [pc, #72]	; (8000f0c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000ec2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000ec4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000ec8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000eca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000ece:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000ed2:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000ed4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000ed8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000edc:	4f0c      	ldr	r7, [pc, #48]	; (8000f10 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000ede:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000ee2:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8000ee4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000ee6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000ee8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000eea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000eec:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000eee:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000ef2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000ef4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000ef6:	f000 fa1b 	bl	8001330 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000efa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000efe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000f02:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000f06:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000f0a:	4770      	bx	lr
    ldr r1, =_kernel
 8000f0c:	20000494 	.word	0x20000494
    ldr v4, =_SCS_ICSR
 8000f10:	e000ed04 	.word	0xe000ed04

08000f14 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000f14:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000f18:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000f1a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000f1e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000f22:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000f24:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000f28:	2902      	cmp	r1, #2
    beq _oops
 8000f2a:	d0ff      	beq.n	8000f2c <_oops>

08000f2c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000f2c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000f2e:	f002 f9a5 	bl	800327c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000f32:	bd01      	pop	{r0, pc}

08000f34 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000f34:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000f38:	9b00      	ldr	r3, [sp, #0]
 8000f3a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000f3e:	490a      	ldr	r1, [pc, #40]	; (8000f68 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000f40:	9b01      	ldr	r3, [sp, #4]
 8000f42:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000f46:	9b02      	ldr	r3, [sp, #8]
 8000f48:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000f4c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f54:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000f58:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000f5c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000f5e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000f60:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000f62:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	080031a5 	.word	0x080031a5

08000f6c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000f6c:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <z_check_thread_stack_fail+0x28>)
{
 8000f6e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000f70:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000f72:	b170      	cbz	r0, 8000f92 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000f74:	f113 0f16 	cmn.w	r3, #22
 8000f78:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000f7a:	d005      	beq.n	8000f88 <z_check_thread_stack_fail+0x1c>
 8000f7c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d805      	bhi.n	8000f90 <z_check_thread_stack_fail+0x24>
 8000f84:	4283      	cmp	r3, r0
 8000f86:	d203      	bcs.n	8000f90 <z_check_thread_stack_fail+0x24>
		return 0;
 8000f88:	4281      	cmp	r1, r0
 8000f8a:	bf28      	it	cs
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	4770      	bx	lr
 8000f90:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8000f92:	4770      	bx	lr
 8000f94:	20000494 	.word	0x20000494

08000f98 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000f98:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <arch_switch_to_main_thread+0x28>)
 8000f9c:	6098      	str	r0, [r3, #8]
{
 8000f9e:	460d      	mov	r5, r1
 8000fa0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000fa2:	f000 f9c5 	bl	8001330 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f385 8809 	msr	PSP, r5
 8000fac:	2100      	movs	r1, #0
 8000fae:	b663      	cpsie	if
 8000fb0:	f381 8811 	msr	BASEPRI, r1
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f002 f8f2 	bl	80031a4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000fc0:	20000494 	.word	0x20000494

08000fc4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000fc4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000fc6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000fca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000fce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000fd2:	4904      	ldr	r1, [pc, #16]	; (8000fe4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000fd4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000fd6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000fd8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000fda:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000fde:	4902      	ldr	r1, [pc, #8]	; (8000fe8 <_isr_wrapper+0x24>)
	bx r1
 8000fe0:	4708      	bx	r1
 8000fe2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000fe4:	08003f64 	.word	0x08003f64
	ldr r1, =z_arm_int_exit
 8000fe8:	08000fed 	.word	0x08000fed

08000fec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8000fee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8000ff0:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 8000ff2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8000ff4:	d003      	beq.n	8000ffe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8000ff6:	4903      	ldr	r1, [pc, #12]	; (8001004 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8000ffc:	600a      	str	r2, [r1, #0]

08000ffe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8000ffe:	4770      	bx	lr
	ldr r3, =_kernel
 8001000:	20000494 	.word	0x20000494
	ldr r1, =_SCS_ICSR
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001008:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <mem_manage_fault+0x9c>)
{
 800100c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800100e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 8001010:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 8001016:	bf14      	ite	ne
 8001018:	2411      	movne	r4, #17
 800101a:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800101c:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8001022:	bf18      	it	ne
 8001024:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001026:	0792      	lsls	r2, r2, #30
{
 8001028:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800102a:	d50a      	bpl.n	8001042 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 800102c:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800102e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001030:	0614      	lsls	r4, r2, #24
 8001032:	d534      	bpl.n	800109e <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8001034:	b119      	cbz	r1, 800103e <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 800103e:	2413      	movs	r4, #19
 8001040:	e001      	b.n	8001046 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
 8001042:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <mem_manage_fault+0x9c>)
 8001048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 800104a:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800104e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8001050:	bf18      	it	ne
 8001052:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8001054:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 800105a:	bf18      	it	ne
 800105c:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800105e:	06d2      	lsls	r2, r2, #27
 8001060:	d402      	bmi.n	8001068 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001064:	079b      	lsls	r3, r3, #30
 8001066:	d50a      	bpl.n	800107e <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <mem_manage_fault+0x9c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	0519      	lsls	r1, r3, #20
 800106e:	d506      	bpl.n	800107e <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001070:	4631      	mov	r1, r6
 8001072:	f7ff ff7b 	bl	8000f6c <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
 8001076:	b110      	cbz	r0, 800107e <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001078:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
 800107c:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <mem_manage_fault+0x9c>)
 8001080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001082:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8001084:	bf42      	ittt	mi
 8001086:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 8001088:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 800108c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800108e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001090:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8001094:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8001096:	2300      	movs	r3, #0
 8001098:	702b      	strb	r3, [r5, #0]

	return reason;
}
 800109a:	4620      	mov	r0, r4
 800109c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 800109e:	f06f 0015 	mvn.w	r0, #21
 80010a2:	e7cc      	b.n	800103e <mem_manage_fault+0x36>
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <usage_fault.constprop.0+0x50>)
 80010aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 80010ac:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80010b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 80010b2:	bf14      	ite	ne
 80010b4:	201e      	movne	r0, #30
 80010b6:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 80010b8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80010bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 80010be:	bf18      	it	ne
 80010c0:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 80010c2:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80010c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 80010c8:	bf18      	it	ne
 80010ca:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 80010cc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80010d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 80010d2:	bf18      	it	ne
 80010d4:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 80010d6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80010da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 80010dc:	bf18      	it	ne
 80010de:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 80010e0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010e6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80010ea:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 80010f0:	bf18      	it	ne
 80010f2:	2024      	movne	r0, #36	; 0x24
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80010fc:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001100:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001102:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001104:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 8001106:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800110a:	bf14      	ite	ne
 800110c:	2017      	movne	r0, #23
 800110e:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8001110:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001114:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8001116:	bf18      	it	ne
 8001118:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800111a:	05a4      	lsls	r4, r4, #22
 800111c:	d509      	bpl.n	8001132 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 800111e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001120:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001122:	0400      	lsls	r0, r0, #16
 8001124:	d504      	bpl.n	8001130 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 8001126:	b11a      	cbz	r2, 8001130 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800112a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 8001130:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <bus_fault.constprop.0+0x68>)
 8001134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8001136:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800113a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 800113c:	bf18      	it	ne
 800113e:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001140:	05d2      	lsls	r2, r2, #23
 8001142:	d40c      	bmi.n	800115e <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 8001146:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800114a:	bf18      	it	ne
 800114c:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <bus_fault.constprop.0+0x68>)
 8001150:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001152:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001156:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001158:	2300      	movs	r3, #0
 800115a:	700b      	strb	r3, [r1, #0]
}
 800115c:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 800115e:	201b      	movs	r0, #27
 8001160:	e7f5      	b.n	800114e <bus_fault.constprop.0+0x52>
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001168:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <z_arm_fault+0x118>)
 800116c:	685b      	ldr	r3, [r3, #4]
{
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001176:	2600      	movs	r6, #0
 8001178:	f386 8811 	msr	BASEPRI, r6
 800117c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001180:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001184:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8001188:	d111      	bne.n	80011ae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800118a:	f002 000c 	and.w	r0, r2, #12
 800118e:	2808      	cmp	r0, #8
 8001190:	d00d      	beq.n	80011ae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001192:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001194:	bf4c      	ite	mi
 8001196:	460d      	movmi	r5, r1
			*nested_exc = true;
 8001198:	2601      	movpl	r6, #1
	*recoverable = false;
 800119a:	2200      	movs	r2, #0
	switch (fault) {
 800119c:	3b03      	subs	r3, #3
	*recoverable = false;
 800119e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d805      	bhi.n	80011b2 <z_arm_fault+0x4a>
 80011a6:	e8df f003 	tbb	[pc, r3]
 80011aa:	5d1e      	.short	0x5d1e
 80011ac:	5a61      	.short	0x5a61
		return NULL;
 80011ae:	4635      	mov	r5, r6
 80011b0:	e7f3      	b.n	800119a <z_arm_fault+0x32>
 80011b2:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80011b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011b8:	b99b      	cbnz	r3, 80011e2 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80011ba:	2220      	movs	r2, #32
 80011bc:	4629      	mov	r1, r5
 80011be:	a802      	add	r0, sp, #8
 80011c0:	f002 f87b 	bl	80032ba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80011c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d054      	beq.n	8001274 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80011ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011ce:	b922      	cbnz	r2, 80011da <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80011d0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80011d4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80011d8:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 80011da:	a902      	add	r1, sp, #8
 80011dc:	4620      	mov	r0, r4
 80011de:	f002 f84b 	bl	8003278 <z_arm_fatal_error>
}
 80011e2:	b00a      	add	sp, #40	; 0x28
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <z_arm_fault+0x118>)
 80011e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ea:	0791      	lsls	r1, r2, #30
 80011ec:	d4e1      	bmi.n	80011b2 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	dbde      	blt.n	80011b2 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80011f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f6:	0052      	lsls	r2, r2, #1
 80011f8:	d5db      	bpl.n	80011b2 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80011fa:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80011fc:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80011fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001202:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001208:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800120c:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 800120e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001216:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800121c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001220:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001224:	4291      	cmp	r1, r2
 8001226:	d00a      	beq.n	800123e <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8001228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	b14a      	cbz	r2, 8001242 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
 800122e:	f10d 0207 	add.w	r2, sp, #7
 8001232:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff fee7 	bl	8001008 <mem_manage_fault>
		reason = usage_fault(esf);
 800123a:	4604      	mov	r4, r0
		break;
 800123c:	e7ba      	b.n	80011b4 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 800123e:	682c      	ldr	r4, [r5, #0]
 8001240:	e7b8      	b.n	80011b4 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001244:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8001248:	d005      	beq.n	8001256 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
 800124a:	f10d 0107 	add.w	r1, sp, #7
 800124e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001250:	f7ff ff54 	bl	80010fc <bus_fault.constprop.0>
 8001254:	e7f1      	b.n	800123a <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125c:	d3a9      	bcc.n	80011b2 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 800125e:	f7ff ff23 	bl	80010a8 <usage_fault.constprop.0>
 8001262:	e7ea      	b.n	800123a <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
 8001264:	f10d 0207 	add.w	r2, sp, #7
 8001268:	2100      	movs	r1, #0
 800126a:	e7e3      	b.n	8001234 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 800126c:	f10d 0107 	add.w	r1, sp, #7
 8001270:	2000      	movs	r0, #0
 8001272:	e7ed      	b.n	8001250 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001274:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	e7ac      	b.n	80011d8 <z_arm_fault+0x70>
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001284:	4a02      	ldr	r2, [pc, #8]	; (8001290 <z_arm_fault_init+0xc>)
 8001286:	6953      	ldr	r3, [r2, #20]
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001294:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001298:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800129c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800129e:	4672      	mov	r2, lr
	bl z_arm_fault
 80012a0:	f7ff ff62 	bl	8001168 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80012a4:	bd01      	pop	{r0, pc}
 80012a6:	bf00      	nop

080012a8 <z_arm_interrupt_init>:
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	2110      	movs	r1, #16
 80012ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80012b0:	3301      	adds	r3, #1
 80012b2:	2b55      	cmp	r3, #85	; 0x55
 80012b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80012b8:	d1f9      	bne.n	80012ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80012c0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80012c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80012c8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 80012cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80012ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80012d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80012d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80012d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80012da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80012de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80012e2:	f7ff fdaf 	bl	8000e44 <z_arm_prep_c>
 80012e6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80012e8:	20000500 	.word	0x20000500

080012ec <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <z_impl_k_thread_abort+0x24>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4283      	cmp	r3, r0
 80012f2:	d10b      	bne.n	800130c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80012f8:	b143      	cbz	r3, 800130c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <z_impl_k_thread_abort+0x28>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001302:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800130c:	f001 bcc0 	b.w	8002c90 <z_thread_abort>
 8001310:	20000494 	.word	0x20000494
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <z_arm_configure_static_mpu_regions+0xc>)
 800131a:	4a03      	ldr	r2, [pc, #12]	; (8001328 <z_arm_configure_static_mpu_regions+0x10>)
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <z_arm_configure_static_mpu_regions+0x14>)
 800131e:	2101      	movs	r1, #1
 8001320:	f000 b870 	b.w	8001404 <arm_core_mpu_configure_static_mpu_regions>
 8001324:	20010000 	.word	0x20010000
 8001328:	20000000 	.word	0x20000000
 800132c:	08004318 	.word	0x08004318

08001330 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001330:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8001334:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8001336:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001340:	4618      	mov	r0, r3
 8001342:	2101      	movs	r1, #1
 8001344:	f000 b868 	b.w	8001418 <arm_core_mpu_configure_dynamic_mpu_regions>
 8001348:	20000398 	.word	0x20000398
 800134c:	150b0000 	.word	0x150b0000

08001350 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8001352:	4e20      	ldr	r6, [pc, #128]	; (80013d4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8001354:	2500      	movs	r5, #0
 8001356:	428d      	cmp	r5, r1
 8001358:	da39      	bge.n	80013ce <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
 800135a:	6844      	ldr	r4, [r0, #4]
 800135c:	b374      	cbz	r4, 80013bc <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800135e:	b153      	cbz	r3, 8001376 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8001360:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001364:	ea14 0f0c 	tst.w	r4, ip
 8001368:	d12f      	bne.n	80013ca <mpu_configure_regions+0x7a>
		&&
 800136a:	2c1f      	cmp	r4, #31
 800136c:	d92d      	bls.n	80013ca <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
 800136e:	6807      	ldr	r7, [r0, #0]
		&&
 8001370:	ea1c 0f07 	tst.w	ip, r7
 8001374:	d129      	bne.n	80013ca <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8001376:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001378:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800137a:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800137e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 8001382:	d91e      	bls.n	80013c2 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
 8001384:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001388:	d81d      	bhi.n	80013c6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800138a:	3c01      	subs	r4, #1
 800138c:	fab4 f484 	clz	r4, r4
 8001390:	f1c4 041f 	rsb	r4, r4, #31
 8001394:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8001396:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800139a:	ea4c 0c04 	orr.w	ip, ip, r4
 800139e:	d814      	bhi.n	80013ca <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80013a0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 80013a4:	4314      	orrs	r4, r2
 80013a6:	f044 0410 	orr.w	r4, r4, #16
 80013aa:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80013ae:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80013b2:	f04c 0401 	orr.w	r4, ip, #1
 80013b6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 80013ba:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 80013bc:	3501      	adds	r5, #1
 80013be:	300c      	adds	r0, #12
 80013c0:	e7c9      	b.n	8001356 <mpu_configure_regions+0x6>
		return REGION_32B;
 80013c2:	2408      	movs	r4, #8
 80013c4:	e7e7      	b.n	8001396 <mpu_configure_regions+0x46>
		return REGION_4G;
 80013c6:	243e      	movs	r4, #62	; 0x3e
 80013c8:	e7e5      	b.n	8001396 <mpu_configure_regions+0x46>
			return -EINVAL;
 80013ca:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
 80013ce:	4610      	mov	r0, r2
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <arm_core_mpu_enable+0x14>)
 80013da:	2205      	movs	r2, #5
 80013dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80013e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013e4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80013f0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <arm_core_mpu_disable+0x10>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001404:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001406:	4c03      	ldr	r4, [pc, #12]	; (8001414 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001408:	2301      	movs	r3, #1
 800140a:	7822      	ldrb	r2, [r4, #0]
 800140c:	f7ff ffa0 	bl	8001350 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001410:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8001412:	bd10      	pop	{r4, pc}
 8001414:	200004c4 	.word	0x200004c4

08001418 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8001418:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 800141c:	2300      	movs	r3, #0
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	f7ff ff96 	bl	8001350 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001424:	f110 0f16 	cmn.w	r0, #22
 8001428:	d002      	beq.n	8001430 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800142a:	4a06      	ldr	r2, [pc, #24]	; (8001444 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800142c:	2807      	cmp	r0, #7
 800142e:	dd00      	ble.n	8001432 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8001430:	bd08      	pop	{r3, pc}
 8001432:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001436:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800143a:	3001      	adds	r0, #1
 800143c:	e7f6      	b.n	800142c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 800143e:	bf00      	nop
 8001440:	200004c4 	.word	0x200004c4
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001448:	4914      	ldr	r1, [pc, #80]	; (800149c <z_arm_mpu_init+0x54>)
 800144a:	6808      	ldr	r0, [r1, #0]
 800144c:	2808      	cmp	r0, #8
{
 800144e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001450:	d821      	bhi.n	8001496 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001452:	f7ff ffcd 	bl	80013f0 <arm_core_mpu_disable>
 8001456:	4c12      	ldr	r4, [pc, #72]	; (80014a0 <z_arm_mpu_init+0x58>)
 8001458:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800145a:	2200      	movs	r2, #0
 800145c:	4290      	cmp	r0, r2
 800145e:	f101 010c 	add.w	r1, r1, #12
 8001462:	d105      	bne.n	8001470 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <z_arm_mpu_init+0x5c>)
 8001466:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8001468:	f7ff ffb6 	bl	80013d8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800146c:	2000      	movs	r0, #0
}
 800146e:	bd10      	pop	{r4, pc}
 8001470:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001474:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001478:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800147c:	4313      	orrs	r3, r2
 800147e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001482:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001492:	3201      	adds	r2, #1
 8001494:	e7e2      	b.n	800145c <z_arm_mpu_init+0x14>
		return -1;
 8001496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800149a:	e7e8      	b.n	800146e <z_arm_mpu_init+0x26>
 800149c:	08004324 	.word	0x08004324
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	200004c4 	.word	0x200004c4

080014a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 80014a8:	4b01      	ldr	r3, [pc, #4]	; (80014b0 <__stdout_hook_install+0x8>)
 80014aa:	6018      	str	r0, [r3, #0]
}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200001fc 	.word	0x200001fc

080014b4 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 80014b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014b8:	4e0e      	ldr	r6, [pc, #56]	; (80014f4 <stm32_exti_isr+0x40>)
		if (stm32_exti_is_pending(line)) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 80014ba:	4f0f      	ldr	r7, [pc, #60]	; (80014f8 <stm32_exti_isr+0x44>)
{
 80014bc:	4605      	mov	r5, r0
	for (int i = 0; i <= range->len; i++) {
 80014be:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80014c0:	f04f 0801 	mov.w	r8, #1
		line = range->start + i;
 80014c4:	782b      	ldrb	r3, [r5, #0]
 80014c6:	1918      	adds	r0, r3, r4
	if (line < 32) {
 80014c8:	281f      	cmp	r0, #31
 80014ca:	dc0d      	bgt.n	80014e8 <stm32_exti_isr+0x34>
 80014cc:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80014ce:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line)) {
 80014d2:	ea33 0202 	bics.w	r2, r3, r2
 80014d6:	d107      	bne.n	80014e8 <stm32_exti_isr+0x34>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80014d8:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 80014da:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 80014de:	b11b      	cbz	r3, 80014e8 <stm32_exti_isr+0x34>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80014e0:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 80014e4:	6851      	ldr	r1, [r2, #4]
 80014e6:	4798      	blx	r3
	for (int i = 0; i <= range->len; i++) {
 80014e8:	786b      	ldrb	r3, [r5, #1]
 80014ea:	3401      	adds	r4, #1
 80014ec:	42a3      	cmp	r3, r4
 80014ee:	dae9      	bge.n	80014c4 <stm32_exti_isr+0x10>
		}
	}
}
 80014f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014f4:	40010400 	.word	0x40010400
 80014f8:	200003a4 	.word	0x200003a4

080014fc <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <stm32_fill_irq_table+0x14>)
 80014fe:	4418      	add	r0, r3
 8001500:	2300      	movs	r3, #0
 8001502:	3301      	adds	r3, #1
 8001504:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 8001506:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 800150a:	dcfa      	bgt.n	8001502 <stm32_fill_irq_table+0x6>
	}
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000248 	.word	0x20000248

08001514 <stm32_exti_enable>:
{
 8001514:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <stm32_exti_enable+0x1c>)
  SET_BIT(EXTI->IMR, ExtiLine);
 8001518:	4906      	ldr	r1, [pc, #24]	; (8001534 <stm32_exti_enable+0x20>)
{
 800151a:	4602      	mov	r2, r0
 800151c:	680c      	ldr	r4, [r1, #0]
	irqnum = exti_irq_table[line];
 800151e:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 8001520:	2301      	movs	r3, #1
 8001522:	4093      	lsls	r3, r2
 8001524:	4323      	orrs	r3, r4
 8001526:	600b      	str	r3, [r1, #0]
}
 8001528:	bc10      	pop	{r4}
	irq_enable(irqnum);
 800152a:	f7ff bc61 	b.w	8000df0 <arch_irq_enable>
 800152e:	bf00      	nop
 8001530:	20000248 	.word	0x20000248
 8001534:	40010400 	.word	0x40010400

08001538 <stm32_exti_disable>:
	if (line < 32) {
 8001538:	281f      	cmp	r0, #31
 800153a:	dc06      	bgt.n	800154a <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800153c:	4903      	ldr	r1, [pc, #12]	; (800154c <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800153e:	2201      	movs	r2, #1
 8001540:	680b      	ldr	r3, [r1, #0]
 8001542:	4082      	lsls	r2, r0
 8001544:	ea23 0302 	bic.w	r3, r3, r2
 8001548:	600b      	str	r3, [r1, #0]
}
 800154a:	4770      	bx	lr
 800154c:	40010400 	.word	0x40010400

08001550 <stm32_exti_trigger>:
	switch (trigger) {
 8001550:	2903      	cmp	r1, #3
 8001552:	d82a      	bhi.n	80015aa <stm32_exti_trigger+0x5a>
 8001554:	e8df f001 	tbb	[pc, r1]
 8001558:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800155e:	2201      	movs	r2, #1
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	4082      	lsls	r2, r0
 8001564:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001568:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800156a:	68d9      	ldr	r1, [r3, #12]
 800156c:	ea21 0202 	bic.w	r2, r1, r2
 8001570:	60da      	str	r2, [r3, #12]
}
 8001572:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001576:	2201      	movs	r2, #1
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	4082      	lsls	r2, r0
 800157c:	4311      	orrs	r1, r2
 800157e:	e7f3      	b.n	8001568 <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8001582:	2201      	movs	r2, #1
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	4082      	lsls	r2, r0
 8001588:	4311      	orrs	r1, r2
 800158a:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	ea21 0202 	bic.w	r2, r1, r2
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001596:	2301      	movs	r3, #1
 8001598:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <stm32_exti_trigger+0x5c>)
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4302      	orrs	r2, r0
 80015a2:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	4310      	orrs	r0, r2
 80015a8:	60d8      	str	r0, [r3, #12]
}
 80015aa:	4770      	bx	lr
 80015ac:	40010400 	.word	0x40010400

080015b0 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80015b0:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <stm32_exti_set_callback+0x20>)
{
 80015b4:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80015b6:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80015ba:	b928      	cbnz	r0, 80015c8 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80015bc:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80015c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80015c4:	605a      	str	r2, [r3, #4]

	return 0;
}
 80015c6:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80015c8:	f06f 000f 	mvn.w	r0, #15
 80015cc:	e7fb      	b.n	80015c6 <stm32_exti_set_callback+0x16>
 80015ce:	bf00      	nop
 80015d0:	200003a4 	.word	0x200003a4

080015d4 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <stm32_exti_unset_callback+0x10>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80015dc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80015e0:	605a      	str	r2, [r3, #4]
}
 80015e2:	4770      	bx	lr
 80015e4:	200003a4 	.word	0x200003a4

080015e8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
 80015e8:	2813      	cmp	r0, #19
 80015ea:	d80e      	bhi.n	800160a <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <adc_gain_invert+0x28>)
 80015ee:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
 80015f2:	b153      	cbz	r3, 800160a <adc_gain_invert+0x22>
 80015f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80015f8:	7852      	ldrb	r2, [r2, #1]
 80015fa:	b132      	cbz	r2, 800160a <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
 80015fc:	6808      	ldr	r0, [r1, #0]
 80015fe:	4343      	muls	r3, r0
			rv = 0;
 8001600:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
 8001602:	fb93 f3f2 	sdiv	r3, r3, r2
 8001606:	600b      	str	r3, [r1, #0]
			rv = 0;
 8001608:	4770      	bx	lr
	int rv = -EINVAL;
 800160a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
 800160e:	4770      	bx	lr
 8001610:	0800474b 	.word	0x0800474b

08001614 <adc_stm32_channel_setup>:
#endif
}

static int adc_stm32_channel_setup(const struct device *dev,
				   const struct adc_channel_cfg *channel_cfg)
{
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
	 defined(CONFIG_SOC_SERIES_STM32L0X)
	struct adc_stm32_data *data = dev->data;
#endif
	int acq_time_index;

	if (channel_cfg->channel_id >= STM32_CHANNEL_COUNT) {
 8001616:	790e      	ldrb	r6, [r1, #4]
 8001618:	f006 041f 	and.w	r4, r6, #31
 800161c:	2c13      	cmp	r4, #19
 800161e:	d85b      	bhi.n	80016d8 <adc_stm32_channel_setup+0xc4>
		LOG_ERR("Channel %d is not valid", channel_cfg->channel_id);
		return -EINVAL;
	}

	acq_time_index = adc_stm32_check_acq_time(
				channel_cfg->acquisition_time);
 8001620:	884b      	ldrh	r3, [r1, #2]
	if (acq_time == ADC_ACQ_TIME_MAX) {
 8001622:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001626:	4293      	cmp	r3, r2
 8001628:	d054      	beq.n	80016d4 <adc_stm32_channel_setup+0xc0>
 800162a:	4f2d      	ldr	r7, [pc, #180]	; (80016e0 <adc_stm32_channel_setup+0xcc>)
	for (int i = 0; i < 8; i++) {
 800162c:	2200      	movs	r2, #0
		if (acq_time == ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS,
 800162e:	f837 5b02 	ldrh.w	r5, [r7], #2
 8001632:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8001636:	42ab      	cmp	r3, r5
 8001638:	d005      	beq.n	8001646 <adc_stm32_channel_setup+0x32>
	for (int i = 0; i < 8; i++) {
 800163a:	3201      	adds	r2, #1
 800163c:	2a08      	cmp	r2, #8
 800163e:	d1f6      	bne.n	800162e <adc_stm32_channel_setup+0x1a>
	if (acq_time == ADC_ACQ_TIME_DEFAULT) {
 8001640:	2b00      	cmp	r3, #0
 8001642:	d149      	bne.n	80016d8 <adc_stm32_channel_setup+0xc4>
		return 0;
 8001644:	461a      	mov	r2, r3
			return -EINVAL;
		}
	}
#endif

	if (channel_cfg->differential) {
 8001646:	06b3      	lsls	r3, r6, #26
 8001648:	d446      	bmi.n	80016d8 <adc_stm32_channel_setup+0xc4>
		LOG_ERR("Differential channels are not supported");
		return -EINVAL;
	}

	if (channel_cfg->gain != ADC_GAIN_1) {
 800164a:	780b      	ldrb	r3, [r1, #0]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d143      	bne.n	80016d8 <adc_stm32_channel_setup+0xc4>
		LOG_ERR("Invalid channel gain");
		return -EINVAL;
	}

	if (channel_cfg->reference != ADC_REF_INTERNAL) {
 8001650:	784b      	ldrb	r3, [r1, #1]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d140      	bne.n	80016d8 <adc_stm32_channel_setup+0xc4>
	ADC_TypeDef *adc = config->base;
 8001656:	6843      	ldr	r3, [r0, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
		__LL_ADC_DECIMAL_NB_TO_CHANNEL(id),
 800165a:	2302      	movs	r3, #2
 800165c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
	LL_ADC_SetChannelSamplingTime(adc,
 8001660:	2c09      	cmp	r4, #9
		__LL_ADC_DECIMAL_NB_TO_CHANNEL(id),
 8001662:	fa03 f304 	lsl.w	r3, r3, r4
 8001666:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
 800166a:	bf86      	itte	hi
 800166c:	391e      	subhi	r1, #30
 800166e:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
	LL_ADC_SetChannelSamplingTime(adc,
 8001672:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
		table_samp_time[acq_time_index]);
 8001676:	491b      	ldr	r1, [pc, #108]	; (80016e4 <adc_stm32_channel_setup+0xd0>)
	LL_ADC_SetChannelSamplingTime(adc,
 8001678:	bf88      	it	hi
 800167a:	f043 7300 	orrhi.w	r3, r3, #33554432	; 0x2000000
		table_samp_time[acq_time_index]);
 800167e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001682:	f003 7400 	and.w	r4, r3, #33554432	; 0x2000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800168a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800168e:	fab2 f282 	clz	r2, r2
 8001692:	3014      	adds	r0, #20
 8001694:	40d4      	lsrs	r4, r2

  MODIFY_REG(*preg,
 8001696:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800169e:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80016a2:	fab2 f282 	clz	r2, r2
 80016a6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80016aa:	fa23 f202 	lsr.w	r2, r3, r2
 80016ae:	2607      	movs	r6, #7
 80016b0:	fa06 f202 	lsl.w	r2, r6, r2
 80016b4:	ea25 0502 	bic.w	r5, r5, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80016bc:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	40d3      	lsrs	r3, r2
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	432b      	orrs	r3, r5
 80016cc:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
	adc_stm32_setup_speed(dev, channel_cfg->channel_id,
				  acq_time_index);

	LOG_DBG("Channel setup succeeded!");

	return 0;
 80016d0:	2000      	movs	r0, #0
}
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ARRAY_SIZE(acq_time_tbl) - 1;
 80016d4:	2207      	movs	r2, #7
 80016d6:	e7b6      	b.n	8001646 <adc_stm32_channel_setup+0x32>
		return -EINVAL;
 80016d8:	f06f 0015 	mvn.w	r0, #21
 80016dc:	e7f9      	b.n	80016d2 <adc_stm32_channel_setup+0xbe>
 80016de:	bf00      	nop
 80016e0:	08004624 	.word	0x08004624
 80016e4:	080043f0 	.word	0x080043f0

080016e8 <adc_stm32_unset_common_path.isra.0>:
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 80016e8:	6803      	ldr	r3, [r0, #0]
	const uint32_t currentPath = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 80016ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
	PathInternal = ~PathInternal & currentPath;
 80016ee:	ea6f 0101 	mvn.w	r1, r1
	const uint32_t currentPath = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 80016f2:	d00e      	beq.n	8001712 <adc_stm32_unset_common_path.isra.0+0x2a>
 80016f4:	4a08      	ldr	r2, [pc, #32]	; (8001718 <adc_stm32_unset_common_path.isra.0+0x30>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00b      	beq.n	8001712 <adc_stm32_unset_common_path.isra.0+0x2a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016fa:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80016fe:	6893      	ldr	r3, [r2, #8]
	PathInternal = ~PathInternal & currentPath;
 8001700:	400b      	ands	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001702:	6891      	ldr	r1, [r2, #8]
 8001704:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8001708:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800170c:	430b      	orrs	r3, r1
 800170e:	6093      	str	r3, [r2, #8]
}
 8001710:	4770      	bx	lr
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001712:	4a02      	ldr	r2, [pc, #8]	; (800171c <adc_stm32_unset_common_path.isra.0+0x34>)
 8001714:	e7f3      	b.n	80016fe <adc_stm32_unset_common_path.isra.0+0x16>
 8001716:	bf00      	nop
 8001718:	50000100 	.word	0x50000100
 800171c:	50000300 	.word	0x50000300

08001720 <adc_stm32_set_common_path.isra.0>:
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8001720:	6803      	ldr	r3, [r0, #0]
	PathInternal |= LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(adc));
 8001722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001726:	d00d      	beq.n	8001744 <adc_stm32_set_common_path.isra.0+0x24>
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <adc_stm32_set_common_path.isra.0+0x28>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00a      	beq.n	8001744 <adc_stm32_set_common_path.isra.0+0x24>
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <adc_stm32_set_common_path.isra.0+0x2c>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	f002 72e0 	and.w	r2, r2, #29360128	; 0x1c00000
 8001736:	4311      	orrs	r1, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
}
 8001742:	4770      	bx	lr
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <adc_stm32_set_common_path.isra.0+0x30>)
 8001746:	e7f3      	b.n	8001730 <adc_stm32_set_common_path.isra.0+0x10>
 8001748:	50000100 	.word	0x50000100
 800174c:	50000700 	.word	0x50000700
 8001750:	50000300 	.word	0x50000300

08001754 <adc_stm32_read>:
{
 8001754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 8001758:	6903      	ldr	r3, [r0, #16]
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	3340      	adds	r3, #64	; 0x40
 800175e:	4606      	mov	r6, r0
 8001760:	460d      	mov	r5, r1
 8001762:	9305      	str	r3, [sp, #20]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8001764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001768:	9805      	ldr	r0, [sp, #20]
 800176a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176e:	f000 ffb5 	bl	80026dc <z_impl_k_sem_take>
	switch (sequence->resolution) {
 8001772:	7c2b      	ldrb	r3, [r5, #16]
 8001774:	3b06      	subs	r3, #6
 8001776:	2b06      	cmp	r3, #6
 8001778:	d821      	bhi.n	80017be <adc_stm32_read+0x6a>
 800177a:	e8df f003 	tbb	[pc, r3]
 800177e:	2004      	.short	0x2004
 8001780:	2029202f 	.word	0x2029202f
 8001784:	2c          	.byte	0x2c
 8001785:	00          	.byte	0x00
		resolution = table_resolution[0];
 8001786:	f04f 0a18 	mov.w	sl, #24
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800178a:	6873      	ldr	r3, [r6, #4]
	struct adc_stm32_data *data = dev->data;
 800178c:	6934      	ldr	r4, [r6, #16]
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800178e:	681f      	ldr	r7, [r3, #0]
	data->buffer = sequence->buffer;
 8001790:	68ab      	ldr	r3, [r5, #8]
 8001792:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	data->channels = sequence->channels;
 8001796:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800179a:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
	data->channel_count = POPCOUNT(data->channels);
 800179e:	4640      	mov	r0, r8
 80017a0:	f7fe fd12 	bl	80001c8 <__popcountsi2>
	if (data->channel_count == 0) {
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <adc_stm32_read+0x260>)
	data->channel_count = POPCOUNT(data->channels);
 80017a6:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (data->channel_count == 0) {
 80017aa:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
	data->samples_count = 0;
 80017ae:	f04f 0900 	mov.w	r9, #0
	if (data->channel_count == 0) {
 80017b2:	429a      	cmp	r2, r3
	data->samples_count = 0;
 80017b4:	f884 90a5 	strb.w	r9, [r4, #165]	; 0xa5
	if (data->channel_count == 0) {
 80017b8:	d801      	bhi.n	80017be <adc_stm32_read+0x6a>
	if (data->channel_count > ARRAY_SIZE(table_seq_len)) {
 80017ba:	2810      	cmp	r0, #16
 80017bc:	dd11      	ble.n	80017e2 <adc_stm32_read+0x8e>
		return -EINVAL;
 80017be:	f06f 0415 	mvn.w	r4, #21
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80017c2:	9805      	ldr	r0, [sp, #20]
 80017c4:	f000 ff6a 	bl	800269c <z_impl_k_sem_give>
}
 80017c8:	4620      	mov	r0, r4
 80017ca:	b009      	add	sp, #36	; 0x24
 80017cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		resolution = table_resolution[2];
 80017d0:	f04f 0a08 	mov.w	sl, #8
		break;
 80017d4:	e7d9      	b.n	800178a <adc_stm32_read+0x36>
		resolution = table_resolution[3];
 80017d6:	f04f 0a00 	mov.w	sl, #0
		break;
 80017da:	e7d6      	b.n	800178a <adc_stm32_read+0x36>
	switch (sequence->resolution) {
 80017dc:	f04f 0a10 	mov.w	sl, #16
 80017e0:	e7d3      	b.n	800178a <adc_stm32_read+0x36>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	9306      	str	r3, [sp, #24]
  return __builtin_clz(value);
 80017ec:	fab3 f383 	clz	r3, r3
	if (data->channel_count > ARRAY_SIZE(table_seq_len)) {
 80017f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80017f4:	9307      	str	r3, [sp, #28]
		channel_id = find_lsb_set(channels) - 1;
 80017f6:	fa98 f9a8 	rbit	r9, r8
 80017fa:	fab9 f989 	clz	r9, r9
		uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(channel_id);
 80017fe:	2202      	movs	r2, #2
 8001800:	f1b9 0f09 	cmp.w	r9, #9
 8001804:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	const struct adc_stm32_cfg *config = dev->config;
 8001808:	f8d6 b004 	ldr.w	fp, [r6, #4]
		uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(channel_id);
 800180c:	fa02 f209 	lsl.w	r2, r2, r9
 8001810:	ea42 6289 	orr.w	r2, r2, r9, lsl #26
 8001814:	bf8a      	itet	hi
 8001816:	391e      	subhi	r1, #30
 8001818:	ea42 5301 	orrls.w	r3, r2, r1, lsl #20
 800181c:	ea42 5201 	orrhi.w	r2, r2, r1, lsl #20
	if (config->temp_channel == channel_id) {
 8001820:	f99b 1014 	ldrsb.w	r1, [fp, #20]
		uint32_t channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL(channel_id);
 8001824:	bf88      	it	hi
 8001826:	f042 7300 	orrhi.w	r3, r2, #33554432	; 0x2000000
 800182a:	9304      	str	r3, [sp, #16]
	if (config->temp_channel == channel_id) {
 800182c:	4549      	cmp	r1, r9
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800182e:	f8db 3000 	ldr.w	r3, [fp]
 8001832:	9302      	str	r3, [sp, #8]
	if (config->temp_channel == channel_id) {
 8001834:	d10a      	bne.n	800184c <adc_stm32_read+0xf8>
		adc_stm32_disable(adc);
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fdcd 	bl	80033d6 <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 800183c:	6870      	ldr	r0, [r6, #4]
 800183e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001842:	f7ff ff6d 	bl	8001720 <adc_stm32_set_common_path.isra.0>
	return z_impl_k_usleep(us);
 8001846:	2078      	movs	r0, #120	; 0x78
 8001848:	f002 fa4d 	bl	8003ce6 <z_impl_k_usleep>
	if (config->vref_channel == channel_id) {
 800184c:	f99b 1015 	ldrsb.w	r1, [fp, #21]
 8001850:	4549      	cmp	r1, r9
 8001852:	d10a      	bne.n	800186a <adc_stm32_read+0x116>
		adc_stm32_disable(adc);
 8001854:	9802      	ldr	r0, [sp, #8]
 8001856:	f001 fdbe 	bl	80033d6 <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_VREFINT);
 800185a:	6870      	ldr	r0, [r6, #4]
 800185c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001860:	f7ff ff5e 	bl	8001720 <adc_stm32_set_common_path.isra.0>
 8001864:	200c      	movs	r0, #12
 8001866:	f002 fa3e 	bl	8003ce6 <z_impl_k_usleep>
	if (config->vbat_channel == channel_id) {
 800186a:	f99b 2016 	ldrsb.w	r2, [fp, #22]
 800186e:	454a      	cmp	r2, r9
 8001870:	d107      	bne.n	8001882 <adc_stm32_read+0x12e>
		adc_stm32_disable(adc);
 8001872:	9802      	ldr	r0, [sp, #8]
 8001874:	f001 fdaf 	bl	80033d6 <adc_stm32_disable>
		adc_stm32_set_common_path(dev, LL_ADC_PATH_INTERNAL_VBAT);
 8001878:	6870      	ldr	r0, [r6, #4]
 800187a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800187e:	f7ff ff4f 	bl	8001720 <adc_stm32_set_common_path.isra.0>
		LL_ADC_REG_SetSequencerRanks(adc, table_rank[channel_index], channel);
 8001882:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <adc_stm32_read+0x264>)
 8001884:	f89d e00c 	ldrb.w	lr, [sp, #12]
 8001888:	9b06      	ldr	r3, [sp, #24]
 800188a:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
 800188e:	2b00      	cmp	r3, #0
 8001890:	9b07      	ldr	r3, [sp, #28]
 8001892:	bf0c      	ite	eq
 8001894:	2220      	moveq	r2, #32
 8001896:	461a      	movne	r2, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001898:	f401 7c40 	and.w	ip, r1, #768	; 0x300
 800189c:	fa2c fc02 	lsr.w	ip, ip, r2
 80018a0:	f107 0030 	add.w	r0, r7, #48	; 0x30
  MODIFY_REG(*preg,
 80018a4:	f001 011f 	and.w	r1, r1, #31
 80018a8:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
 80018ac:	221f      	movs	r2, #31
 80018ae:	408a      	lsls	r2, r1
 80018b0:	ea23 0202 	bic.w	r2, r3, r2
 80018b4:	9b04      	ldr	r3, [sp, #16]
 80018b6:	ea4f 6b93 	mov.w	fp, r3, lsr #26
 80018ba:	fa0b fb01 	lsl.w	fp, fp, r1
 80018be:	ea42 020b 	orr.w	r2, r2, fp
 80018c2:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80018c6:	493d      	ldr	r1, [pc, #244]	; (80019bc <adc_stm32_read+0x268>)
 80018c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ca:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 80018ce:	f022 020f 	bic.w	r2, r2, #15
 80018d2:	430a      	orrs	r2, r1
 80018d4:	633a      	str	r2, [r7, #48]	; 0x30
		      channels &= ~BIT(channel_id), channel_index++) {
 80018d6:	2201      	movs	r2, #1
 80018d8:	fa02 f309 	lsl.w	r3, r2, r9
	for (uint32_t channels = data->channels; channels;
 80018dc:	9a03      	ldr	r2, [sp, #12]
 80018de:	ea38 0803 	bics.w	r8, r8, r3
 80018e2:	f102 0201 	add.w	r2, r2, #1
 80018e6:	9203      	str	r2, [sp, #12]
 80018e8:	d185      	bne.n	80017f6 <adc_stm32_read+0xa2>
	needed_buffer_size = active_channels * sizeof(uint16_t);
 80018ea:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (sequence->options) {
 80018ee:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(uint16_t);
 80018f0:	005b      	lsls	r3, r3, #1
	if (sequence->options) {
 80018f2:	b112      	cbz	r2, 80018fa <adc_stm32_read+0x1a6>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
 80018f4:	8992      	ldrh	r2, [r2, #12]
 80018f6:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
 80018fa:	68ea      	ldr	r2, [r5, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d353      	bcc.n	80019a8 <adc_stm32_read+0x254>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f023 0318 	bic.w	r3, r3, #24
 8001906:	ea43 030a 	orr.w	r3, r3, sl
 800190a:	60fb      	str	r3, [r7, #12]
	if (sequence->oversampling) {
 800190c:	7c6b      	ldrb	r3, [r5, #17]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d14d      	bne.n	80019ae <adc_stm32_read+0x25a>
	if (sequence->calibrate) {
 8001912:	7cab      	ldrb	r3, [r5, #18]
 8001914:	b12b      	cbz	r3, 8001922 <adc_stm32_read+0x1ce>
		adc_stm32_disable(adc);
 8001916:	4638      	mov	r0, r7
 8001918:	f001 fd5d 	bl	80033d6 <adc_stm32_disable>
		adc_stm32_calib(dev);
 800191c:	6870      	ldr	r0, [r6, #4]
 800191e:	f001 fd85 	bl	800342c <adc_stm32_calib.isra.0>
	adc_stm32_enable(adc);
 8001922:	4638      	mov	r0, r7
 8001924:	f001 fd29 	bl	800337a <adc_stm32_enable>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	607b      	str	r3, [r7, #4]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
 8001930:	462f      	mov	r7, r5
 8001932:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001934:	f104 0664 	add.w	r6, r4, #100	; 0x64
 8001938:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
 800193e:	2600      	movs	r6, #0
 8001940:	6626      	str	r6, [r4, #96]	; 0x60

	if (sequence->options) {
 8001942:	682b      	ldr	r3, [r5, #0]
 8001944:	b363      	cbz	r3, 80019a0 <adc_stm32_read+0x24c>
		ctx->options = *sequence->options;
 8001946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001948:	f104 0578 	add.w	r5, r4, #120	; 0x78
 800194c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
 8001950:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
 8001952:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
 8001956:	b318      	cbz	r0, 80019a0 <adc_stm32_read+0x24c>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001958:	f3bf 8f5b 	dmb	ish
 800195c:	e854 3f00 	ldrex	r3, [r4]
 8001960:	e844 6200 	strex	r2, r6, [r4]
 8001964:	2a00      	cmp	r2, #0
 8001966:	d1f9      	bne.n	800195c <adc_stm32_read+0x208>
 8001968:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
 800196c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
 800196e:	3063      	adds	r0, #99	; 0x63
 8001970:	f146 0100 	adc.w	r1, r6, #0
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8001974:	2264      	movs	r2, #100	; 0x64
 8001976:	2300      	movs	r3, #0
 8001978:	f7fe fc0c 	bl	8000194 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
 800197c:	2200      	movs	r2, #0
 800197e:	e9cd 0100 	strd	r0, r1, [sp]
 8001982:	2300      	movs	r3, #0
 8001984:	f104 0008 	add.w	r0, r4, #8
 8001988:	f001 fbc6 	bl	8003118 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
 800198c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001990:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001998:	f000 fea0 	bl	80026dc <z_impl_k_sem_take>
	return ctx->status;
 800199c:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return result;
 800199e:	e710      	b.n	80017c2 <adc_stm32_read+0x6e>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
 80019a0:	4620      	mov	r0, r4
 80019a2:	f001 fd50 	bl	8003446 <adc_context_start_sampling>
 80019a6:	e7f1      	b.n	800198c <adc_stm32_read+0x238>
		return -ENOMEM;
 80019a8:	f06f 040b 	mvn.w	r4, #11
 80019ac:	e709      	b.n	80017c2 <adc_stm32_read+0x6e>
		return -ENOTSUP;
 80019ae:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80019b2:	e706      	b.n	80017c2 <adc_stm32_read+0x6e>
 80019b4:	000ffffe 	.word	0x000ffffe
 80019b8:	08004450 	.word	0x08004450
 80019bc:	08004410 	.word	0x08004410

080019c0 <adc_stm32_init>:

static int adc_stm32_init(const struct device *dev)
{
 80019c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct adc_stm32_data *data = dev->data;
	const struct adc_stm32_cfg *config = dev->config;
 80019c4:	6846      	ldr	r6, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 80019c6:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 80019ca:	6834      	ldr	r4, [r6, #0]
{
 80019cc:	4605      	mov	r5, r0
 80019ce:	4f33      	ldr	r7, [pc, #204]	; (8001a9c <adc_stm32_init+0xdc>)
 80019d0:	4638      	mov	r0, r7
 80019d2:	f002 f87b 	bl	8003acc <z_device_is_ready>
	int err;

	LOG_DBG("Initializing....");

	if (!device_is_ready(clk)) {
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d059      	beq.n	8001a8e <adc_stm32_init+0xce>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80019da:	68bb      	ldr	r3, [r7, #8]
		LOG_ERR("clock control device not ready");
		return -ENODEV;
	}

	data->dev = dev;
 80019dc:	f8c8 5090 	str.w	r5, [r8, #144]	; 0x90
	 */
	data->acq_time_index = -1;
#endif

	if (clock_control_on(clk,
		(clock_control_subsys_t *) &config->pclken) != 0) {
 80019e0:	f106 0908 	add.w	r9, r6, #8
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4649      	mov	r1, r9
 80019e8:	4638      	mov	r0, r7
 80019ea:	4798      	blx	r3
	if (clock_control_on(clk,
 80019ec:	4682      	mov	sl, r0
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d150      	bne.n	8001a94 <adc_stm32_init+0xd4>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80019f2:	4601      	mov	r1, r0
 80019f4:	aa01      	add	r2, sp, #4
 80019f6:	6930      	ldr	r0, [r6, #16]
 80019f8:	f001 ff4e 	bl	8003898 <pinctrl_lookup_state>
	if (ret < 0) {
 80019fc:	2800      	cmp	r0, #0
 80019fe:	db41      	blt.n	8001a84 <adc_stm32_init+0xc4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8001a00:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001a02:	4652      	mov	r2, sl
 8001a04:	7919      	ldrb	r1, [r3, #4]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	f000 f9da 	bl	8001dc0 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	db39      	blt.n	8001a84 <adc_stm32_init+0xc4>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a10:	68a3      	ldr	r3, [r4, #8]
 8001a12:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001a16:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(ADCx->CR,
 8001a18:	68a3      	ldr	r3, [r4, #8]
 8001a1a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	60a3      	str	r3, [r4, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f001 faeb 	bl	8003004 <z_impl_k_busy_wait>
	 * Set the synchronous clock mode to HCLK/1 (DIV1) or HCLK/2 (DIV2)
	 * Both are valid common clock setting values.
	 * The HCLK/1(DIV1) is possible only if
	 * the ahb-prescaler = <1> in the RCC_CFGR.
	 */
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(adc),
 8001a2e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001a32:	d02a      	beq.n	8001a8a <adc_stm32_init+0xca>
 8001a34:	491a      	ldr	r1, [pc, #104]	; (8001aa0 <adc_stm32_init+0xe0>)
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <adc_stm32_init+0xe4>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <adc_stm32_init+0xe8>)
 8001a3a:	428c      	cmp	r4, r1
 8001a3c:	bf08      	it	eq
 8001a3e:	4613      	moveq	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE, CommonClock);
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001a46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a4a:	609a      	str	r2, [r3, #8]
	!defined(CONFIG_SOC_SERIES_STM32L1X)
	/*
	 * Calibration of F1 and F3 (ADC1_V2_5) series has to be started
	 * after ADC Module is enabled.
	 */
	adc_stm32_disable(adc);
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f001 fcc2 	bl	80033d6 <adc_stm32_disable>
	adc_stm32_calib(dev);
 8001a52:	6868      	ldr	r0, [r5, #4]
 8001a54:	f001 fcea 	bl	800342c <adc_stm32_calib.isra.0>
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	b11b      	cbz	r3, 8001a66 <adc_stm32_init+0xa6>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <adc_stm32_init+0xdc>)
 8001a60:	aa01      	add	r2, sp, #4
 8001a62:	4649      	mov	r1, r9
 8001a64:	4798      	blx	r3

	for (int i = wait_cycles; i >= 0; i--) {
	}
#endif

	err = adc_stm32_enable(adc);
 8001a66:	4620      	mov	r0, r4
 8001a68:	f001 fc87 	bl	800337a <adc_stm32_enable>
	if (err < 0) {
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	db09      	blt.n	8001a84 <adc_stm32_init+0xc4>
		return err;
	}

	config->irq_cfg_func();
 8001a70:	6873      	ldr	r3, [r6, #4]
 8001a72:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 8001a74:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8001a78:	b91b      	cbnz	r3, 8001a82 <adc_stm32_init+0xc2>
	z_impl_k_sem_give(sem);
 8001a7a:	f108 0040 	add.w	r0, r8, #64	; 0x40
 8001a7e:	f000 fe0d 	bl	800269c <z_impl_k_sem_give>
		);
	}
#endif
	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
 8001a82:	2000      	movs	r0, #0
}
 8001a84:	b002      	add	sp, #8
 8001a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(adc),
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <adc_stm32_init+0xe8>)
 8001a8c:	e7d8      	b.n	8001a40 <adc_stm32_init+0x80>
		return -ENODEV;
 8001a8e:	f06f 0012 	mvn.w	r0, #18
 8001a92:	e7f7      	b.n	8001a84 <adc_stm32_init+0xc4>
		return -EIO;
 8001a94:	f06f 0004 	mvn.w	r0, #4
 8001a98:	e7f4      	b.n	8001a84 <adc_stm32_init+0xc4>
 8001a9a:	bf00      	nop
 8001a9c:	08003e14 	.word	0x08003e14
 8001aa0:	50000100 	.word	0x50000100
 8001aa4:	50000700 	.word	0x50000700
 8001aa8:	50000300 	.word	0x50000300

08001aac <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8001aac:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <stm32_clock_control_get_subsys_rate+0x5c>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 8001ab2:	680b      	ldr	r3, [r1, #0]
 8001ab4:	2b05      	cmp	r3, #5
{
 8001ab6:	4614      	mov	r4, r2
	if (pclken->bus == STM32_SRC_PCLK) {
 8001ab8:	d011      	beq.n	8001ade <stm32_clock_control_get_subsys_rate+0x32>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001aba:	2b07      	cmp	r3, #7
 8001abc:	d809      	bhi.n	8001ad2 <stm32_clock_control_get_subsys_rate+0x26>
 8001abe:	b173      	cbz	r3, 8001ade <stm32_clock_control_get_subsys_rate+0x32>
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d80b      	bhi.n	8001ade <stm32_clock_control_get_subsys_rate+0x32>
 8001ac6:	e8df f003 	tbb	[pc, r3]
 8001aca:	0d0d      	.short	0x0d0d
 8001acc:	130a0e0a 	.word	0x130a0e0a
 8001ad0:	19          	.byte	0x19
 8001ad1:	00          	.byte	0x00
 8001ad2:	2b18      	cmp	r3, #24
 8001ad4:	d007      	beq.n	8001ae6 <stm32_clock_control_get_subsys_rate+0x3a>
 8001ad6:	2b1c      	cmp	r3, #28
 8001ad8:	d008      	beq.n	8001aec <stm32_clock_control_get_subsys_rate+0x40>
 8001ada:	2b14      	cmp	r3, #20
 8001adc:	d003      	beq.n	8001ae6 <stm32_clock_control_get_subsys_rate+0x3a>
 8001ade:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001ae2:	e002      	b.n	8001aea <stm32_clock_control_get_subsys_rate+0x3e>
 8001ae4:	2000      	movs	r0, #0
	case STM32_CLOCK_BUS_AHB2:
#endif
#if defined(STM32_CLOCK_BUS_IOP)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8001ae6:	6020      	str	r0, [r4, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001ae8:	2000      	movs	r0, #0
}
 8001aea:	bd10      	pop	{r4, pc}
	return clock / prescaler;
 8001aec:	0840      	lsrs	r0, r0, #1
		break;
 8001aee:	e7fa      	b.n	8001ae6 <stm32_clock_control_get_subsys_rate+0x3a>
		if (get_pllout_frequency() == 0) {
 8001af0:	f000 f894 	bl	8001c1c <get_pllout_frequency>
 8001af4:	b128      	cbz	r0, 8001b02 <stm32_clock_control_get_subsys_rate+0x56>
		*rate = get_pllout_frequency();
 8001af6:	f000 f891 	bl	8001c1c <get_pllout_frequency>
		break;
 8001afa:	e7f4      	b.n	8001ae6 <stm32_clock_control_get_subsys_rate+0x3a>
		break;
 8001afc:	f649 4040 	movw	r0, #40000	; 0x9c40
 8001b00:	e7f1      	b.n	8001ae6 <stm32_clock_control_get_subsys_rate+0x3a>
			return -EIO;
 8001b02:	f06f 0004 	mvn.w	r0, #4
 8001b06:	e7f0      	b.n	8001aea <stm32_clock_control_get_subsys_rate+0x3e>
 8001b08:	2000023c 	.word	0x2000023c

08001b0c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001b0c:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b0e:	4c37      	ldr	r4, [pc, #220]	; (8001bec <stm32_clock_control_init+0xe0>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001b10:	4e37      	ldr	r6, [pc, #220]	; (8001bf0 <stm32_clock_control_init+0xe4>)
	config_enable_default_clocks();
 8001b12:	f001 fd8f 	bl	8003634 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8001b16:	f000 fc05 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8001b1a:	6863      	ldr	r3, [r4, #4]
 8001b1c:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <stm32_clock_control_init+0xe8>)
 8001b1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001b28:	42b5      	cmp	r5, r6
 8001b2a:	d802      	bhi.n	8001b32 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001b2c:	4832      	ldr	r0, [pc, #200]	; (8001bf8 <stm32_clock_control_init+0xec>)
 8001b2e:	f000 fc25 	bl	800237c <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001b42:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8001b44:	039b      	lsls	r3, r3, #14
 8001b46:	d5fc      	bpl.n	8001b42 <stm32_clock_control_init+0x36>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6263      	str	r3, [r4, #36]	; 0x24
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8001b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (LL_RCC_LSI_IsReady() != 1) {
 8001b52:	0798      	lsls	r0, r3, #30
 8001b54:	d5fc      	bpl.n	8001b50 <stm32_clock_control_init+0x44>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d115      	bne.n	8001b8c <stm32_clock_control_init+0x80>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b66:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b68:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8001b6a:	0799      	lsls	r1, r3, #30
 8001b6c:	d406      	bmi.n	8001b7c <stm32_clock_control_init+0x70>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b76:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8001b78:	079a      	lsls	r2, r3, #30
 8001b7a:	d5fc      	bpl.n	8001b76 <stm32_clock_control_init+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b7c:	6863      	ldr	r3, [r4, #4]
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b84:	6863      	ldr	r3, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001b86:	f013 0f0c 	tst.w	r3, #12
 8001b8a:	d1fb      	bne.n	8001b84 <stm32_clock_control_init+0x78>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b92:	6023      	str	r3, [r4, #0]
	config_pll_sysclock();
 8001b94:	f000 f834 	bl	8001c00 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001ba0:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8001ba2:	019b      	lsls	r3, r3, #6
 8001ba4:	d5fc      	bpl.n	8001ba0 <stm32_clock_control_init+0x94>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ba6:	6863      	ldr	r3, [r4, #4]
 8001ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bac:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	f023 0303 	bic.w	r3, r3, #3
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d1fa      	bne.n	8001bba <stm32_clock_control_init+0xae>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8001bc4:	42b5      	cmp	r5, r6
 8001bc6:	d902      	bls.n	8001bce <stm32_clock_control_init+0xc2>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <stm32_clock_control_init+0xec>)
 8001bca:	f000 fbd7 	bl	800237c <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <stm32_clock_control_init+0xf0>)
 8001bd0:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <stm32_clock_control_init+0xec>)
 8001bd2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bde:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001be6:	6063      	str	r3, [r4, #4]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8001be8:	2000      	movs	r0, #0
 8001bea:	bd70      	pop	{r4, r5, r6, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	044aa1ff 	.word	0x044aa1ff
 8001bf4:	08004829 	.word	0x08004829
 8001bf8:	044aa200 	.word	0x044aa200
 8001bfc:	2000023c 	.word	0x2000023c

08001c00 <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <config_pll_sysclock+0x18>)
 8001c02:	6853      	ldr	r3, [r2, #4]
 8001c04:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 8001c08:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001c0c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8001c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c10:	f023 030f 	bic.w	r3, r3, #15
 8001c14:	62d3      	str	r3, [r2, #44]	; 0x2c
		__ASSERT(0, "Invalid source");
	}

	LL_RCC_PLL_ConfigDomain_SYS(pll_source, pll_mul);
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000

08001c1c <get_pllout_frequency>:
		pll_input_freq = STM32_HSI_FREQ;
	} else {
		return 0;
	}

	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul, pll_div);
 8001c1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c24:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	40d3      	lsrs	r3, r2
		return 0;
	}

	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul);
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <get_pllout_frequency+0x1c>)
	return __LL_RCC_CALC_PLLCLK_FREQ(pll_input_freq, pll_mul, pll_div);
 8001c30:	3302      	adds	r3, #2
}
 8001c32:	4358      	muls	r0, r3
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8001c3c:	b508      	push	{r3, lr}
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <uart_console_init+0x20>)
 8001c40:	f001 ff44 	bl	8003acc <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8001c44:	b138      	cbz	r0, 8001c56 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <uart_console_init+0x24>)
 8001c48:	f7ff fc2e 	bl	80014a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <uart_console_init+0x24>)
 8001c4e:	f7fe fcd9 	bl	8000604 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001c52:	2000      	movs	r0, #0
}
 8001c54:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8001c56:	f06f 0012 	mvn.w	r0, #18
 8001c5a:	e7fb      	b.n	8001c54 <uart_console_init+0x18>
 8001c5c:	08003eec 	.word	0x08003eec
 8001c60:	08001c65 	.word	0x08001c65

08001c64 <console_out>:
	if ('\n' == c) {
 8001c64:	280a      	cmp	r0, #10
{
 8001c66:	b538      	push	{r3, r4, r5, lr}
 8001c68:	4d07      	ldr	r5, [pc, #28]	; (8001c88 <console_out+0x24>)
 8001c6a:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001c6c:	d104      	bne.n	8001c78 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001c6e:	68ab      	ldr	r3, [r5, #8]
 8001c70:	210d      	movs	r1, #13
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4628      	mov	r0, r5
 8001c76:	4798      	blx	r3
 8001c78:	68ab      	ldr	r3, [r5, #8]
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <console_out+0x24>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	b2e1      	uxtb	r1, r4
 8001c80:	4798      	blx	r3
}
 8001c82:	4620      	mov	r0, r4
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
 8001c86:	bf00      	nop
 8001c88:	08003eec 	.word	0x08003eec

08001c8c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001c8c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001c8e:	6903      	ldr	r3, [r0, #16]
{
 8001c90:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8001c92:	6058      	str	r0, [r3, #4]
 8001c94:	4d08      	ldr	r5, [pc, #32]	; (8001cb8 <gpio_stm32_init+0x2c>)
 8001c96:	4628      	mov	r0, r5
 8001c98:	f001 ff18 	bl	8003acc <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001c9c:	b140      	cbz	r0, 8001cb0 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8001c9e:	6861      	ldr	r1, [r4, #4]
	return api->on(dev, sys);
 8001ca0:	68ab      	ldr	r3, [r5, #8]
 8001ca2:	310c      	adds	r1, #12
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8001caa:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001cb0:	f06f 0012 	mvn.w	r0, #18
 8001cb4:	e7fb      	b.n	8001cae <gpio_stm32_init+0x22>
 8001cb6:	bf00      	nop
 8001cb8:	08003e14 	.word	0x08003e14

08001cbc <gpio_stm32_pin_interrupt_configure>:
{
 8001cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cbe:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001cc0:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8001cc4:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001cc6:	6902      	ldr	r2, [r0, #16]
{
 8001cc8:	460c      	mov	r4, r1
 8001cca:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001ccc:	d124      	bne.n	8001d18 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001cce:	f001 0203 	and.w	r2, r1, #3
 8001cd2:	3204      	adds	r2, #4
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8001ce2:	3202      	adds	r2, #2
 8001ce4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ce8:	0c19      	lsrs	r1, r3, #16
 8001cea:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001cf8:	68b2      	ldr	r2, [r6, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d109      	bne.n	8001d12 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff fc1a 	bl	8001538 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff fc65 	bl	80015d4 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fc1f 	bl	8001550 <stm32_exti_trigger>
	int err = 0;
 8001d12:	2000      	movs	r0, #0
}
 8001d14:	b003      	add	sp, #12
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001d18:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8001d1c:	d041      	beq.n	8001da2 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fc45 	bl	80015b0 <stm32_exti_set_callback>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d13e      	bne.n	8001da8 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8001d2a:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8001d2c:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8001d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d32:	466b      	mov	r3, sp
 8001d34:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d38:	4820      	ldr	r0, [pc, #128]	; (8001dbc <gpio_stm32_pin_interrupt_configure+0x100>)
 8001d3a:	6882      	ldr	r2, [r0, #8]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	4790      	blx	r2
	if (ret != 0) {
 8001d42:	b9c0      	cbnz	r0, 8001d76 <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001d44:	f004 0303 	and.w	r3, r4, #3
 8001d48:	3304      	adds	r3, #4
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001d54:	b2d3      	uxtb	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d5c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d60:	0c11      	lsrs	r1, r2, #16
 8001d62:	6898      	ldr	r0, [r3, #8]
 8001d64:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	4096      	lsls	r6, r2
 8001d72:	4306      	orrs	r6, r0
 8001d74:	609e      	str	r6, [r3, #8]
	switch (trig) {
 8001d76:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8001d7a:	d00e      	beq.n	8001d9a <gpio_stm32_pin_interrupt_configure+0xde>
 8001d7c:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001d80:	d00d      	beq.n	8001d9e <gpio_stm32_pin_interrupt_configure+0xe2>
 8001d82:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8001d86:	4259      	negs	r1, r3
 8001d88:	4159      	adcs	r1, r3
 8001d8a:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fbdf 	bl	8001550 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff fbbe 	bl	8001514 <stm32_exti_enable>
 8001d98:	e7bb      	b.n	8001d12 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	e7f6      	b.n	8001d8c <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8001d9e:	2103      	movs	r1, #3
 8001da0:	e7f4      	b.n	8001d8c <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8001da2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001da6:	e7b5      	b.n	8001d14 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8001da8:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001dac:	e7b2      	b.n	8001d14 <gpio_stm32_pin_interrupt_configure+0x58>
 8001dae:	bf00      	nop
 8001db0:	40010000 	.word	0x40010000
 8001db4:	08003841 	.word	0x08003841
 8001db8:	080042c0 	.word	0x080042c0
 8001dbc:	08003e14 	.word	0x08003e14

08001dc0 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8001dc4:	4f1e      	ldr	r7, [pc, #120]	; (8001e40 <pinctrl_configure_pins+0x80>)
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001dcc:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001dce:	42b4      	cmp	r4, r6
 8001dd0:	d101      	bne.n	8001dd6 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e014      	b.n	8001e00 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001dd6:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001dd8:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001dda:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001dde:	d411      	bmi.n	8001e04 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001de0:	6865      	ldr	r5, [r4, #4]
 8001de2:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001de6:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001dea:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001dee:	280a      	cmp	r0, #10
 8001df0:	d823      	bhi.n	8001e3a <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001df2:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001df6:	f1b8 0f00 	cmp.w	r8, #0
 8001dfa:	d10d      	bne.n	8001e18 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8001dfc:	f06f 0012 	mvn.w	r0, #18
}
 8001e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001e04:	f1b9 0f10 	cmp.w	r9, #16
 8001e08:	d004      	beq.n	8001e14 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001e0a:	f1b9 0f11 	cmp.w	r9, #17
 8001e0e:	d1ea      	bne.n	8001de6 <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8001e10:	6865      	ldr	r5, [r4, #4]
 8001e12:	e7e8      	b.n	8001de6 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001e14:	2530      	movs	r5, #48	; 0x30
 8001e16:	e7e6      	b.n	8001de6 <pinctrl_configure_pins+0x26>
 8001e18:	4640      	mov	r0, r8
 8001e1a:	f001 fe57 	bl	8003acc <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d0ec      	beq.n	8001dfc <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001e22:	464b      	mov	r3, r9
 8001e24:	462a      	mov	r2, r5
 8001e26:	f00a 010f 	and.w	r1, sl, #15
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	f001 fd1f 	bl	800386e <gpio_stm32_configure>
		if (ret < 0) {
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f104 0408 	add.w	r4, r4, #8
 8001e36:	daca      	bge.n	8001dce <pinctrl_configure_pins+0xe>
 8001e38:	e7e2      	b.n	8001e00 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001e3a:	f06f 0015 	mvn.w	r0, #21
 8001e3e:	e7df      	b.n	8001e00 <pinctrl_configure_pins+0x40>
 8001e40:	0800452c 	.word	0x0800452c

08001e44 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 8001e46:	6907      	ldr	r7, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8001e48:	6844      	ldr	r4, [r0, #4]
{
 8001e4a:	4606      	mov	r6, r0
	data->clock = clk;
 8001e4c:	4846      	ldr	r0, [pc, #280]	; (8001f68 <uart_stm32_init+0x124>)
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	f001 fe3c 	bl	8003acc <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8001e54:	b920      	cbnz	r0, 8001e60 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 8001e56:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	6861      	ldr	r1, [r4, #4]
 8001e64:	6883      	ldr	r3, [r0, #8]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4798      	blx	r3
	if (err != 0) {
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d1f4      	bne.n	8001e5a <uart_stm32_init+0x16>
	ret = pinctrl_lookup_state(config, id, &state);
 8001e70:	4601      	mov	r1, r0
 8001e72:	aa01      	add	r2, sp, #4
 8001e74:	69a0      	ldr	r0, [r4, #24]
 8001e76:	f001 fd0f 	bl	8003898 <pinctrl_lookup_state>
	if (ret < 0) {
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	da01      	bge.n	8001e82 <uart_stm32_init+0x3e>
 8001e7e:	4605      	mov	r5, r0
 8001e80:	e7eb      	b.n	8001e5a <uart_stm32_init+0x16>
	return pinctrl_apply_state_direct(config, state);
 8001e82:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001e84:	462a      	mov	r2, r5
 8001e86:	7919      	ldrb	r1, [r3, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f7ff ff99 	bl	8001dc0 <pinctrl_configure_pins>
	if (err < 0) {
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	dbf5      	blt.n	8001e7e <uart_stm32_init+0x3a>
	LL_USART_Disable(config->usart);
 8001e92:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]
	if (!device_is_ready(data->reset.dev)) {
 8001e9c:	68b8      	ldr	r0, [r7, #8]
 8001e9e:	f001 fe15 	bl	8003acc <z_device_is_ready>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d0d7      	beq.n	8001e56 <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8001ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8001eaa:	6883      	ldr	r3, [r0, #8]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	b103      	cbz	r3, 8001eb2 <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 8001eb0:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 8001eb2:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb4:	e851 3f00 	ldrex	r3, [r1]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001eb8:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ebc:	e841 3200 	strex	r2, r3, [r1]
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d1f7      	bne.n	8001eb4 <uart_stm32_init+0x70>
	if (config->parity == 2) {
 8001ec4:	6923      	ldr	r3, [r4, #16]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d048      	beq.n	8001f5c <uart_stm32_init+0x118>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	bf12      	itee	ne
 8001ece:	2000      	movne	r0, #0
 8001ed0:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8001ed4:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 8001ed8:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001eda:	680b      	ldr	r3, [r1, #0]
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ee4:	4310      	orrs	r0, r2
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001eea:	684b      	ldr	r3, [r1, #4]
 8001eec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef0:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8001ef2:	7b23      	ldrb	r3, [r4, #12]
 8001ef4:	b12b      	cbz	r3, 8001f02 <uart_stm32_init+0xbe>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8001ef6:	6873      	ldr	r3, [r6, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001efa:	6893      	ldr	r3, [r2, #8]
 8001efc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f00:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	4630      	mov	r0, r6
 8001f06:	f001 fd14 	bl	8003932 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8001f0a:	7d23      	ldrb	r3, [r4, #20]
 8001f0c:	b123      	cbz	r3, 8001f18 <uart_stm32_init+0xd4>
		LL_USART_EnableHalfDuplex(config->usart);
 8001f0e:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001f10:	6893      	ldr	r3, [r2, #8]
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8001f18:	7d63      	ldrb	r3, [r4, #21]
 8001f1a:	b123      	cbz	r3, 8001f26 <uart_stm32_init+0xe2>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 8001f1c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8001f1e:	6853      	ldr	r3, [r2, #4]
 8001f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f24:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8001f26:	7da3      	ldrb	r3, [r4, #22]
 8001f28:	b123      	cbz	r3, 8001f34 <uart_stm32_init+0xf0>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8001f2a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8001f2c:	6853      	ldr	r3, [r2, #4]
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8001f34:	7de3      	ldrb	r3, [r4, #23]
 8001f36:	b123      	cbz	r3, 8001f42 <uart_stm32_init+0xfe>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8001f38:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8001f3a:	6853      	ldr	r3, [r2, #4]
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	6053      	str	r3, [r2, #4]
	LL_USART_Enable(config->usart);
 8001f42:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f44:	6813      	ldr	r3, [r2, #0]
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8001f4c:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	0291      	lsls	r1, r2, #10
 8001f52:	d5fc      	bpl.n	8001f4e <uart_stm32_init+0x10a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	0252      	lsls	r2, r2, #9
 8001f58:	d5fc      	bpl.n	8001f54 <uart_stm32_init+0x110>
 8001f5a:	e77e      	b.n	8001e5a <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001f5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8001f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f64:	e7b8      	b.n	8001ed8 <uart_stm32_init+0x94>
 8001f66:	bf00      	nop
 8001f68:	08003e14 	.word	0x08003e14

08001f6c <uart_stm32_configure>:
{
 8001f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001f70:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8001f72:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001f74:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8001f76:	2b01      	cmp	r3, #1
{
 8001f78:	460c      	mov	r4, r1
	switch (parity) {
 8001f7a:	f000 8085 	beq.w	8002088 <uart_stm32_configure+0x11c>
 8001f7e:	1e9a      	subs	r2, r3, #2
 8001f80:	4251      	negs	r1, r2
 8001f82:	4151      	adcs	r1, r2
 8001f84:	0289      	lsls	r1, r1, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001f86:	f894 c005 	ldrb.w	ip, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001f8a:	f894 8006 	ldrb.w	r8, [r4, #6]
 8001f8e:	f1bc 0f02 	cmp.w	ip, #2
 8001f92:	bf96      	itet	ls
 8001f94:	4a62      	ldrls	r2, [pc, #392]	; (8002120 <uart_stm32_configure+0x1b4>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001f96:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
 8001f9a:	f832 701c 	ldrhls.w	r7, [r2, ip, lsl #1]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001f9e:	79e2      	ldrb	r2, [r4, #7]
	switch (db) {
 8001fa0:	f1b8 0f02 	cmp.w	r8, #2
 8001fa4:	d073      	beq.n	800208e <uart_stm32_configure+0x122>
 8001fa6:	f1b8 0f04 	cmp.w	r8, #4
 8001faa:	f000 8099 	beq.w	80020e0 <uart_stm32_configure+0x174>
		if (p == UART_CFG_PARITY_NONE) {
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d17a      	bne.n	80020a8 <uart_stm32_configure+0x13c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	f02c 0c02 	bic.w	ip, ip, #2
 8001fb8:	f040 80a3 	bne.w	8002102 <uart_stm32_configure+0x196>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001fbc:	f1bc 0f00 	cmp.w	ip, #0
 8001fc0:	f000 808e 	beq.w	80020e0 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001fc4:	f1b8 0f01 	cmp.w	r8, #1
 8001fc8:	f240 808a 	bls.w	80020e0 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8001fcc:	f44f 7e40 	mov.w	lr, #768	; 0x300
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001fd0:	f8d5 c000 	ldr.w	ip, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001fd4:	b16a      	cbz	r2, 8001ff2 <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001fd6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8002124 <uart_stm32_configure+0x1b8>
 8001fda:	45c4      	cmp	ip, r8
 8001fdc:	d007      	beq.n	8001fee <uart_stm32_configure+0x82>
 8001fde:	f5a8 4874 	sub.w	r8, r8, #62464	; 0xf400
 8001fe2:	45c4      	cmp	ip, r8
 8001fe4:	d003      	beq.n	8001fee <uart_stm32_configure+0x82>
 8001fe6:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8001fea:	45c4      	cmp	ip, r8
 8001fec:	d178      	bne.n	80020e0 <uart_stm32_configure+0x174>
 8001fee:	2a01      	cmp	r2, #1
 8001ff0:	d176      	bne.n	80020e0 <uart_stm32_configure+0x174>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001ff2:	f8dc 2000 	ldr.w	r2, [ip]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	f8cc 2000 	str.w	r2, [ip]
	return LL_USART_GetParity(config->usart);
 8001ffe:	6842      	ldr	r2, [r0, #4]
 8002000:	f8d2 c000 	ldr.w	ip, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002004:	f8dc 2000 	ldr.w	r2, [ip]
 8002008:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800200c:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800200e:	bf1f      	itttt	ne
 8002010:	f8dc 2000 	ldrne.w	r2, [ip]
 8002014:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002018:	430a      	orrne	r2, r1
 800201a:	f8cc 2000 	strne.w	r2, [ip]
	return LL_USART_GetStopBitsLength(config->usart);
 800201e:	6842      	ldr	r2, [r0, #4]
 8002020:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002022:	684a      	ldr	r2, [r1, #4]
 8002024:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8002028:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800202a:	bf1f      	itttt	ne
 800202c:	684a      	ldrne	r2, [r1, #4]
 800202e:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 8002032:	433a      	orrne	r2, r7
 8002034:	604a      	strne	r2, [r1, #4]
	return LL_USART_GetDataWidth(config->usart);
 8002036:	6842      	ldr	r2, [r0, #4]
 8002038:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800203a:	680a      	ldr	r2, [r1, #0]
 800203c:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8002040:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8002042:	bf1f      	itttt	ne
 8002044:	680a      	ldrne	r2, [r1, #0]
 8002046:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 800204a:	4313      	orrne	r3, r2
 800204c:	600b      	strne	r3, [r1, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 800204e:	6843      	ldr	r3, [r0, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8002058:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800205a:	bf1f      	itttt	ne
 800205c:	6893      	ldrne	r3, [r2, #8]
 800205e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8002062:	ea43 030e 	orrne.w	r3, r3, lr
 8002066:	6093      	strne	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 8002068:	6821      	ldr	r1, [r4, #0]
 800206a:	6833      	ldr	r3, [r6, #0]
 800206c:	4299      	cmp	r1, r3
 800206e:	d003      	beq.n	8002078 <uart_stm32_configure+0x10c>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002070:	f001 fc5f 	bl	8003932 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8002078:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6013      	str	r3, [r2, #0]
	return 0;
 8002082:	2000      	movs	r0, #0
};
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8002088:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800208c:	e77b      	b.n	8001f86 <uart_stm32_configure+0x1a>
		if (p == UART_CFG_PARITY_NONE) {
 800208e:	bb0b      	cbnz	r3, 80020d4 <uart_stm32_configure+0x168>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002090:	2a01      	cmp	r2, #1
 8002092:	f02c 0c02 	bic.w	ip, ip, #2
 8002096:	d12f      	bne.n	80020f8 <uart_stm32_configure+0x18c>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002098:	f1bc 0f00 	cmp.w	ip, #0
 800209c:	d020      	beq.n	80020e0 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 800209e:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 80020a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020a6:	e793      	b.n	8001fd0 <uart_stm32_configure+0x64>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80020a8:	3b03      	subs	r3, #3
 80020aa:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80020ac:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80020ae:	d10c      	bne.n	80020ca <uart_stm32_configure+0x15e>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d915      	bls.n	80020e0 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 80020b4:	f44f 7e40 	mov.w	lr, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80020b8:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 80020bc:	d010      	beq.n	80020e0 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80020be:	f1b8 0f01 	cmp.w	r8, #1
 80020c2:	d90d      	bls.n	80020e0 <uart_stm32_configure+0x174>
 80020c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c8:	e782      	b.n	8001fd0 <uart_stm32_configure+0x64>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d908      	bls.n	80020e0 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 80020ce:	f04f 0e00 	mov.w	lr, #0
 80020d2:	e7f1      	b.n	80020b8 <uart_stm32_configure+0x14c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80020d4:	3b03      	subs	r3, #3
 80020d6:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80020d8:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80020da:	d004      	beq.n	80020e6 <uart_stm32_configure+0x17a>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d819      	bhi.n	8002114 <uart_stm32_configure+0x1a8>
		return -ENOTSUP;
 80020e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80020e4:	e7ce      	b.n	8002084 <uart_stm32_configure+0x118>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d9fa      	bls.n	80020e0 <uart_stm32_configure+0x174>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80020ea:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 80020ee:	d0f7      	beq.n	80020e0 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 80020f0:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_8B;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e76b      	b.n	8001fd0 <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80020f8:	f1bc 0f00 	cmp.w	ip, #0
 80020fc:	d0f0      	beq.n	80020e0 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 80020fe:	469e      	mov	lr, r3
 8002100:	e7cf      	b.n	80020a2 <uart_stm32_configure+0x136>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002102:	f1bc 0f00 	cmp.w	ip, #0
 8002106:	d0eb      	beq.n	80020e0 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002108:	f1b8 0f01 	cmp.w	r8, #1
 800210c:	d9e8      	bls.n	80020e0 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 800210e:	469e      	mov	lr, r3
			return LL_USART_DATAWIDTH_8B;
 8002110:	4673      	mov	r3, lr
 8002112:	e75d      	b.n	8001fd0 <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002114:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8002118:	d0e2      	beq.n	80020e0 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 800211a:	f04f 0e00 	mov.w	lr, #0
 800211e:	e7f7      	b.n	8002110 <uart_stm32_configure+0x1a4>
 8002120:	08004634 	.word	0x08004634
 8002124:	40013800 	.word	0x40013800

08002128 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8002128:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800212a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800212e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8002130:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8002132:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <elapsed+0x34>)
 8002136:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800213a:	4909      	ldr	r1, [pc, #36]	; (8002160 <elapsed+0x38>)
 800213c:	d101      	bne.n	8002142 <elapsed+0x1a>
	    || (val1 < val2)) {
 800213e:	4282      	cmp	r2, r0
 8002140:	d206      	bcs.n	8002150 <elapsed+0x28>
		overflow_cyc += last_load;
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	680c      	ldr	r4, [r1, #0]
 8002146:	4422      	add	r2, r4
 8002148:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800214a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800214e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	680a      	ldr	r2, [r1, #0]
 8002154:	4413      	add	r3, r2
}
 8002156:	1a18      	subs	r0, r3, r0
 8002158:	bd10      	pop	{r4, pc}
 800215a:	bf00      	nop
 800215c:	20000484 	.word	0x20000484
 8002160:	20000490 	.word	0x20000490

08002164 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <sys_clock_driver_init+0x28>)
 8002166:	2210      	movs	r2, #16
 8002168:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <sys_clock_driver_init+0x2c>)
 800216e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002172:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <sys_clock_driver_init+0x30>)
 8002176:	2000      	movs	r0, #0
 8002178:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800217a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800217e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002180:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	f042 0207 	orr.w	r2, r2, #7
 8002188:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00
 8002190:	20000490 	.word	0x20000490
 8002194:	20000484 	.word	0x20000484

08002198 <sys_clock_isr>:
{
 8002198:	b508      	push	{r3, lr}
	elapsed();
 800219a:	f7ff ffc5 	bl	8002128 <elapsed>
	cycle_count += overflow_cyc;
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <sys_clock_isr+0x38>)
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <sys_clock_isr+0x3c>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	6811      	ldr	r1, [r2, #0]
 80021a6:	4408      	add	r0, r1
 80021a8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <sys_clock_isr+0x40>)
 80021b0:	6813      	ldr	r3, [r2, #0]
 80021b2:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80021b6:	1ac0      	subs	r0, r0, r3
 80021b8:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 80021bc:	fb01 3300 	mla	r3, r1, r0, r3
 80021c0:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80021c2:	f000 fe9b 	bl	8002efc <sys_clock_announce>
}
 80021c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80021ca:	f7fe bf0f 	b.w	8000fec <z_arm_exc_exit>
 80021ce:	bf00      	nop
 80021d0:	20000484 	.word	0x20000484
 80021d4:	2000048c 	.word	0x2000048c
 80021d8:	20000488 	.word	0x20000488

080021dc <sys_clock_set_timeout>:
{
 80021dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e0:	4e31      	ldr	r6, [pc, #196]	; (80022a8 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d054      	beq.n	8002290 <sys_clock_set_timeout+0xb4>
 80021e6:	1c42      	adds	r2, r0, #1
 80021e8:	d10a      	bne.n	8002200 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80021ea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80021ee:	6913      	ldr	r3, [r2, #16]
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80021f6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021fa:	6033      	str	r3, [r6, #0]
}
 80021fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8002200:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002202:	2801      	cmp	r0, #1
 8002204:	dd4a      	ble.n	800229c <sys_clock_set_timeout+0xc0>
 8002206:	f640 1819 	movw	r8, #2329	; 0x919
 800220a:	4540      	cmp	r0, r8
 800220c:	dc01      	bgt.n	8002212 <sys_clock_set_timeout+0x36>
 800220e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 8002212:	f04f 0310 	mov.w	r3, #16
 8002216:	f3ef 8411 	mrs	r4, BASEPRI
 800221a:	f383 8812 	msr	BASEPRI_MAX, r3
 800221e:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8002222:	f7ff ff81 	bl	8002128 <elapsed>
	cycle_count += pending;
 8002226:	4f21      	ldr	r7, [pc, #132]	; (80022ac <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8002228:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800222c:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 800222e:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <sys_clock_set_timeout+0xd4>)
 8002238:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <sys_clock_set_timeout+0xd8>)
 800223c:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800223e:	1ad1      	subs	r1, r2, r3
 8002240:	d42f      	bmi.n	80022a2 <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 8002242:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
		delay += unannounced;
 8002246:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800224a:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
		delay -= unannounced;
 800224e:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8002250:	311f      	adds	r1, #31
 8002252:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8002256:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d920      	bls.n	80022a2 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8002260:	4915      	ldr	r1, [pc, #84]	; (80022b8 <sys_clock_set_timeout+0xdc>)
 8002262:	428b      	cmp	r3, r1
 8002264:	bf28      	it	cs
 8002266:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8002268:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 800226c:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 800226e:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8002270:	3b01      	subs	r3, #1
 8002272:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002274:	2300      	movs	r3, #0
 8002276:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8002278:	4584      	cmp	ip, r0
 800227a:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 800227e:	bf38      	it	cc
 8002280:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8002282:	441a      	add	r2, r3
 8002284:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8002286:	f384 8811 	msr	BASEPRI, r4
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	e7b5      	b.n	80021fc <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002290:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8002292:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002294:	d1b5      	bne.n	8002202 <sys_clock_set_timeout+0x26>
 8002296:	f640 1019 	movw	r0, #2329	; 0x919
 800229a:	e7b8      	b.n	800220e <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800229c:	f04f 0800 	mov.w	r8, #0
 80022a0:	e7b7      	b.n	8002212 <sys_clock_set_timeout+0x36>
 80022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a6:	e7df      	b.n	8002268 <sys_clock_set_timeout+0x8c>
 80022a8:	20000490 	.word	0x20000490
 80022ac:	2000048c 	.word	0x2000048c
 80022b0:	20000484 	.word	0x20000484
 80022b4:	20000488 	.word	0x20000488
 80022b8:	00ffdf20 	.word	0x00ffdf20

080022bc <sys_clock_elapsed>:
{
 80022bc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80022be:	f04f 0310 	mov.w	r3, #16
 80022c2:	f3ef 8411 	mrs	r4, BASEPRI
 80022c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80022ca:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80022ce:	f7ff ff2b 	bl	8002128 <elapsed>
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <sys_clock_elapsed+0x34>)
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <sys_clock_elapsed+0x38>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	4403      	add	r3, r0
	__asm__ volatile(
 80022de:	f384 8811 	msr	BASEPRI, r4
 80022e2:	f3bf 8f6f 	isb	sy
}
 80022e6:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 80022ea:	fbb3 f0f0 	udiv	r0, r3, r0
 80022ee:	bd10      	pop	{r4, pc}
 80022f0:	2000048c 	.word	0x2000048c
 80022f4:	20000488 	.word	0x20000488

080022f8 <sys_clock_cycle_get_32>:
{
 80022f8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80022fa:	f04f 0310 	mov.w	r3, #16
 80022fe:	f3ef 8411 	mrs	r4, BASEPRI
 8002302:	f383 8812 	msr	BASEPRI_MAX, r3
 8002306:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800230a:	f7ff ff0d 	bl	8002128 <elapsed>
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <sys_clock_cycle_get_32+0x28>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4418      	add	r0, r3
	__asm__ volatile(
 8002314:	f384 8811 	msr	BASEPRI, r4
 8002318:	f3bf 8f6f 	isb	sy
}
 800231c:	bd10      	pop	{r4, pc}
 800231e:	bf00      	nop
 8002320:	2000048c 	.word	0x2000048c

08002324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;

  tmpreg = RCC->CFGR;
 8002326:	4911      	ldr	r1, [pc, #68]	; (800236c <HAL_RCC_GetSysClockFreq+0x48>)
 8002328:	684b      	ldr	r3, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	2a08      	cmp	r2, #8
 8002330:	d11a      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002332:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800233a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800233e:	fab2 f282 	clz	r2, r2
 8002342:	40d3      	lsrs	r3, r2
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_RCC_GetSysClockFreq+0x4c>)
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0x50>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002348:	5cd4      	ldrb	r4, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800234a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	220f      	movs	r2, #15
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002356:	fab2 f282 	clz	r2, r2
 800235a:	40d3      	lsrs	r3, r2
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <HAL_RCC_GetSysClockFreq+0x54>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002360:	fbb0 f0f3 	udiv	r0, r0, r3
 8002364:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002366:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <HAL_RCC_GetSysClockFreq+0x50>)
  return sysclockfreq;
 800236a:	e7fc      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x42>
 800236c:	40021000 	.word	0x40021000
 8002370:	08004849 	.word	0x08004849
 8002374:	007a1200 	.word	0x007a1200
 8002378:	08004839 	.word	0x08004839

0800237c <LL_SetFlashLatency>:
  uint32_t getlatency;
  uint32_t latency;
  ErrorStatus status = SUCCESS;

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 800237c:	b1d8      	cbz	r0, 80023b6 <LL_SetFlashLatency+0x3a>
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <LL_SetFlashLatency+0x40>)
 8002380:	4298      	cmp	r0, r3
 8002382:	d816      	bhi.n	80023b2 <LL_SetFlashLatency+0x36>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <LL_SetFlashLatency+0x44>)
 8002386:	4298      	cmp	r0, r3
 8002388:	bf94      	ite	ls
 800238a:	2000      	movls	r0, #0
 800238c:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800238e:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <LL_SetFlashLatency+0x48>)
 8002390:	6813      	ldr	r3, [r2, #0]
 8002392:	f023 0307 	bic.w	r3, r3, #7
 8002396:	4303      	orrs	r3, r0
 8002398:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800239a:	6813      	ldr	r3, [r2, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
      do
      {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
      timeout--;
      } while ((getlatency != latency) && (timeout > 0));
 80023a0:	4298      	cmp	r0, r3
 80023a2:	bf1c      	itt	ne
 80023a4:	6813      	ldrne	r3, [r2, #0]
 80023a6:	f003 0307 	andne.w	r3, r3, #7

      if(getlatency != latency)
 80023aa:	1ac0      	subs	r0, r0, r3
 80023ac:	bf18      	it	ne
 80023ae:	2001      	movne	r0, #1
 80023b0:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 80023b2:	2002      	movs	r0, #2
 80023b4:	e7eb      	b.n	800238e <LL_SetFlashLatency+0x12>
    status = ERROR;
 80023b6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	02dc6c00 	.word	0x02dc6c00
 80023c0:	016e3600 	.word	0x016e3600
 80023c4:	40022000 	.word	0x40022000

080023c8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <z_sys_init_run_level+0x40>)
{
 80023ca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80023cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80023d0:	3001      	adds	r0, #1
 80023d2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80023d6:	42a6      	cmp	r6, r4
 80023d8:	d800      	bhi.n	80023dc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 80023da:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 80023dc:	e9d4 3500 	ldrd	r3, r5, [r4]
 80023e0:	4628      	mov	r0, r5
 80023e2:	4798      	blx	r3
		if (dev != NULL) {
 80023e4:	b16d      	cbz	r5, 8002402 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 80023e6:	b138      	cbz	r0, 80023f8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 80023e8:	2800      	cmp	r0, #0
 80023ea:	bfb8      	it	lt
 80023ec:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 80023ee:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 80023f0:	28ff      	cmp	r0, #255	; 0xff
 80023f2:	bfa8      	it	ge
 80023f4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 80023f6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 80023f8:	68ea      	ldr	r2, [r5, #12]
 80023fa:	7853      	ldrb	r3, [r2, #1]
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002402:	3408      	adds	r4, #8
 8002404:	e7e7      	b.n	80023d6 <z_sys_init_run_level+0xe>
 8002406:	bf00      	nop
 8002408:	0800460c 	.word	0x0800460c

0800240c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800240c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <bg_thread_main+0x2c>)
 8002410:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002412:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8002414:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002416:	f7ff ffd7 	bl	80023c8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800241a:	f000 fead 	bl	8003178 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 800241e:	2004      	movs	r0, #4
 8002420:	f7ff ffd2 	bl	80023c8 <z_sys_init_run_level>

	z_init_static_threads();
 8002424:	f000 f8ee 	bl	8002604 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8002428:	f7fe f832 	bl	8000490 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <bg_thread_main+0x30>)
 800242e:	7b13      	ldrb	r3, [r2, #12]
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002436:	bd08      	pop	{r3, pc}
 8002438:	200004c5 	.word	0x200004c5
 800243c:	200002f8 	.word	0x200002f8

08002440 <z_bss_zero>:
{
 8002440:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8002442:	4803      	ldr	r0, [pc, #12]	; (8002450 <z_bss_zero+0x10>)
 8002444:	4a03      	ldr	r2, [pc, #12]	; (8002454 <z_bss_zero+0x14>)
 8002446:	2100      	movs	r1, #0
 8002448:	1a12      	subs	r2, r2, r0
 800244a:	f001 fb71 	bl	8003b30 <z_early_memset>
}
 800244e:	bd08      	pop	{r3, pc}
 8002450:	20000278 	.word	0x20000278
 8002454:	200004c8 	.word	0x200004c8

08002458 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8002458:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 800245a:	2300      	movs	r3, #0
{
 800245c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800245e:	2201      	movs	r2, #1
 8002460:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 8002464:	4e13      	ldr	r6, [pc, #76]	; (80024b4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002466:	4d14      	ldr	r5, [pc, #80]	; (80024b8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	220f      	movs	r2, #15
 800246c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002470:	4912      	ldr	r1, [pc, #72]	; (80024bc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002472:	2314      	movs	r3, #20
 8002474:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8002478:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 800247c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800247e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8002482:	fb00 1104 	mla	r1, r0, r4, r1
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <z_init_cpu+0x68>)
 8002488:	9500      	str	r5, [sp, #0]
 800248a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800248e:	4630      	mov	r0, r6
 8002490:	f000 f886 	bl	80025a0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002494:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8002498:	60ee      	str	r6, [r5, #12]
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 80024a0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80024a4:	fb04 3303 	mla	r3, r4, r3, r3
 80024a8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 80024aa:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
 80024ac:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 80024ae:	b006      	add	sp, #24
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
 80024b2:	bf00      	nop
 80024b4:	20000278 	.word	0x20000278
 80024b8:	20000494 	.word	0x20000494
 80024bc:	20000d40 	.word	0x20000d40
 80024c0:	08003b39 	.word	0x08003b39
 80024c4:	20000500 	.word	0x20000500

080024c8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 80024c8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 80024ca:	2000      	movs	r0, #0
{
 80024cc:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 80024ce:	f7ff ff7b 	bl	80023c8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80024d4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 80024d8:	4d2b      	ldr	r5, [pc, #172]	; (8002588 <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 80024da:	4e2c      	ldr	r6, [pc, #176]	; (800258c <z_cstart+0xc4>)
 80024dc:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80024de:	4f2c      	ldr	r7, [pc, #176]	; (8002590 <z_cstart+0xc8>)
 80024e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e4:	616b      	str	r3, [r5, #20]
 80024e6:	2400      	movs	r4, #0
 80024e8:	23f0      	movs	r3, #240	; 0xf0
 80024ea:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80024ee:	77ec      	strb	r4, [r5, #31]
 80024f0:	762c      	strb	r4, [r5, #24]
 80024f2:	766c      	strb	r4, [r5, #25]
 80024f4:	76ac      	strb	r4, [r5, #26]
 80024f6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80024fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80024fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002500:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002502:	f7fe febf 	bl	8001284 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002506:	f7fe fc5f 	bl	8000dc8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002510:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8002512:	f7fe ff99 	bl	8001448 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8002516:	f7fe feff 	bl	8001318 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800251a:	f240 1301 	movw	r3, #257	; 0x101
 800251e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002522:	ab06      	add	r3, sp, #24
 8002524:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8002526:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 800252a:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800252c:	f001 facd 	bl	8003aca <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff ff49 	bl	80023c8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002536:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8002538:	4d16      	ldr	r5, [pc, #88]	; (8002594 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 800253a:	f7ff ff45 	bl	80023c8 <z_sys_init_run_level>
	z_sched_init();
 800253e:	f000 fafb 	bl	8002b38 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 8002544:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002546:	9305      	str	r3, [sp, #20]
 8002548:	2301      	movs	r3, #1
 800254a:	4914      	ldr	r1, [pc, #80]	; (800259c <z_cstart+0xd4>)
 800254c:	9400      	str	r4, [sp, #0]
 800254e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8002552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002556:	463b      	mov	r3, r7
 8002558:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800255c:	4628      	mov	r0, r5
 800255e:	f000 f81f 	bl	80025a0 <z_setup_new_thread>
 8002562:	7b6a      	ldrb	r2, [r5, #13]
 8002564:	4606      	mov	r6, r0
 8002566:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800256a:	4628      	mov	r0, r5
 800256c:	736a      	strb	r2, [r5, #13]
 800256e:	f001 fb29 	bl	8003bc4 <z_ready_thread>
	z_init_cpu(0);
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff ff70 	bl	8002458 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002578:	463a      	mov	r2, r7
 800257a:	4631      	mov	r1, r6
 800257c:	4628      	mov	r0, r5
 800257e:	f7fe fd0b 	bl	8000f98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002582:	bf00      	nop
 8002584:	20000d40 	.word	0x20000d40
 8002588:	e000ed00 	.word	0xe000ed00
 800258c:	20000494 	.word	0x20000494
 8002590:	0800240d 	.word	0x0800240d
 8002594:	200002f8 	.word	0x200002f8
 8002598:	08004859 	.word	0x08004859
 800259c:	20000ec0 	.word	0x20000ec0

080025a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80025a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80025a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80025a6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80025a8:	2604      	movs	r6, #4
 80025aa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 80025ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80025ae:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80025b0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 80025b4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80025b6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 80025b8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80025bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 80025be:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80025c0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 80025c4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 80025c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 80025ca:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 80025ce:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 80025d0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 80025d2:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80025d4:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80025d8:	9202      	str	r2, [sp, #8]
 80025da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025dc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 80025de:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80025e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025e2:	9200      	str	r2, [sp, #0]
 80025e4:	4642      	mov	r2, r8
{
 80025e6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80025e8:	f7fe fca4 	bl	8000f34 <arch_new_thread>
	if (!_current) {
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 80025ee:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	b103      	cbz	r3, 80025f6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 80025f6:	6723      	str	r3, [r4, #112]	; 0x70
}
 80025f8:	4640      	mov	r0, r8
 80025fa:	b004      	add	sp, #16
 80025fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002600:	20000494 	.word	0x20000494

08002604 <z_init_static_threads>:
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002606:	4c22      	ldr	r4, [pc, #136]	; (8002690 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002608:	4d22      	ldr	r5, [pc, #136]	; (8002694 <z_init_static_threads+0x90>)
{
 800260a:	b087      	sub	sp, #28
 800260c:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800260e:	42ae      	cmp	r6, r5
 8002610:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8002614:	d30b      	bcc.n	800262e <z_init_static_threads+0x2a>
	k_sched_lock();
 8002616:	f000 fa5f 	bl	8002ad8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800261a:	4c1d      	ldr	r4, [pc, #116]	; (8002690 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800261c:	4f1e      	ldr	r7, [pc, #120]	; (8002698 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800261e:	260a      	movs	r6, #10
 8002620:	42ac      	cmp	r4, r5
 8002622:	d320      	bcc.n	8002666 <z_init_static_threads+0x62>
}
 8002624:	b007      	add	sp, #28
 8002626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800262a:	f000 ba69 	b.w	8002b00 <k_sched_unlock>
		z_setup_new_thread(
 800262e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002632:	9305      	str	r3, [sp, #20]
 8002634:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8002638:	9304      	str	r3, [sp, #16]
 800263a:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800263e:	9303      	str	r3, [sp, #12]
 8002640:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8002656:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 800265a:	f7ff ffa1 	bl	80025a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800265e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8002662:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002664:	e7d2      	b.n	800260c <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002666:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002668:	1c53      	adds	r3, r2, #1
 800266a:	d009      	beq.n	8002680 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800266c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002670:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002674:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002678:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800267a:	d103      	bne.n	8002684 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800267c:	f000 f9dc 	bl	8002a38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002680:	342c      	adds	r4, #44	; 0x2c
 8002682:	e7cd      	b.n	8002620 <z_init_static_threads+0x1c>
 8002684:	4639      	mov	r1, r7
 8002686:	3018      	adds	r0, #24
 8002688:	f000 fbc2 	bl	8002e10 <z_add_timeout>
 800268c:	e7f8      	b.n	8002680 <z_init_static_threads+0x7c>
 800268e:	bf00      	nop
 8002690:	0800420c 	.word	0x0800420c
 8002694:	0800420c 	.word	0x0800420c
 8002698:	08003c4d 	.word	0x08003c4d

0800269c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800269c:	b538      	push	{r3, r4, r5, lr}
 800269e:	4604      	mov	r4, r0
	__asm__ volatile(
 80026a0:	f04f 0310 	mov.w	r3, #16
 80026a4:	f3ef 8511 	mrs	r5, BASEPRI
 80026a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80026ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80026b0:	f001 fae7 	bl	8003c82 <z_unpend_first_thread>

	if (thread != NULL) {
 80026b4:	b148      	cbz	r0, 80026ca <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80026b6:	2200      	movs	r2, #0
 80026b8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80026ba:	f001 fa83 	bl	8003bc4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80026be:	4629      	mov	r1, r5
 80026c0:	4805      	ldr	r0, [pc, #20]	; (80026d8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80026c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80026c6:	f000 b9a5 	b.w	8002a14 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80026ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	bf18      	it	ne
 80026d2:	3301      	addne	r3, #1
 80026d4:	60a3      	str	r3, [r4, #8]
}
 80026d6:	e7f2      	b.n	80026be <z_impl_k_sem_give+0x22>
 80026d8:	200004c6 	.word	0x200004c6

080026dc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80026dc:	b513      	push	{r0, r1, r4, lr}
 80026de:	f04f 0410 	mov.w	r4, #16
 80026e2:	f3ef 8111 	mrs	r1, BASEPRI
 80026e6:	f384 8812 	msr	BASEPRI_MAX, r4
 80026ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80026ee:	6884      	ldr	r4, [r0, #8]
 80026f0:	b144      	cbz	r4, 8002704 <z_impl_k_sem_take+0x28>
		sem->count--;
 80026f2:	3c01      	subs	r4, #1
 80026f4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80026f6:	f381 8811 	msr	BASEPRI, r1
 80026fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80026fe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8002700:	b002      	add	sp, #8
 8002702:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8002704:	ea52 0403 	orrs.w	r4, r2, r3
 8002708:	d106      	bne.n	8002718 <z_impl_k_sem_take+0x3c>
 800270a:	f381 8811 	msr	BASEPRI, r1
 800270e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8002712:	f06f 000f 	mvn.w	r0, #15
 8002716:	e7f3      	b.n	8002700 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8002718:	e9cd 2300 	strd	r2, r3, [sp]
 800271c:	4602      	mov	r2, r0
 800271e:	4802      	ldr	r0, [pc, #8]	; (8002728 <z_impl_k_sem_take+0x4c>)
 8002720:	f000 f95a 	bl	80029d8 <z_pend_curr>
	return ret;
 8002724:	e7ec      	b.n	8002700 <z_impl_k_sem_take+0x24>
 8002726:	bf00      	nop
 8002728:	200004c6 	.word	0x200004c6

0800272c <slice_timeout>:
static struct k_thread *pending_current;
#endif

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <slice_timeout+0x14>)
 800272e:	1ac0      	subs	r0, r0, r3
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <slice_timeout+0x18>)
 8002732:	10c0      	asrs	r0, r0, #3
 8002734:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <slice_timeout+0x1c>)
 8002738:	2201      	movs	r2, #1
 800273a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000378 	.word	0x20000378
 8002744:	aaaaaaab 	.word	0xaaaaaaab
 8002748:	200004c6 	.word	0x200004c6

0800274c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
 800274c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <z_reset_time_slice+0x34>)

	z_abort_timeout(&slice_timeouts[cpu]);
 8002750:	4c0c      	ldr	r4, [pc, #48]	; (8002784 <z_reset_time_slice+0x38>)
	int cpu = _current_cpu->id;
 8002752:	7c1d      	ldrb	r5, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
 8002754:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002758:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800275c:	4620      	mov	r0, r4
 800275e:	f001 fad3 	bl	8003d08 <z_abort_timeout>
	int ret = slice_ticks;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <z_reset_time_slice+0x3c>)
 8002764:	681a      	ldr	r2, [r3, #0]
	if (slice_time(curr) != 0) {
 8002766:	b152      	cbz	r2, 800277e <z_reset_time_slice+0x32>
		slice_expired[cpu] = false;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <z_reset_time_slice+0x40>)
 800276a:	2100      	movs	r1, #0
 800276c:	5559      	strb	r1, [r3, r5]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
			      K_TICKS(slice_time(curr) - 1));
 800276e:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 8002770:	4620      	mov	r0, r4
 8002772:	4907      	ldr	r1, [pc, #28]	; (8002790 <z_reset_time_slice+0x44>)
	}
}
 8002774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 8002778:	17d3      	asrs	r3, r2, #31
 800277a:	f000 bb49 	b.w	8002e10 <z_add_timeout>
}
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	20000494 	.word	0x20000494
 8002784:	20000378 	.word	0x20000378
 8002788:	200004bc 	.word	0x200004bc
 800278c:	200004c6 	.word	0x200004c6
 8002790:	0800272d 	.word	0x0800272d

08002794 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8002794:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8002796:	4d0d      	ldr	r5, [pc, #52]	; (80027cc <update_cache+0x38>)
 8002798:	462b      	mov	r3, r5
 800279a:	f853 4f18 	ldr.w	r4, [r3, #24]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800279e:	429c      	cmp	r4, r3
 80027a0:	d000      	beq.n	80027a4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80027a2:	b904      	cbnz	r4, 80027a6 <update_cache+0x12>
 80027a4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 80027a6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80027a8:	b938      	cbnz	r0, 80027ba <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 80027aa:	7b5a      	ldrb	r2, [r3, #13]
 80027ac:	06d2      	lsls	r2, r2, #27
 80027ae:	d104      	bne.n	80027ba <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80027b0:	69a2      	ldr	r2, [r4, #24]
 80027b2:	b912      	cbnz	r2, 80027ba <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 80027b4:	89da      	ldrh	r2, [r3, #14]
 80027b6:	2a7f      	cmp	r2, #127	; 0x7f
 80027b8:	d805      	bhi.n	80027c6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 80027ba:	429c      	cmp	r4, r3
 80027bc:	d002      	beq.n	80027c4 <update_cache+0x30>
			z_reset_time_slice(thread);
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff ffc4 	bl	800274c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 80027c4:	4623      	mov	r3, r4
 80027c6:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 80027c8:	bd38      	pop	{r3, r4, r5, pc}
 80027ca:	bf00      	nop
 80027cc:	20000494 	.word	0x20000494

080027d0 <move_thread_to_end_of_prio_q>:
{
 80027d0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80027d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80027d6:	7b43      	ldrb	r3, [r0, #13]
 80027d8:	2a00      	cmp	r2, #0
{
 80027da:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80027dc:	da04      	bge.n	80027e8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80027de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80027e4:	f001 f9b4 	bl	8003b50 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80027e8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <move_thread_to_end_of_prio_q+0x70>)
 80027ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f0:	4610      	mov	r0, r2
 80027f2:	734b      	strb	r3, [r1, #13]
 80027f4:	f850 3f18 	ldr.w	r3, [r0, #24]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80027f8:	69d4      	ldr	r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027fa:	4283      	cmp	r3, r0
 80027fc:	bf08      	it	eq
 80027fe:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002800:	b923      	cbnz	r3, 800280c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 8002802:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8002806:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8002808:	61d1      	str	r1, [r2, #28]
}
 800280a:	e00c      	b.n	8002826 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 800280c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002810:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8002814:	42b5      	cmp	r5, r6
 8002816:	d00e      	beq.n	8002836 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002818:	42ae      	cmp	r6, r5
 800281a:	dd0c      	ble.n	8002836 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800281c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800281e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8002822:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002824:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8002826:	6890      	ldr	r0, [r2, #8]
 8002828:	1a43      	subs	r3, r0, r1
 800282a:	4258      	negs	r0, r3
}
 800282c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8002830:	4158      	adcs	r0, r3
 8002832:	f7ff bfaf 	b.w	8002794 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002836:	429c      	cmp	r4, r3
 8002838:	d0e3      	beq.n	8002802 <move_thread_to_end_of_prio_q+0x32>
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e7e0      	b.n	8002800 <move_thread_to_end_of_prio_q+0x30>
 800283e:	bf00      	nop
 8002840:	20000494 	.word	0x20000494

08002844 <ready_thread>:
{
 8002844:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8002846:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800284a:	7b42      	ldrb	r2, [r0, #13]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db29      	blt.n	80028a4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002850:	06d3      	lsls	r3, r2, #27
 8002852:	d127      	bne.n	80028a4 <ready_thread+0x60>
	return node->next != NULL;
 8002854:	6983      	ldr	r3, [r0, #24]
 8002856:	bb2b      	cbnz	r3, 80028a4 <ready_thread+0x60>
	return list->head == list;
 8002858:	4913      	ldr	r1, [pc, #76]	; (80028a8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800285a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800285e:	7342      	strb	r2, [r0, #13]
 8002860:	460a      	mov	r2, r1
 8002862:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002866:	4294      	cmp	r4, r2
 8002868:	bf18      	it	ne
 800286a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 800286c:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800286e:	b923      	cbnz	r3, 800287a <ready_thread+0x36>
	node->prev = tail;
 8002870:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8002874:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002876:	61c8      	str	r0, [r1, #28]
}
 8002878:	e00c      	b.n	8002894 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 800287a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800287e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8002882:	42b5      	cmp	r5, r6
 8002884:	d00a      	beq.n	800289c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002886:	42ae      	cmp	r6, r5
 8002888:	dd08      	ble.n	800289c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 800288a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800288c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8002890:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002892:	6058      	str	r0, [r3, #4]
}
 8002894:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002896:	2000      	movs	r0, #0
 8002898:	f7ff bf7c 	b.w	8002794 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800289c:	42a3      	cmp	r3, r4
 800289e:	d0e7      	beq.n	8002870 <ready_thread+0x2c>
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	e7e4      	b.n	800286e <ready_thread+0x2a>
}
 80028a4:	bc70      	pop	{r4, r5, r6}
 80028a6:	4770      	bx	lr
 80028a8:	20000494 	.word	0x20000494

080028ac <unready_thread>:
{
 80028ac:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80028ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80028b2:	7b43      	ldrb	r3, [r0, #13]
 80028b4:	2a00      	cmp	r2, #0
{
 80028b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80028b8:	da04      	bge.n	80028c4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80028ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80028c0:	f001 f946 	bl	8003b50 <sys_dlist_remove>
	update_cache(thread == _current);
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <unready_thread+0x2c>)
 80028c6:	6898      	ldr	r0, [r3, #8]
 80028c8:	1a43      	subs	r3, r0, r1
 80028ca:	4258      	negs	r0, r3
 80028cc:	4158      	adcs	r0, r3
}
 80028ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80028d2:	f7ff bf5f 	b.w	8002794 <update_cache>
 80028d6:	bf00      	nop
 80028d8:	20000494 	.word	0x20000494

080028dc <pend_locked>:
{
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4615      	mov	r5, r2
 80028e0:	461c      	mov	r4, r3
 80028e2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 80028e4:	f001 f946 	bl	8003b74 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80028e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80028ec:	bf08      	it	eq
 80028ee:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 80028f2:	d008      	beq.n	8002906 <pend_locked+0x2a>
 80028f4:	462a      	mov	r2, r5
 80028f6:	4623      	mov	r3, r4
 80028f8:	f106 0018 	add.w	r0, r6, #24
 80028fc:	4902      	ldr	r1, [pc, #8]	; (8002908 <pend_locked+0x2c>)
}
 80028fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002902:	f000 ba85 	b.w	8002e10 <z_add_timeout>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	08003c4d 	.word	0x08003c4d

0800290c <k_sched_time_slice_set>:
{
 800290c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800290e:	f04f 0310 	mov.w	r3, #16
 8002912:	f3ef 8411 	mrs	r4, BASEPRI
 8002916:	f383 8812 	msr	BASEPRI_MAX, r3
 800291a:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800291e:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8002920:	2800      	cmp	r0, #0
 8002922:	fb00 f303 	mul.w	r3, r0, r3
 8002926:	dd02      	ble.n	800292e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8002928:	2b02      	cmp	r3, #2
 800292a:	bfb8      	it	lt
 800292c:	2302      	movlt	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 800292e:	4a06      	ldr	r2, [pc, #24]	; (8002948 <k_sched_time_slice_set+0x3c>)
 8002930:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <k_sched_time_slice_set+0x40>)
 8002934:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <k_sched_time_slice_set+0x44>)
 8002938:	6898      	ldr	r0, [r3, #8]
 800293a:	f7ff ff07 	bl	800274c <z_reset_time_slice>
	__asm__ volatile(
 800293e:	f384 8811 	msr	BASEPRI, r4
 8002942:	f3bf 8f6f 	isb	sy
}
 8002946:	bd10      	pop	{r4, pc}
 8002948:	200004bc 	.word	0x200004bc
 800294c:	200004b8 	.word	0x200004b8
 8002950:	20000494 	.word	0x20000494

08002954 <z_time_slice>:
{
 8002954:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8002956:	f04f 0310 	mov.w	r3, #16
 800295a:	f3ef 8511 	mrs	r5, BASEPRI
 800295e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002962:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <z_time_slice+0x6c>)
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <z_time_slice+0x70>)
 800296a:	689c      	ldr	r4, [r3, #8]
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	428c      	cmp	r4, r1
 8002970:	d107      	bne.n	8002982 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff feea 	bl	800274c <z_reset_time_slice>
	__asm__ volatile(
 8002978:	f385 8811 	msr	BASEPRI, r5
 800297c:	f3bf 8f6f 	isb	sy
}
 8002980:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002982:	2100      	movs	r1, #0
 8002984:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <z_time_slice+0x74>)
	if (slice_time(_current) && sliceable(_current)) {
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	2a00      	cmp	r2, #0
 800298c:	d0f4      	beq.n	8002978 <z_time_slice+0x24>
		&& !z_is_idle_thread_object(thread);
 800298e:	89e2      	ldrh	r2, [r4, #14]
 8002990:	2a7f      	cmp	r2, #127	; 0x7f
 8002992:	d8f1      	bhi.n	8002978 <z_time_slice+0x24>
		&& !z_is_thread_prevented_from_running(thread)
 8002994:	7b62      	ldrb	r2, [r4, #13]
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	d1ee      	bne.n	8002978 <z_time_slice+0x24>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <z_time_slice+0x78>)
 800299c:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	4291      	cmp	r1, r2
 80029a4:	dbe8      	blt.n	8002978 <z_time_slice+0x24>
		&& !z_is_idle_thread_object(thread);
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <z_time_slice+0x7c>)
 80029a8:	4294      	cmp	r4, r2
 80029aa:	d0e5      	beq.n	8002978 <z_time_slice+0x24>
		if (slice_expired[_current_cpu->id]) {
 80029ac:	7c1b      	ldrb	r3, [r3, #16]
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <z_time_slice+0x80>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0e0      	beq.n	8002978 <z_time_slice+0x24>
		move_thread_to_end_of_prio_q(curr);
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff ff0a 	bl	80027d0 <move_thread_to_end_of_prio_q>
 80029bc:	e7d9      	b.n	8002972 <z_time_slice+0x1e>
 80029be:	bf00      	nop
 80029c0:	20000494 	.word	0x20000494
 80029c4:	200004b4 	.word	0x200004b4
 80029c8:	200004bc 	.word	0x200004bc
 80029cc:	200004b8 	.word	0x200004b8
 80029d0:	20000278 	.word	0x20000278
 80029d4:	200004c6 	.word	0x200004c6

080029d8 <z_pend_curr>:
{
 80029d8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 80029da:	480c      	ldr	r0, [pc, #48]	; (8002a0c <z_pend_curr+0x34>)
 80029dc:	4d0c      	ldr	r5, [pc, #48]	; (8002a10 <z_pend_curr+0x38>)
 80029de:	6886      	ldr	r6, [r0, #8]
 80029e0:	602e      	str	r6, [r5, #0]
{
 80029e2:	460c      	mov	r4, r1
 80029e4:	4611      	mov	r1, r2
 80029e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 80029ea:	f04f 0610 	mov.w	r6, #16
 80029ee:	f3ef 8511 	mrs	r5, BASEPRI
 80029f2:	f386 8812 	msr	BASEPRI_MAX, r6
 80029f6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 80029fa:	6880      	ldr	r0, [r0, #8]
 80029fc:	f7ff ff6e 	bl	80028dc <pend_locked>
	ret = arch_swap(key);
 8002a00:	4620      	mov	r0, r4
}
 8002a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002a06:	f7fe ba41 	b.w	8000e8c <arch_swap>
 8002a0a:	bf00      	nop
 8002a0c:	20000494 	.word	0x20000494
 8002a10:	200004b4 	.word	0x200004b4

08002a14 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002a14:	b949      	cbnz	r1, 8002a2a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a16:	f3ef 8005 	mrs	r0, IPSR
 8002a1a:	b930      	cbnz	r0, 8002a2a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <z_reschedule+0x16>
 8002a26:	f7fe ba31 	b.w	8000e8c <arch_swap>
	__asm__ volatile(
 8002a2a:	f381 8811 	msr	BASEPRI, r1
 8002a2e:	f3bf 8f6f 	isb	sy
}
 8002a32:	4770      	bx	lr
 8002a34:	20000494 	.word	0x20000494

08002a38 <z_sched_start>:
{
 8002a38:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002a3a:	f04f 0210 	mov.w	r2, #16
 8002a3e:	f3ef 8411 	mrs	r4, BASEPRI
 8002a42:	f382 8812 	msr	BASEPRI_MAX, r2
 8002a46:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8002a4a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002a4c:	0751      	lsls	r1, r2, #29
 8002a4e:	d404      	bmi.n	8002a5a <z_sched_start+0x22>
	__asm__ volatile(
 8002a50:	f384 8811 	msr	BASEPRI, r4
 8002a54:	f3bf 8f6f 	isb	sy
}
 8002a58:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8002a60:	f7ff fef0 	bl	8002844 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002a64:	4621      	mov	r1, r4
 8002a66:	4802      	ldr	r0, [pc, #8]	; (8002a70 <z_sched_start+0x38>)
}
 8002a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002a6c:	f7ff bfd2 	b.w	8002a14 <z_reschedule>
 8002a70:	200004c7 	.word	0x200004c7

08002a74 <z_impl_k_thread_suspend>:
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002a78:	3018      	adds	r0, #24
 8002a7a:	f001 f945 	bl	8003d08 <z_abort_timeout>
	__asm__ volatile(
 8002a7e:	f04f 0310 	mov.w	r3, #16
 8002a82:	f3ef 8611 	mrs	r6, BASEPRI
 8002a86:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002a8e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8002a92:	7b63      	ldrb	r3, [r4, #13]
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	da05      	bge.n	8002aa4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f001 f856 	bl	8003b50 <sys_dlist_remove>
		update_cache(thread == _current);
 8002aa4:	4d0b      	ldr	r5, [pc, #44]	; (8002ad4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002aa6:	7b63      	ldrb	r3, [r4, #13]
 8002aa8:	68a8      	ldr	r0, [r5, #8]
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	7363      	strb	r3, [r4, #13]
 8002ab0:	1b03      	subs	r3, r0, r4
 8002ab2:	4258      	negs	r0, r3
 8002ab4:	4158      	adcs	r0, r3
 8002ab6:	f7ff fe6d 	bl	8002794 <update_cache>
	__asm__ volatile(
 8002aba:	f386 8811 	msr	BASEPRI, r6
 8002abe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002ac2:	68ab      	ldr	r3, [r5, #8]
 8002ac4:	42a3      	cmp	r3, r4
 8002ac6:	d103      	bne.n	8002ad0 <z_impl_k_thread_suspend+0x5c>
}
 8002ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002acc:	f001 b901 	b.w	8003cd2 <z_reschedule_unlocked>
}
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000494 	.word	0x20000494

08002ad8 <k_sched_lock>:
	__asm__ volatile(
 8002ad8:	f04f 0310 	mov.w	r3, #16
 8002adc:	f3ef 8111 	mrs	r1, BASEPRI
 8002ae0:	f383 8812 	msr	BASEPRI_MAX, r3
 8002ae4:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <k_sched_lock+0x24>)
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	7bd3      	ldrb	r3, [r2, #15]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8002af2:	f381 8811 	msr	BASEPRI, r1
 8002af6:	f3bf 8f6f 	isb	sy
}
 8002afa:	4770      	bx	lr
 8002afc:	20000494 	.word	0x20000494

08002b00 <k_sched_unlock>:
{
 8002b00:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002b02:	f04f 0310 	mov.w	r3, #16
 8002b06:	f3ef 8411 	mrs	r4, BASEPRI
 8002b0a:	f383 8812 	msr	BASEPRI_MAX, r3
 8002b0e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <k_sched_unlock+0x34>)
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	7bd3      	ldrb	r3, [r2, #15]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff fe39 	bl	8002794 <update_cache>
	__asm__ volatile(
 8002b22:	f384 8811 	msr	BASEPRI, r4
 8002b26:	f3bf 8f6f 	isb	sy
}
 8002b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002b2e:	f001 b8d0 	b.w	8003cd2 <z_reschedule_unlocked>
 8002b32:	bf00      	nop
 8002b34:	20000494 	.word	0x20000494

08002b38 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 8002b40:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002b44:	4608      	mov	r0, r1
 8002b46:	f7ff bee1 	b.w	800290c <k_sched_time_slice_set>
 8002b4a:	bf00      	nop
 8002b4c:	20000494 	.word	0x20000494

08002b50 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8002b52:	f04f 0310 	mov.w	r3, #16
 8002b56:	f3ef 8511 	mrs	r5, BASEPRI
 8002b5a:	f383 8812 	msr	BASEPRI_MAX, r3
 8002b5e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8002b62:	4919      	ldr	r1, [pc, #100]	; (8002bc8 <z_impl_k_yield+0x78>)
 8002b64:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002b66:	7b43      	ldrb	r3, [r0, #13]
 8002b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b6c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002b6e:	f000 ffef 	bl	8003b50 <sys_dlist_remove>
	}
	queue_thread(_current);
 8002b72:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8002b74:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8002b76:	4608      	mov	r0, r1
 8002b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b7c:	735a      	strb	r2, [r3, #13]
 8002b7e:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
 8002b82:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002b84:	4282      	cmp	r2, r0
 8002b86:	bf08      	it	eq
 8002b88:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002b8a:	b922      	cbnz	r2, 8002b96 <z_impl_k_yield+0x46>
	node->prev = tail;
 8002b8c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8002b90:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8002b92:	61cb      	str	r3, [r1, #28]
}
 8002b94:	e00c      	b.n	8002bb0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 8002b96:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8002b9a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8002b9e:	42be      	cmp	r6, r7
 8002ba0:	d00e      	beq.n	8002bc0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002ba2:	42b7      	cmp	r7, r6
 8002ba4:	dd0c      	ble.n	8002bc0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 8002ba6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002ba8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8002bac:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8002bae:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff fdef 	bl	8002794 <update_cache>
 8002bb6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8002bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002bbc:	f7fe b966 	b.w	8000e8c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8002bc0:	42a2      	cmp	r2, r4
 8002bc2:	d0e3      	beq.n	8002b8c <z_impl_k_yield+0x3c>
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	e7e0      	b.n	8002b8a <z_impl_k_yield+0x3a>
 8002bc8:	20000494 	.word	0x20000494

08002bcc <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8002bcc:	ea50 0301 	orrs.w	r3, r0, r1
{
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	460e      	mov	r6, r1
	if (ticks == 0) {
 8002bd8:	d103      	bne.n	8002be2 <z_tick_sleep+0x16>
	z_impl_k_yield();
 8002bda:	f7ff ffb9 	bl	8002b50 <z_impl_k_yield>
		k_yield();
		return 0;
 8002bde:	2000      	movs	r0, #0
 8002be0:	e02c      	b.n	8002c3c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 8002be2:	1c83      	adds	r3, r0, #2
 8002be4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 8002be8:	db2a      	blt.n	8002c40 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8002bea:	f001 f8a3 	bl	8003d34 <sys_clock_tick_get_32>
 8002bee:	182c      	adds	r4, r5, r0
 8002bf0:	f04f 0310 	mov.w	r3, #16
 8002bf4:	f3ef 8811 	mrs	r8, BASEPRI
 8002bf8:	f383 8812 	msr	BASEPRI_MAX, r3
 8002bfc:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8002c00:	4f11      	ldr	r7, [pc, #68]	; (8002c48 <z_tick_sleep+0x7c>)
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <z_tick_sleep+0x80>)
 8002c04:	68b8      	ldr	r0, [r7, #8]
 8002c06:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8002c08:	f7ff fe50 	bl	80028ac <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8002c0c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002c0e:	4910      	ldr	r1, [pc, #64]	; (8002c50 <z_tick_sleep+0x84>)
 8002c10:	462a      	mov	r2, r5
 8002c12:	4633      	mov	r3, r6
 8002c14:	3018      	adds	r0, #24
 8002c16:	f000 f8fb 	bl	8002e10 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002c1a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002c1c:	7b53      	ldrb	r3, [r2, #13]
 8002c1e:	f043 0310 	orr.w	r3, r3, #16
 8002c22:	7353      	strb	r3, [r2, #13]
 8002c24:	4640      	mov	r0, r8
 8002c26:	f7fe f931 	bl	8000e8c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8002c2a:	f001 f883 	bl	8003d34 <sys_clock_tick_get_32>
 8002c2e:	1a20      	subs	r0, r4, r0
 8002c30:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8002c34:	2801      	cmp	r0, #1
 8002c36:	f173 0300 	sbcs.w	r3, r3, #0
 8002c3a:	dbd0      	blt.n	8002bde <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 8002c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8002c40:	f06f 0401 	mvn.w	r4, #1
 8002c44:	1a24      	subs	r4, r4, r0
 8002c46:	e7d3      	b.n	8002bf0 <z_tick_sleep+0x24>
 8002c48:	20000494 	.word	0x20000494
 8002c4c:	200004b4 	.word	0x200004b4
 8002c50:	08003c4d 	.word	0x08003c4d

08002c54 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002c54:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002c58:	bf08      	it	eq
 8002c5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002c5e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002c60:	d106      	bne.n	8002c70 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <z_impl_k_sleep+0x2c>)
 8002c64:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8002c66:	f7ff ff05 	bl	8002a74 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8002c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8002c6e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002c70:	f7ff ffac 	bl	8002bcc <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002c74:	220a      	movs	r2, #10
 8002c76:	2300      	movs	r3, #0
 8002c78:	17c1      	asrs	r1, r0, #31
 8002c7a:	f7fd fa8b 	bl	8000194 <__aeabi_uldivmod>
	return ret;
 8002c7e:	e7f6      	b.n	8002c6e <z_impl_k_sleep+0x1a>
 8002c80:	20000494 	.word	0x20000494

08002c84 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002c84:	4b01      	ldr	r3, [pc, #4]	; (8002c8c <z_impl_z_current_get+0x8>)
 8002c86:	6898      	ldr	r0, [r3, #8]
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000494 	.word	0x20000494

08002c90 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c94:	4604      	mov	r4, r0
 8002c96:	f04f 0310 	mov.w	r3, #16
 8002c9a:	f3ef 8611 	mrs	r6, BASEPRI
 8002c9e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002ca2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8002ca6:	7b03      	ldrb	r3, [r0, #12]
 8002ca8:	07d9      	lsls	r1, r3, #31
 8002caa:	d50b      	bpl.n	8002cc4 <z_thread_abort+0x34>
	__asm__ volatile(
 8002cac:	f386 8811 	msr	BASEPRI, r6
 8002cb0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8002cb4:	4040      	eors	r0, r0
 8002cb6:	f380 8811 	msr	BASEPRI, r0
 8002cba:	f04f 0004 	mov.w	r0, #4
 8002cbe:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8002cc4:	7b43      	ldrb	r3, [r0, #13]
 8002cc6:	071a      	lsls	r2, r3, #28
 8002cc8:	d504      	bpl.n	8002cd4 <z_thread_abort+0x44>
 8002cca:	f386 8811 	msr	BASEPRI, r6
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	e7f5      	b.n	8002cc0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002cd4:	f023 0220 	bic.w	r2, r3, #32
 8002cd8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8002cdc:	09d2      	lsrs	r2, r2, #7
 8002cde:	d120      	bne.n	8002d22 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002ce0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8002ce2:	68a3      	ldr	r3, [r4, #8]
 8002ce4:	b113      	cbz	r3, 8002cec <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f000 ff3a 	bl	8003b60 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8002cec:	f104 0018 	add.w	r0, r4, #24
 8002cf0:	f001 f80a 	bl	8003d08 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002cf4:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8002cf8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8002cfc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002cfe:	42bd      	cmp	r5, r7
 8002d00:	d000      	beq.n	8002d04 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8002d02:	b9b5      	cbnz	r5, 8002d32 <z_thread_abort+0xa2>
		update_cache(1);
 8002d04:	2001      	movs	r0, #1
 8002d06:	f7ff fd45 	bl	8002794 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <z_thread_abort+0xbc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	42a3      	cmp	r3, r4
 8002d10:	d1db      	bne.n	8002cca <z_thread_abort+0x3a>
 8002d12:	f3ef 8305 	mrs	r3, IPSR
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1d7      	bne.n	8002cca <z_thread_abort+0x3a>
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	f7fe f8b6 	bl	8000e8c <arch_swap>
	return ret;
 8002d20:	e7d3      	b.n	8002cca <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002d22:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002d2c:	f000 ff10 	bl	8003b50 <sys_dlist_remove>
}
 8002d30:	e7d7      	b.n	8002ce2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002d32:	4628      	mov	r0, r5
 8002d34:	f000 ff14 	bl	8003b60 <unpend_thread_no_timeout>
 8002d38:	f105 0018 	add.w	r0, r5, #24
 8002d3c:	f000 ffe4 	bl	8003d08 <z_abort_timeout>
 8002d40:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8002d44:	4628      	mov	r0, r5
 8002d46:	f7ff fd7d 	bl	8002844 <ready_thread>
 8002d4a:	e7d7      	b.n	8002cfc <z_thread_abort+0x6c>
 8002d4c:	20000494 	.word	0x20000494

08002d50 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8002d50:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002d54:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <z_data_copy+0x20>)
 8002d56:	4907      	ldr	r1, [pc, #28]	; (8002d74 <z_data_copy+0x24>)
 8002d58:	1a12      	subs	r2, r2, r0
 8002d5a:	f000 feeb 	bl	8003b34 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8002d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <z_data_copy+0x28>)
 8002d64:	4905      	ldr	r1, [pc, #20]	; (8002d7c <z_data_copy+0x2c>)
 8002d66:	4806      	ldr	r0, [pc, #24]	; (8002d80 <z_data_copy+0x30>)
 8002d68:	f000 bee4 	b.w	8003b34 <z_early_memcpy>
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000274 	.word	0x20000274
 8002d74:	080048a4 	.word	0x080048a4
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	080048a4 	.word	0x080048a4
 8002d80:	20000000 	.word	0x20000000

08002d84 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <elapsed+0x10>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b90b      	cbnz	r3, 8002d8e <elapsed+0xa>
 8002d8a:	f7ff ba97 	b.w	80022bc <sys_clock_elapsed>
}
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200004c0 	.word	0x200004c0

08002d98 <next_timeout>:

static int32_t next_timeout(void)
{
 8002d98:	b510      	push	{r4, lr}
	return list->head == list;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <next_timeout+0x3c>)
 8002d9c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	d104      	bne.n	8002dac <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002da2:	f7ff ffef 	bl	8002d84 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8002da6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
 8002daa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8002dac:	f7ff ffea 	bl	8002d84 <elapsed>
	if ((to == NULL) ||
 8002db0:	2c00      	cmp	r4, #0
 8002db2:	d0f8      	beq.n	8002da6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8002db4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002db8:	1a1b      	subs	r3, r3, r0
 8002dba:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8002dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc2:	f172 0100 	sbcs.w	r1, r2, #0
 8002dc6:	daee      	bge.n	8002da6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	bfac      	ite	ge
 8002dcc:	4618      	movge	r0, r3
 8002dce:	2000      	movlt	r0, #0
	return ret;
 8002dd0:	e7eb      	b.n	8002daa <next_timeout+0x12>
 8002dd2:	bf00      	nop
 8002dd4:	20000240 	.word	0x20000240

08002dd8 <remove_timeout>:
{
 8002dd8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002dda:	b170      	cbz	r0, 8002dfa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <remove_timeout+0x34>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4298      	cmp	r0, r3
 8002de2:	d00a      	beq.n	8002dfa <remove_timeout+0x22>
 8002de4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8002de6:	b143      	cbz	r3, 8002dfa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002de8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002dec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002df0:	1912      	adds	r2, r2, r4
 8002df2:	eb41 0105 	adc.w	r1, r1, r5
 8002df6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8002dfa:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8002dfe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002e00:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002e02:	2300      	movs	r3, #0
	node->prev = NULL;
 8002e04:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002e08:	bd30      	pop	{r4, r5, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000240 	.word	0x20000240

08002e10 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	bf08      	it	eq
 8002e16:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8002e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002e22:	d05c      	beq.n	8002ede <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002e24:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8002e26:	f04f 0310 	mov.w	r3, #16
 8002e2a:	f3ef 8711 	mrs	r7, BASEPRI
 8002e2e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002e32:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8002e36:	3201      	adds	r2, #1
 8002e38:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8002e3c:	da24      	bge.n	8002e88 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8002e3e:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <z_add_timeout+0xe4>)
 8002e40:	e9d1 2000 	ldrd	r2, r0, [r1]
 8002e44:	f06f 0301 	mvn.w	r3, #1
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e4e:	eb62 0000 	sbc.w	r0, r2, r0
 8002e52:	1b9e      	subs	r6, r3, r6
 8002e54:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8002e58:	2e01      	cmp	r6, #1
 8002e5a:	f170 0300 	sbcs.w	r3, r0, #0
 8002e5e:	da01      	bge.n	8002e64 <z_add_timeout+0x54>
 8002e60:	2601      	movs	r6, #1
 8002e62:	2000      	movs	r0, #0
 8002e64:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8002e68:	4e23      	ldr	r6, [pc, #140]	; (8002ef8 <z_add_timeout+0xe8>)
 8002e6a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8002e6e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002e70:	45b4      	cmp	ip, r6
 8002e72:	bf08      	it	eq
 8002e74:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8002e78:	f1bc 0f00 	cmp.w	ip, #0
 8002e7c:	d10d      	bne.n	8002e9a <z_add_timeout+0x8a>
	node->prev = tail;
 8002e7e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8002e82:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8002e84:	6074      	str	r4, [r6, #4]
}
 8002e86:	e01c      	b.n	8002ec2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8002e88:	f7ff ff7c 	bl	8002d84 <elapsed>
 8002e8c:	3601      	adds	r6, #1
 8002e8e:	f145 0500 	adc.w	r5, r5, #0
 8002e92:	1836      	adds	r6, r6, r0
 8002e94:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8002e98:	e7e4      	b.n	8002e64 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8002e9a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8002e9e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	eb71 0e00 	sbcs.w	lr, r1, r0
 8002ea8:	da1a      	bge.n	8002ee0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
 8002eaa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8002eac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002eb0:	eb60 0001 	sbc.w	r0, r0, r1
 8002eb4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8002eb8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8002ebc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8002ebe:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8002ec2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002ec4:	42b3      	cmp	r3, r6
 8002ec6:	d006      	beq.n	8002ed6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	d104      	bne.n	8002ed6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
 8002ecc:	f7ff ff64 	bl	8002d98 <next_timeout>
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f7ff f983 	bl	80021dc <sys_clock_set_timeout>
	__asm__ volatile(
 8002ed6:	f387 8811 	msr	BASEPRI, r7
 8002eda:	f3bf 8f6f 	isb	sy
		}
	}
}
 8002ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8002ee6:	45ac      	cmp	ip, r5
 8002ee8:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8002eec:	d0c7      	beq.n	8002e7e <z_add_timeout+0x6e>
 8002eee:	f8dc c000 	ldr.w	ip, [ip]
 8002ef2:	e7c1      	b.n	8002e78 <z_add_timeout+0x68>
 8002ef4:	20000390 	.word	0x20000390
 8002ef8:	20000240 	.word	0x20000240

08002efc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 8002efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 8002f00:	f04f 0310 	mov.w	r3, #16
 8002f04:	f3ef 8c11 	mrs	ip, BASEPRI
 8002f08:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f0c:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8002f10:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002fc4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8002f14:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002fc8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
 8002f18:	4f2c      	ldr	r7, [pc, #176]	; (8002fcc <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
 8002f1a:	f8c9 0000 	str.w	r0, [r9]
 8002f1e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
 8002f22:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002f24:	4550      	cmp	r0, sl
 8002f26:	bf08      	it	eq
 8002f28:	2000      	moveq	r0, #0
 8002f2a:	2500      	movs	r5, #0
		curr_tick += dt;
 8002f2c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 8002f30:	f8d9 3000 	ldr.w	r3, [r9]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 8002f34:	46e0      	mov	r8, ip
 8002f36:	b380      	cbz	r0, 8002f9a <sys_clock_announce+0x9e>
 8002f38:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 8002f3c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8002f40:	42b3      	cmp	r3, r6
 8002f42:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 8002f46:	da05      	bge.n	8002f54 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8002f48:	1af6      	subs	r6, r6, r3
 8002f4a:	eb6c 040e 	sbc.w	r4, ip, lr
 8002f4e:	e9c0 6404 	strd	r6, r4, [r0, #16]
 8002f52:	e022      	b.n	8002f9a <sys_clock_announce+0x9e>
		curr_tick += dt;
 8002f54:	18b2      	adds	r2, r6, r2
 8002f56:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 8002f5a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 8002f5e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 8002f62:	f7ff ff39 	bl	8002dd8 <remove_timeout>
	__asm__ volatile(
 8002f66:	f388 8811 	msr	BASEPRI, r8
 8002f6a:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002f6e:	6883      	ldr	r3, [r0, #8]
 8002f70:	4798      	blx	r3
	__asm__ volatile(
 8002f72:	f04f 0310 	mov.w	r3, #16
 8002f76:	f3ef 8811 	mrs	r8, BASEPRI
 8002f7a:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f7e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8002f82:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 8002f86:	f8da 0000 	ldr.w	r0, [sl]
 8002f8a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002f8c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
 8002f8e:	46c4      	mov	ip, r8
 8002f90:	f8c9 3000 	str.w	r3, [r9]
 8002f94:	d1ca      	bne.n	8002f2c <sys_clock_announce+0x30>
		curr_tick += dt;
 8002f96:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
 8002f9a:	189a      	adds	r2, r3, r2
 8002f9c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
 8002fa0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8002fa2:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
 8002fa6:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
 8002faa:	f7ff fef5 	bl	8002d98 <next_timeout>
 8002fae:	4621      	mov	r1, r4
 8002fb0:	f7ff f914 	bl	80021dc <sys_clock_set_timeout>
	__asm__ volatile(
 8002fb4:	f388 8811 	msr	BASEPRI, r8
 8002fb8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8002fbc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8002fc0:	f7ff bcc8 	b.w	8002954 <z_time_slice>
 8002fc4:	20000240 	.word	0x20000240
 8002fc8:	200004c0 	.word	0x200004c0
 8002fcc:	20000390 	.word	0x20000390

08002fd0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8002fd0:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002fd2:	f04f 0310 	mov.w	r3, #16
 8002fd6:	f3ef 8411 	mrs	r4, BASEPRI
 8002fda:	f383 8812 	msr	BASEPRI_MAX, r3
 8002fde:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8002fe2:	f7ff fecf 	bl	8002d84 <elapsed>
 8002fe6:	4a06      	ldr	r2, [pc, #24]	; (8003000 <sys_clock_tick_get+0x30>)
 8002fe8:	4603      	mov	r3, r0
 8002fea:	e9d2 0100 	ldrd	r0, r1, [r2]
 8002fee:	1818      	adds	r0, r3, r0
 8002ff0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8002ff4:	f384 8811 	msr	BASEPRI, r4
 8002ff8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002ffc:	bd10      	pop	{r4, pc}
 8002ffe:	bf00      	nop
 8003000:	20000390 	.word	0x20000390

08003004 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8003004:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8003006:	4604      	mov	r4, r0
 8003008:	b178      	cbz	r0, 800302a <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800300a:	f7ff f975 	bl	80022f8 <sys_clock_cycle_get_32>
 800300e:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <z_impl_k_busy_wait+0x2c>)
 8003014:	fba4 0100 	umull	r0, r1, r4, r0
 8003018:	2300      	movs	r3, #0
 800301a:	f7fd f8bb 	bl	8000194 <__aeabi_uldivmod>
 800301e:	4604      	mov	r4, r0
 8003020:	f7ff f96a 	bl	80022f8 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8003024:	1b43      	subs	r3, r0, r5
 8003026:	42a3      	cmp	r3, r4
 8003028:	d3fa      	bcc.n	8003020 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	044aa200 	.word	0x044aa200
 8003030:	000f4240 	.word	0x000f4240

08003034 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	4604      	mov	r4, r0
	__asm__ volatile(
 8003038:	f04f 0310 	mov.w	r3, #16
 800303c:	f3ef 8711 	mrs	r7, BASEPRI
 8003040:	f383 8812 	msr	BASEPRI_MAX, r3
 8003044:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
 8003048:	6802      	ldr	r2, [r0, #0]
 800304a:	b122      	cbz	r2, 8003056 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
 800304c:	f387 8811 	msr	BASEPRI, r7
 8003050:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8003054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8003056:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
 800305a:	1c58      	adds	r0, r3, #1
 800305c:	f146 0100 	adc.w	r1, r6, #0
 8003060:	2802      	cmp	r0, #2
 8003062:	f171 0100 	sbcs.w	r1, r1, #0
 8003066:	d327      	bcc.n	80030b8 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
 8003068:	2b01      	cmp	r3, #1
 800306a:	f176 0100 	sbcs.w	r1, r6, #0
 800306e:	bfbc      	itt	lt
 8003070:	2301      	movlt	r3, #1
 8003072:	4616      	movlt	r6, r2
 8003074:	1e5d      	subs	r5, r3, #1
 8003076:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
 800307a:	f000 fe5f 	bl	8003d3c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 800307e:	3001      	adds	r0, #1
 8003080:	f141 0100 	adc.w	r1, r1, #0
 8003084:	1940      	adds	r0, r0, r5
 8003086:	eb46 0101 	adc.w	r1, r6, r1
 800308a:	2801      	cmp	r0, #1
 800308c:	f171 0100 	sbcs.w	r1, r1, #0
 8003090:	db3a      	blt.n	8003108 <z_timer_expiration_handler+0xd4>
 8003092:	f000 fe53 	bl	8003d3c <z_impl_k_uptime_ticks>
 8003096:	3001      	adds	r0, #1
 8003098:	f141 0100 	adc.w	r1, r1, #0
 800309c:	f06f 0201 	mvn.w	r2, #1
 80030a0:	1940      	adds	r0, r0, r5
 80030a2:	eb46 0301 	adc.w	r3, r6, r1
 80030a6:	1a12      	subs	r2, r2, r0
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030ac:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80030b0:	4918      	ldr	r1, [pc, #96]	; (8003114 <z_timer_expiration_handler+0xe0>)
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff feac 	bl	8002e10 <z_add_timeout>
	timer->status += 1U;
 80030b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030ba:	3301      	adds	r3, #1
 80030bc:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 80030be:	6a23      	ldr	r3, [r4, #32]
 80030c0:	b173      	cbz	r3, 80030e0 <z_timer_expiration_handler+0xac>
 80030c2:	f387 8811 	msr	BASEPRI, r7
 80030c6:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
 80030ca:	6a23      	ldr	r3, [r4, #32]
 80030cc:	4620      	mov	r0, r4
 80030ce:	4798      	blx	r3
	__asm__ volatile(
 80030d0:	f04f 0310 	mov.w	r3, #16
 80030d4:	f3ef 8711 	mrs	r7, BASEPRI
 80030d8:	f383 8812 	msr	BASEPRI_MAX, r3
 80030dc:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80030e0:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80030e4:	42a5      	cmp	r5, r4
 80030e6:	d0b1      	beq.n	800304c <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
 80030e8:	2d00      	cmp	r5, #0
 80030ea:	d0af      	beq.n	800304c <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
 80030ec:	4628      	mov	r0, r5
 80030ee:	f000 fd79 	bl	8003be4 <z_unpend_thread_no_timeout>
 80030f2:	2300      	movs	r3, #0
 80030f4:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
 80030f6:	f387 8811 	msr	BASEPRI, r7
 80030fa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 80030fe:	4628      	mov	r0, r5
}
 8003100:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
 8003104:	f000 bd5e 	b.w	8003bc4 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 8003108:	f06f 0201 	mvn.w	r2, #1
 800310c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003110:	e7ce      	b.n	80030b0 <z_timer_expiration_handler+0x7c>
 8003112:	bf00      	nop
 8003114:	08003035 	.word	0x08003035

08003118 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8003118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003120:	bf08      	it	eq
 8003122:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8003126:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800312a:	4605      	mov	r5, r0
 800312c:	461c      	mov	r4, r3
 800312e:	4691      	mov	r9, r2
 8003130:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8003132:	d01c      	beq.n	800316e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8003134:	1c53      	adds	r3, r2, #1
 8003136:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
 800313a:	db09      	blt.n	8003150 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800313c:	2a01      	cmp	r2, #1
 800313e:	f174 0300 	sbcs.w	r3, r4, #0
 8003142:	bfbc      	itt	lt
 8003144:	2201      	movlt	r2, #1
 8003146:	2400      	movlt	r4, #0
 8003148:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 800314c:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
 8003150:	4628      	mov	r0, r5
 8003152:	f000 fdd9 	bl	8003d08 <z_abort_timeout>
	timer->period = period;
 8003156:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800315e:	464a      	mov	r2, r9
 8003160:	4643      	mov	r3, r8
 8003162:	4628      	mov	r0, r5
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <z_impl_k_timer_start+0x5c>)
		     duration);
}
 8003166:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800316a:	f7ff be51 	b.w	8002e10 <z_add_timeout>
}
 800316e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003172:	bf00      	nop
 8003174:	08003035 	.word	0x08003035

08003178 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <boot_banner+0x8>)
 800317a:	f000 b806 	b.w	800318a <printk>
 800317e:	bf00      	nop
 8003180:	08004861 	.word	0x08004861

08003184 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8003184:	4770      	bx	lr

08003186 <arch_printk_char_out>:
}
 8003186:	2000      	movs	r0, #0
 8003188:	4770      	bx	lr

0800318a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 800318a:	b40f      	push	{r0, r1, r2, r3}
 800318c:	b507      	push	{r0, r1, r2, lr}
 800318e:	a904      	add	r1, sp, #16
 8003190:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8003194:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8003196:	f7fd fa3b 	bl	8000610 <vprintk>

	va_end(ap);
}
 800319a:	b003      	add	sp, #12
 800319c:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a0:	b004      	add	sp, #16
 80031a2:	4770      	bx	lr

080031a4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80031a4:	4604      	mov	r4, r0
 80031a6:	b508      	push	{r3, lr}
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80031ac:	461a      	mov	r2, r3
 80031ae:	47a0      	blx	r4
	return z_impl_z_current_get();
 80031b0:	f7ff fd68 	bl	8002c84 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80031b4:	f7fe f89a 	bl	80012ec <z_impl_k_thread_abort>

080031b8 <encode_uint>:
{
 80031b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031bc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80031be:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 80031c0:	2b6f      	cmp	r3, #111	; 0x6f
{
 80031c2:	4680      	mov	r8, r0
 80031c4:	460f      	mov	r7, r1
 80031c6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80031c8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 80031cc:	d029      	beq.n	8003222 <encode_uint+0x6a>
 80031ce:	d824      	bhi.n	800321a <encode_uint+0x62>
		return 10;
 80031d0:	2b58      	cmp	r3, #88	; 0x58
 80031d2:	bf0c      	ite	eq
 80031d4:	2610      	moveq	r6, #16
 80031d6:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 80031d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80031dc:	4632      	mov	r2, r6
 80031de:	2300      	movs	r3, #0
 80031e0:	4640      	mov	r0, r8
 80031e2:	4639      	mov	r1, r7
 80031e4:	f7fc ffd6 	bl	8000194 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80031e8:	2a09      	cmp	r2, #9
 80031ea:	b2d4      	uxtb	r4, r2
 80031ec:	d81e      	bhi.n	800322c <encode_uint+0x74>
 80031ee:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80031f0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80031f2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80031f4:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80031f8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80031fc:	d301      	bcc.n	8003202 <encode_uint+0x4a>
 80031fe:	45d1      	cmp	r9, sl
 8003200:	d811      	bhi.n	8003226 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8003202:	782b      	ldrb	r3, [r5, #0]
 8003204:	069b      	lsls	r3, r3, #26
 8003206:	d505      	bpl.n	8003214 <encode_uint+0x5c>
		if (radix == 8) {
 8003208:	2e08      	cmp	r6, #8
 800320a:	d115      	bne.n	8003238 <encode_uint+0x80>
			conv->altform_0 = true;
 800320c:	78ab      	ldrb	r3, [r5, #2]
 800320e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8003212:	70ab      	strb	r3, [r5, #2]
}
 8003214:	4648      	mov	r0, r9
 8003216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 800321a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 800321e:	2b70      	cmp	r3, #112	; 0x70
 8003220:	e7d7      	b.n	80031d2 <encode_uint+0x1a>
	switch (specifier) {
 8003222:	2608      	movs	r6, #8
 8003224:	e7d8      	b.n	80031d8 <encode_uint+0x20>
		value /= radix;
 8003226:	4680      	mov	r8, r0
 8003228:	460f      	mov	r7, r1
 800322a:	e7d7      	b.n	80031dc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800322c:	f1bb 0f19 	cmp.w	fp, #25
 8003230:	bf94      	ite	ls
 8003232:	3437      	addls	r4, #55	; 0x37
 8003234:	3457      	addhi	r4, #87	; 0x57
 8003236:	e7db      	b.n	80031f0 <encode_uint+0x38>
		} else if (radix == 16) {
 8003238:	2e10      	cmp	r6, #16
 800323a:	d1eb      	bne.n	8003214 <encode_uint+0x5c>
			conv->altform_0c = true;
 800323c:	78ab      	ldrb	r3, [r5, #2]
 800323e:	f043 0310 	orr.w	r3, r3, #16
 8003242:	e7e6      	b.n	8003212 <encode_uint+0x5a>

08003244 <outs>:
{
 8003244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003248:	4607      	mov	r7, r0
 800324a:	4688      	mov	r8, r1
 800324c:	4615      	mov	r5, r2
 800324e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8003250:	4614      	mov	r4, r2
 8003252:	42b4      	cmp	r4, r6
 8003254:	d305      	bcc.n	8003262 <outs+0x1e>
 8003256:	b10e      	cbz	r6, 800325c <outs+0x18>
	return (int)count;
 8003258:	1b60      	subs	r0, r4, r5
 800325a:	e008      	b.n	800326e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800325c:	7823      	ldrb	r3, [r4, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0fa      	beq.n	8003258 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8003262:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003266:	4641      	mov	r1, r8
 8003268:	47b8      	blx	r7
		if (rc < 0) {
 800326a:	2800      	cmp	r0, #0
 800326c:	daf1      	bge.n	8003252 <outs+0xe>
}
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003272 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8003272:	4770      	bx	lr

08003274 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8003274:	2000      	movs	r0, #0
 8003276:	4770      	bx	lr

08003278 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003278:	f000 bc3f 	b.w	8003afa <z_fatal_error>

0800327c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 800327c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 800327e:	6800      	ldr	r0, [r0, #0]
 8003280:	f000 bc3b 	b.w	8003afa <z_fatal_error>

08003284 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003284:	2100      	movs	r1, #0
 8003286:	2001      	movs	r0, #1
 8003288:	f7ff bff6 	b.w	8003278 <z_arm_fatal_error>

0800328c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800328c:	b508      	push	{r3, lr}
	handler();
 800328e:	f7fd fdd5 	bl	8000e3c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8003292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003296:	f7fd bea9 	b.w	8000fec <z_arm_exc_exit>

0800329a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 800329a:	4603      	mov	r3, r0
	size_t n = 0;
 800329c:	2000      	movs	r0, #0

	while (*s != '\0') {
 800329e:	5c1a      	ldrb	r2, [r3, r0]
 80032a0:	b902      	cbnz	r2, 80032a4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 80032a2:	4770      	bx	lr
		n++;
 80032a4:	3001      	adds	r0, #1
 80032a6:	e7fa      	b.n	800329e <strlen+0x4>

080032a8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 80032a8:	4603      	mov	r3, r0
	size_t n = 0;
 80032aa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 80032ac:	5c1a      	ldrb	r2, [r3, r0]
 80032ae:	b10a      	cbz	r2, 80032b4 <strnlen+0xc>
 80032b0:	4288      	cmp	r0, r1
 80032b2:	d100      	bne.n	80032b6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 80032b4:	4770      	bx	lr
		n++;
 80032b6:	3001      	adds	r0, #1
 80032b8:	e7f8      	b.n	80032ac <strnlen+0x4>

080032ba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 80032ba:	b510      	push	{r4, lr}
 80032bc:	1e43      	subs	r3, r0, #1
 80032be:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 80032c0:	4291      	cmp	r1, r2
 80032c2:	d100      	bne.n	80032c6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 80032c4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 80032c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 80032ce:	e7f7      	b.n	80032c0 <memcpy+0x6>

080032d0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80032d0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 80032d2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 80032d4:	4603      	mov	r3, r0
	while (n > 0) {
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d100      	bne.n	80032dc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 80032da:	4770      	bx	lr
		*(d_byte++) = c_byte;
 80032dc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80032e0:	e7f9      	b.n	80032d6 <memset+0x6>

080032e2 <_stdout_hook_default>:
}
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032e6:	4770      	bx	lr

080032e8 <stm32_exti_init>:
{
 80032e8:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 80032ea:	2206      	movs	r2, #6
 80032ec:	2101      	movs	r1, #1
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7fe f904 	bl	80014fc <stm32_fill_irq_table>
 80032f4:	2200      	movs	r2, #0
 80032f6:	4611      	mov	r1, r2
 80032f8:	2006      	movs	r0, #6
 80032fa:	f7fd fd87 	bl	8000e0c <z_arm_irq_priority_set>
 80032fe:	2101      	movs	r1, #1
 8003300:	4608      	mov	r0, r1
 8003302:	2207      	movs	r2, #7
 8003304:	f7fe f8fa 	bl	80014fc <stm32_fill_irq_table>
 8003308:	2200      	movs	r2, #0
 800330a:	4611      	mov	r1, r2
 800330c:	2007      	movs	r0, #7
 800330e:	f7fd fd7d 	bl	8000e0c <z_arm_irq_priority_set>
 8003312:	2208      	movs	r2, #8
 8003314:	2101      	movs	r1, #1
 8003316:	2002      	movs	r0, #2
 8003318:	f7fe f8f0 	bl	80014fc <stm32_fill_irq_table>
 800331c:	2200      	movs	r2, #0
 800331e:	4611      	mov	r1, r2
 8003320:	2008      	movs	r0, #8
 8003322:	f7fd fd73 	bl	8000e0c <z_arm_irq_priority_set>
 8003326:	2209      	movs	r2, #9
 8003328:	2101      	movs	r1, #1
 800332a:	2003      	movs	r0, #3
 800332c:	f7fe f8e6 	bl	80014fc <stm32_fill_irq_table>
 8003330:	2200      	movs	r2, #0
 8003332:	4611      	mov	r1, r2
 8003334:	2009      	movs	r0, #9
 8003336:	f7fd fd69 	bl	8000e0c <z_arm_irq_priority_set>
 800333a:	220a      	movs	r2, #10
 800333c:	2101      	movs	r1, #1
 800333e:	2004      	movs	r0, #4
 8003340:	f7fe f8dc 	bl	80014fc <stm32_fill_irq_table>
 8003344:	2200      	movs	r2, #0
 8003346:	4611      	mov	r1, r2
 8003348:	200a      	movs	r0, #10
 800334a:	f7fd fd5f 	bl	8000e0c <z_arm_irq_priority_set>
 800334e:	2105      	movs	r1, #5
 8003350:	4608      	mov	r0, r1
 8003352:	2217      	movs	r2, #23
 8003354:	f7fe f8d2 	bl	80014fc <stm32_fill_irq_table>
 8003358:	2200      	movs	r2, #0
 800335a:	4611      	mov	r1, r2
 800335c:	2017      	movs	r0, #23
 800335e:	f7fd fd55 	bl	8000e0c <z_arm_irq_priority_set>
 8003362:	2228      	movs	r2, #40	; 0x28
 8003364:	2106      	movs	r1, #6
 8003366:	200a      	movs	r0, #10
 8003368:	f7fe f8c8 	bl	80014fc <stm32_fill_irq_table>
 800336c:	2200      	movs	r2, #0
 800336e:	4611      	mov	r1, r2
 8003370:	2028      	movs	r0, #40	; 0x28
 8003372:	f7fd fd4b 	bl	8000e0c <z_arm_irq_priority_set>
}
 8003376:	2000      	movs	r0, #0
 8003378:	bd08      	pop	{r3, pc}

0800337a <adc_stm32_enable>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800337a:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_IsEnabled(adc) == 1UL) {
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d407      	bmi.n	8003390 <adc_stm32_enable+0x16>
  MODIFY_REG(ADCx->CR,
 8003380:	6883      	ldr	r3, [r0, #8]
 8003382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6083      	str	r3, [r0, #8]
}
 8003390:	2000      	movs	r0, #0
 8003392:	4770      	bx	lr

08003394 <adc_stm32_cfg_func_0>:
		    &adc_stm32_init, NULL,				\
		    &adc_stm32_data_##index, &adc_stm32_cfg_##index,	\
		    POST_KERNEL, CONFIG_ADC_INIT_PRIORITY,		\
		    &api_stm32_driver_api);

DT_INST_FOREACH_STATUS_OKAY(ADC_STM32_INIT)
 8003394:	b508      	push	{r3, lr}
 8003396:	2200      	movs	r2, #0
 8003398:	2012      	movs	r0, #18
 800339a:	4611      	mov	r1, r2
 800339c:	f7fd fd36 	bl	8000e0c <z_arm_irq_priority_set>
 80033a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033a4:	2012      	movs	r0, #18
 80033a6:	f7fd bd23 	b.w	8000df0 <arch_irq_enable>

080033aa <adc_stm32_cfg_func_1>:
 80033aa:	b508      	push	{r3, lr}
 80033ac:	2200      	movs	r2, #0
 80033ae:	202f      	movs	r0, #47	; 0x2f
 80033b0:	4611      	mov	r1, r2
 80033b2:	f7fd fd2b 	bl	8000e0c <z_arm_irq_priority_set>
 80033b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033ba:	202f      	movs	r0, #47	; 0x2f
 80033bc:	f7fd bd18 	b.w	8000df0 <arch_irq_enable>

080033c0 <adc_stm32_cfg_func_2>:
 80033c0:	b508      	push	{r3, lr}
 80033c2:	2200      	movs	r2, #0
 80033c4:	203d      	movs	r0, #61	; 0x3d
 80033c6:	4611      	mov	r1, r2
 80033c8:	f7fd fd20 	bl	8000e0c <z_arm_irq_priority_set>
 80033cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033d0:	203d      	movs	r0, #61	; 0x3d
 80033d2:	f7fd bd0d 	b.w	8000df0 <arch_irq_enable>

080033d6 <adc_stm32_disable>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80033d6:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_IsEnabled(adc) != 1UL) {
 80033d8:	07d9      	lsls	r1, r3, #31
 80033da:	d526      	bpl.n	800342a <adc_stm32_disable+0x54>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80033dc:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_REG_IsConversionOngoing(adc)) {
 80033de:	075a      	lsls	r2, r3, #29
 80033e0:	d50a      	bpl.n	80033f8 <adc_stm32_disable+0x22>
  MODIFY_REG(ADCx->CR,
 80033e2:	6883      	ldr	r3, [r0, #8]
 80033e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ec:	f043 0310 	orr.w	r3, r3, #16
 80033f0:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80033f2:	6883      	ldr	r3, [r0, #8]
		while (LL_ADC_REG_IsConversionOngoing(adc)) {
 80033f4:	075b      	lsls	r3, r3, #29
 80033f6:	d4fc      	bmi.n	80033f2 <adc_stm32_disable+0x1c>
  return (READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART));
 80033f8:	6883      	ldr	r3, [r0, #8]
	if (LL_ADC_INJ_IsConversionOngoing(adc)) {
 80033fa:	0719      	lsls	r1, r3, #28
 80033fc:	d50a      	bpl.n	8003414 <adc_stm32_disable+0x3e>
  MODIFY_REG(ADCx->CR,
 80033fe:	6883      	ldr	r3, [r0, #8]
 8003400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003408:	f043 0320 	orr.w	r3, r3, #32
 800340c:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART));
 800340e:	6883      	ldr	r3, [r0, #8]
		while (LL_ADC_INJ_IsConversionOngoing(adc)) {
 8003410:	071a      	lsls	r2, r3, #28
 8003412:	d4fc      	bmi.n	800340e <adc_stm32_disable+0x38>
  MODIFY_REG(ADCx->CR,
 8003414:	6883      	ldr	r3, [r0, #8]
 8003416:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800341a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003424:	6883      	ldr	r3, [r0, #8]
	while (LL_ADC_IsEnabled(adc) == 1UL) {
 8003426:	07db      	lsls	r3, r3, #31
 8003428:	d4fc      	bmi.n	8003424 <adc_stm32_disable+0x4e>
}
 800342a:	4770      	bx	lr

0800342c <adc_stm32_calib.isra.0>:
	ADC_TypeDef *adc = config->base;
 800342c:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(ADCx->CR,
 800342e:	6893      	ldr	r3, [r2, #8]
 8003430:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800343c:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800343e:	6893      	ldr	r3, [r2, #8]
	while (LL_ADC_IsCalibrationOnGoing(adc)) {
 8003440:	2b00      	cmp	r3, #0
 8003442:	dbfc      	blt.n	800343e <adc_stm32_calib.isra.0+0x12>
}
 8003444:	4770      	bx	lr

08003446 <adc_context_start_sampling>:
	data->repeat_buffer = data->buffer;
 8003446:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800344a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 800344e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003456:	6893      	ldr	r3, [r2, #8]
 8003458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800345c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6093      	str	r3, [r2, #8]
}
 8003466:	4770      	bx	lr

08003468 <adc_context_on_timer_expired>:
{
 8003468:	b410      	push	{r4}
 800346a:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800346c:	3808      	subs	r0, #8
 800346e:	f3bf 8f5b 	dmb	ish
 8003472:	e850 2f00 	ldrex	r2, [r0]
 8003476:	1c51      	adds	r1, r2, #1
 8003478:	e840 1400 	strex	r4, r1, [r0]
 800347c:	2c00      	cmp	r4, #0
 800347e:	d1f8      	bne.n	8003472 <adc_context_on_timer_expired+0xa>
 8003480:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
 8003484:	b912      	cbnz	r2, 800348c <adc_context_on_timer_expired+0x24>
}
 8003486:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
 8003488:	f7ff bfdd 	b.w	8003446 <adc_context_start_sampling>
		ctx->status = -EBUSY;
 800348c:	f06f 020f 	mvn.w	r2, #15
}
 8003490:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
 8003492:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003494:	4770      	bx	lr

08003496 <adc_stm32_isr>:
{
 8003496:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ADC_TypeDef *adc = config->base;
 800349a:	6843      	ldr	r3, [r0, #4]
	struct adc_stm32_data *data = dev->data;
 800349c:	6904      	ldr	r4, [r0, #16]
	ADC_TypeDef *adc = config->base;
 800349e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	*data->buffer++ = LL_ADC_REG_ReadConversionData32(adc);
 80034a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80034a6:	1c99      	adds	r1, r3, #2
 80034a8:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
 80034ac:	801a      	strh	r2, [r3, #0]
	if (++data->samples_count == data->channel_count) {
 80034ae:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80034b2:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	429a      	cmp	r2, r3
 80034bc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80034c0:	d131      	bne.n	8003526 <adc_stm32_isr+0x90>
		data->samples_count = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
 80034c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ca:	b3a3      	cbz	r3, 8003536 <adc_stm32_isr+0xa0>
		adc_sequence_callback callback = ctx->options.callback;
 80034cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
 80034ce:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
 80034d2:	b133      	cbz	r3, 80034e2 <adc_stm32_isr+0x4c>
			action = callback(dev,
 80034d4:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80034d8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
 80034da:	2801      	cmp	r0, #1
 80034dc:	d00b      	beq.n	80034f6 <adc_stm32_isr+0x60>
 80034de:	2802      	cmp	r0, #2
 80034e0:	d023      	beq.n	800352a <adc_stm32_isr+0x94>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
 80034e2:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 80034e6:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d91d      	bls.n	800352a <adc_stm32_isr+0x94>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
 80034ee:	3301      	adds	r3, #1
 80034f0:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
			} else {
				finish = true;
			}
		}

		if (!finish) {
 80034f4:	e003      	b.n	80034fe <adc_stm32_isr+0x68>
		data->buffer = data->repeat_buffer;
 80034f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80034fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
 80034fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003500:	b923      	cbnz	r3, 800350c <adc_stm32_isr+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
 8003502:	4620      	mov	r0, r4
}
 8003504:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003508:	f7ff bf9d 	b.w	8003446 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800350c:	f3bf 8f5b 	dmb	ish
 8003510:	e854 3f00 	ldrex	r3, [r4]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	e844 2100 	strex	r1, r2, [r4]
 800351a:	2900      	cmp	r1, #0
 800351c:	d1f8      	bne.n	8003510 <adc_stm32_isr+0x7a>
 800351e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
 8003522:	2b01      	cmp	r3, #1
 8003524:	dced      	bgt.n	8003502 <adc_stm32_isr+0x6c>
 8003526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
 800352a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800352c:	b11b      	cbz	r3, 8003536 <adc_stm32_isr+0xa0>
	z_impl_k_timer_stop(timer);
 800352e:	f104 0008 	add.w	r0, r4, #8
 8003532:	f000 fc05 	bl	8003d40 <z_impl_k_timer_stop>
	adc_stm32_teardown_channels(data->dev);
 8003536:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
	const struct adc_stm32_cfg *config = dev->config;
 800353a:	f8d5 8004 	ldr.w	r8, [r5, #4]
	for (uint32_t channels = data->channels; channels; channels &= ~BIT(channel_id)) {
 800353e:	692b      	ldr	r3, [r5, #16]
	ADC_TypeDef *adc = (ADC_TypeDef *)config->base;
 8003540:	f8d8 6000 	ldr.w	r6, [r8]
	for (uint32_t channels = data->channels; channels; channels &= ~BIT(channel_id)) {
 8003544:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8003548:	b947      	cbnz	r7, 800355c <adc_stm32_isr+0xc6>
	adc_stm32_enable(adc);
 800354a:	4630      	mov	r0, r6
 800354c:	f7ff ff15 	bl	800337a <adc_stm32_enable>
	z_impl_k_sem_give(sem);
 8003550:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 8003554:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003558:	f7ff b8a0 	b.w	800269c <z_impl_k_sem_give>
		if (config->temp_channel == channel_id) {
 800355c:	f998 3014 	ldrsb.w	r3, [r8, #20]
 8003560:	fa97 f9a7 	rbit	r9, r7
 8003564:	fab9 f989 	clz	r9, r9
 8003568:	454b      	cmp	r3, r9
 800356a:	d107      	bne.n	800357c <adc_stm32_isr+0xe6>
			adc_stm32_disable(adc);
 800356c:	4630      	mov	r0, r6
 800356e:	f7ff ff32 	bl	80033d6 <adc_stm32_disable>
			adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8003572:	6868      	ldr	r0, [r5, #4]
 8003574:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003578:	f7fe f8b6 	bl	80016e8 <adc_stm32_unset_common_path.isra.0>
		if (config->vref_channel == channel_id) {
 800357c:	f998 3015 	ldrsb.w	r3, [r8, #21]
 8003580:	4599      	cmp	r9, r3
 8003582:	d107      	bne.n	8003594 <adc_stm32_isr+0xfe>
			adc_stm32_disable(adc);
 8003584:	4630      	mov	r0, r6
 8003586:	f7ff ff26 	bl	80033d6 <adc_stm32_disable>
			adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_VREFINT);
 800358a:	6868      	ldr	r0, [r5, #4]
 800358c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003590:	f7fe f8aa 	bl	80016e8 <adc_stm32_unset_common_path.isra.0>
		if (config->vbat_channel == channel_id) {
 8003594:	f998 3016 	ldrsb.w	r3, [r8, #22]
 8003598:	4599      	cmp	r9, r3
 800359a:	d107      	bne.n	80035ac <adc_stm32_isr+0x116>
			adc_stm32_disable(adc);
 800359c:	4630      	mov	r0, r6
 800359e:	f7ff ff1a 	bl	80033d6 <adc_stm32_disable>
			adc_stm32_unset_common_path(dev, LL_ADC_PATH_INTERNAL_VBAT);
 80035a2:	6868      	ldr	r0, [r5, #4]
 80035a4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80035a8:	f7fe f89e 	bl	80016e8 <adc_stm32_unset_common_path.isra.0>
	for (uint32_t channels = data->channels; channels; channels &= ~BIT(channel_id)) {
 80035ac:	2301      	movs	r3, #1
 80035ae:	fa03 f309 	lsl.w	r3, r3, r9
 80035b2:	ea27 0703 	bic.w	r7, r7, r3
 80035b6:	e7c7      	b.n	8003548 <adc_stm32_isr+0xb2>

080035b8 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80035b8:	680b      	ldr	r3, [r1, #0]
 80035ba:	f1a3 0214 	sub.w	r2, r3, #20
 80035be:	2a08      	cmp	r2, #8
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 80035c0:	bf9f      	itttt	ls
 80035c2:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 80035ca:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 80035cc:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 80035ce:	bf9d      	ittte	ls
 80035d0:	430a      	orrls	r2, r1
	return 0;
 80035d2:	2000      	movls	r0, #0
 80035d4:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 80035d6:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 80035da:	4770      	bx	lr

080035dc <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	f1a3 0214 	sub.w	r2, r3, #20
 80035e2:	2a08      	cmp	r2, #8
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 80035e4:	bf9f      	itttt	ls
 80035e6:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 80035ea:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 80035ee:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 80035f0:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 80035f2:	bf9d      	ittte	ls
 80035f4:	438a      	bicls	r2, r1
	return 0;
 80035f6:	2000      	movls	r0, #0
 80035f8:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 80035fa:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 80035fe:	4770      	bx	lr

08003600 <stm32_clock_control_configure>:
	switch (src_clk) {
 8003600:	680b      	ldr	r3, [r1, #0]
 8003602:	3b04      	subs	r3, #4
 8003604:	2b03      	cmp	r3, #3
 8003606:	d812      	bhi.n	800362e <stm32_clock_control_configure+0x2e>
	if (pclken->enr == NO_SEL) {
 8003608:	684a      	ldr	r2, [r1, #4]
 800360a:	2aff      	cmp	r2, #255	; 0xff
 800360c:	d00d      	beq.n	800362a <stm32_clock_control_configure+0x2a>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800360e:	b2d3      	uxtb	r3, r2
 8003610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003614:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8003618:	f3c2 4102 	ubfx	r1, r2, #16, #3
	uint32_t temp = *(volatile uint32_t *)addr;
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
	*(volatile uint32_t *)addr = temp | mask;
 8003626:	4302      	orrs	r2, r0
 8003628:	601a      	str	r2, [r3, #0]
		return 0;
 800362a:	2000      	movs	r0, #0
 800362c:	4770      	bx	lr
		return -ENOTSUP;
 800362e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003632:	4770      	bx	lr

08003634 <config_enable_default_clocks>:
	/* SYSCFG is required to remap IRQ to avoid conflicts with CAN */
	/* cf §14.1.3, RM0316 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
#endif /* !CONFIG_SOC_SERIES_STM32F3X */
}
 8003634:	4770      	bx	lr

08003636 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003636:	6843      	ldr	r3, [r0, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800363a:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800363c:	600b      	str	r3, [r1, #0]
}
 800363e:	2000      	movs	r0, #0
 8003640:	4770      	bx	lr

08003642 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003642:	6843      	ldr	r3, [r0, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003646:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003648:	4042      	eors	r2, r0
 800364a:	400a      	ands	r2, r1
 800364c:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800364e:	615a      	str	r2, [r3, #20]
}
 8003650:	2000      	movs	r0, #0
 8003652:	4770      	bx	lr

08003654 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003654:	6843      	ldr	r3, [r0, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
}
 8003658:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800365a:	6199      	str	r1, [r3, #24]
}
 800365c:	4770      	bx	lr

0800365e <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800365e:	6843      	ldr	r3, [r0, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
}
 8003662:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003664:	6299      	str	r1, [r3, #40]	; 0x28
 8003666:	4770      	bx	lr

08003668 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003668:	6843      	ldr	r3, [r0, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800366c:	6953      	ldr	r3, [r2, #20]
 800366e:	404b      	eors	r3, r1
 8003670:	6153      	str	r3, [r2, #20]
}
 8003672:	2000      	movs	r0, #0
 8003674:	4770      	bx	lr

08003676 <gpio_stm32_manage_callback>:
{
 8003676:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8003678:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800367a:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 800367c:	b1f8      	cbz	r0, 80036be <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800367e:	4288      	cmp	r0, r1
 8003680:	d119      	bne.n	80036b6 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8003682:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8003684:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8003686:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8003688:	42a1      	cmp	r1, r4
 800368a:	d100      	bne.n	800368e <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 800368c:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800368e:	2000      	movs	r0, #0
 8003690:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8003692:	b12a      	cbz	r2, 80036a0 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8003694:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8003696:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8003698:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 800369a:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800369c:	b902      	cbnz	r2, 80036a0 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 800369e:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 80036a0:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 80036a2:	e010      	b.n	80036c6 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80036a4:	4281      	cmp	r1, r0
 80036a6:	d106      	bne.n	80036b6 <gpio_stm32_manage_callback+0x40>
	return node->next;
 80036a8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 80036aa:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80036ac:	68d8      	ldr	r0, [r3, #12]
 80036ae:	4281      	cmp	r1, r0
 80036b0:	d1ed      	bne.n	800368e <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 80036b2:	60dc      	str	r4, [r3, #12]
}
 80036b4:	e7eb      	b.n	800368e <gpio_stm32_manage_callback+0x18>
	return node->next;
 80036b6:	4604      	mov	r4, r0
 80036b8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d1f2      	bne.n	80036a4 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 80036be:	2a00      	cmp	r2, #0
 80036c0:	d1e8      	bne.n	8003694 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 80036c2:	f06f 0015 	mvn.w	r0, #21
}
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80036ca:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 80036cc:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80036ce:	6867      	ldr	r7, [r4, #4]
 80036d0:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80036d2:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80036d4:	f3c2 1380 	ubfx	r3, r2, #6, #1
 80036d8:	ea27 0700 	bic.w	r7, r7, r0
 80036dc:	408b      	lsls	r3, r1
 80036de:	433b      	orrs	r3, r7
 80036e0:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80036e6:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80036ea:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80036ee:	f04f 0e03 	mov.w	lr, #3
 80036f2:	007f      	lsls	r7, r7, #1
 80036f4:	fa0e f707 	lsl.w	r7, lr, r7
 80036f8:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8003700:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8003704:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8003708:	007f      	lsls	r7, r7, #1
 800370a:	40bb      	lsls	r3, r7
 800370c:	ea43 030c 	orr.w	r3, r3, ip
 8003710:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8003716:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800371a:	68e7      	ldr	r7, [r4, #12]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa0e f303 	lsl.w	r3, lr, r3
 8003722:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8003732:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8003734:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8003738:	409a      	lsls	r2, r3
 800373a:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 800373c:	2d20      	cmp	r5, #32
 800373e:	60e2      	str	r2, [r4, #12]
 8003740:	d116      	bne.n	8003770 <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8003742:	2907      	cmp	r1, #7
 8003744:	dc2b      	bgt.n	800379e <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800374a:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 800374c:	b32b      	cbz	r3, 800379a <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	210f      	movs	r1, #15
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fa06 f303 	lsl.w	r3, r6, r3
 800376c:	4313      	orrs	r3, r2
 800376e:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8003774:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003778:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	fa90 f0a0 	rbit	r0, r0
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8003782:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8003786:	092d      	lsrs	r5, r5, #4
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	0040      	lsls	r0, r0, #1
 800378e:	ea22 0303 	bic.w	r3, r2, r3
 8003792:	4085      	lsls	r5, r0
 8003794:	431d      	orrs	r5, r3
 8003796:	6025      	str	r5, [r4, #0]
}
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800379a:	462b      	mov	r3, r5
 800379c:	e7d9      	b.n	8003752 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800379e:	0a03      	lsrs	r3, r0, #8
 80037a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80037a6:	b182      	cbz	r2, 80037ca <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	fa07 f202 	lsl.w	r2, r7, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	ea21 0202 	bic.w	r2, r1, r2
 80037c2:	409e      	lsls	r6, r3
 80037c4:	4316      	orrs	r6, r2
 80037c6:	6266      	str	r6, [r4, #36]	; 0x24
}
 80037c8:	e7d2      	b.n	8003770 <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 80037ca:	462a      	mov	r2, r5
 80037cc:	e7ee      	b.n	80037ac <gpio_stm32_configure_raw.isra.0+0xe4>

080037ce <gpio_stm32_config>:
{
 80037ce:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80037d0:	039a      	lsls	r2, r3, #14
{
 80037d2:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 80037d4:	d518      	bpl.n	8003808 <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80037d6:	079c      	lsls	r4, r3, #30
 80037d8:	d50f      	bpl.n	80037fa <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80037da:	075a      	lsls	r2, r3, #29
 80037dc:	d52d      	bpl.n	800383a <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80037de:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80037e0:	06dc      	lsls	r4, r3, #27
 80037e2:	d50c      	bpl.n	80037fe <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80037e8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 80037ec:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80037ee:	d018      	beq.n	8003822 <gpio_stm32_config+0x54>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80037f0:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80037f2:	2301      	movs	r3, #1
 80037f4:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 80037f6:	61a3      	str	r3, [r4, #24]
	return 0;
 80037f8:	e00d      	b.n	8003816 <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80037fa:	2210      	movs	r2, #16
 80037fc:	e7f0      	b.n	80037e0 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80037fe:	069c      	lsls	r4, r3, #26
 8003800:	d5f2      	bpl.n	80037e8 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8003806:	e7ef      	b.n	80037e8 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8003808:	03dc      	lsls	r4, r3, #15
 800380a:	d511      	bpl.n	8003830 <gpio_stm32_config+0x62>
		if ((flags & GPIO_PULL_UP) != 0) {
 800380c:	06da      	lsls	r2, r3, #27
 800380e:	d411      	bmi.n	8003834 <gpio_stm32_config+0x66>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8003810:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003814:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8003816:	6840      	ldr	r0, [r0, #4]
 8003818:	2300      	movs	r3, #0
 800381a:	f7ff ff55 	bl	80036c8 <gpio_stm32_configure_raw.isra.0>
	return 0;
 800381e:	2000      	movs	r0, #0
}
 8003820:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003822:	035b      	lsls	r3, r3, #13
 8003824:	d5f7      	bpl.n	8003816 <gpio_stm32_config+0x48>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003826:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003828:	2301      	movs	r3, #1
 800382a:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 800382c:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 800382e:	e7f2      	b.n	8003816 <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8003830:	2230      	movs	r2, #48	; 0x30
 8003832:	e7f0      	b.n	8003816 <gpio_stm32_config+0x48>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003838:	e7ed      	b.n	8003816 <gpio_stm32_config+0x48>
				return -ENOTSUP;
 800383a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800383e:	e7ef      	b.n	8003820 <gpio_stm32_config+0x52>

08003840 <gpio_stm32_isr>:
{
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	460b      	mov	r3, r1
 8003844:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003846:	b121      	cbz	r1, 8003852 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003848:	2501      	movs	r5, #1
 800384a:	685e      	ldr	r6, [r3, #4]
	return node->next;
 800384c:	680c      	ldr	r4, [r1, #0]
 800384e:	4085      	lsls	r5, r0
 8003850:	b901      	cbnz	r1, 8003854 <gpio_stm32_isr+0x14>
}
 8003852:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8003854:	688a      	ldr	r2, [r1, #8]
 8003856:	402a      	ands	r2, r5
 8003858:	d002      	beq.n	8003860 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800385a:	684b      	ldr	r3, [r1, #4]
 800385c:	4630      	mov	r0, r6
 800385e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003860:	b11c      	cbz	r4, 800386a <gpio_stm32_isr+0x2a>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	4621      	mov	r1, r4
 8003866:	461c      	mov	r4, r3
 8003868:	e7f2      	b.n	8003850 <gpio_stm32_isr+0x10>
 800386a:	4623      	mov	r3, r4
 800386c:	e7fa      	b.n	8003864 <gpio_stm32_isr+0x24>

0800386e <gpio_stm32_configure>:
{
 800386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003870:	461f      	mov	r7, r3
 8003872:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8003874:	6840      	ldr	r0, [r0, #4]
{
 8003876:	460e      	mov	r6, r1
 8003878:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800387a:	f7ff ff25 	bl	80036c8 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 800387e:	2f11      	cmp	r7, #17
 8003880:	d108      	bne.n	8003894 <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003882:	2301      	movs	r3, #1
 8003884:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003888:	6863      	ldr	r3, [r4, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 800388c:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 800388e:	bf4c      	ite	mi
 8003890:	619e      	strmi	r6, [r3, #24]
 8003892:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 8003894:	2000      	movs	r0, #0
 8003896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003898 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8003898:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 800389a:	6803      	ldr	r3, [r0, #0]
 800389c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 800389e:	7905      	ldrb	r5, [r0, #4]
 80038a0:	6804      	ldr	r4, [r0, #0]
 80038a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	d302      	bcc.n	80038b0 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 80038aa:	f06f 0001 	mvn.w	r0, #1
}
 80038ae:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 80038b0:	795c      	ldrb	r4, [r3, #5]
 80038b2:	428c      	cmp	r4, r1
 80038b4:	d001      	beq.n	80038ba <pinctrl_lookup_state+0x22>
		(*state)++;
 80038b6:	3308      	adds	r3, #8
 80038b8:	e7f0      	b.n	800389c <pinctrl_lookup_state+0x4>
			return 0;
 80038ba:	2000      	movs	r0, #0
 80038bc:	e7f7      	b.n	80038ae <pinctrl_lookup_state+0x16>

080038be <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80038be:	6843      	ldr	r3, [r0, #4]
 80038c0:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80038ca:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 80038cc:	2301      	movs	r3, #1
 80038ce:	408b      	lsls	r3, r1
 80038d0:	4203      	tst	r3, r0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	7013      	strb	r3, [r2, #0]
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 80038da:	2000      	movs	r0, #0
 80038dc:	4770      	bx	lr

080038de <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 80038de:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80038e0:	6843      	ldr	r3, [r0, #4]
 80038e2:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80038ec:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80038ee:	2301      	movs	r3, #1
 80038f0:	408b      	lsls	r3, r1
 80038f2:	4323      	orrs	r3, r4
 80038f4:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 80038f6:	2000      	movs	r0, #0
 80038f8:	bd10      	pop	{r4, pc}

080038fa <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 80038fa:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80038fc:	6843      	ldr	r3, [r0, #4]
 80038fe:	f3c1 144b 	ubfx	r4, r1, #5, #12
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	f001 011f 	and.w	r1, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8003908:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800390a:	2201      	movs	r2, #1
 800390c:	408a      	lsls	r2, r1
 800390e:	ea23 0302 	bic.w	r3, r3, r2
 8003912:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8003914:	2000      	movs	r0, #0
 8003916:	bd10      	pop	{r4, pc}

08003918 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4604      	mov	r4, r0
 800391c:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 800391e:	f7ff ffde 	bl	80038de <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8003922:	4629      	mov	r1, r5
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ffe8 	bl	80038fa <reset_stm32_line_deassert>

	return 0;
}
 800392a:	2000      	movs	r0, #0
 800392c:	bd38      	pop	{r3, r4, r5, pc}

0800392e <reset_stm32_init>:

static int reset_stm32_init(const struct device *dev)
{
	return 0;
}
 800392e:	2000      	movs	r0, #0
 8003930:	4770      	bx	lr

08003932 <uart_stm32_set_baudrate>:
{
 8003932:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8003934:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8003936:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8003938:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 800393a:	6883      	ldr	r3, [r0, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
{
 800393e:	460c      	mov	r4, r1
					   (clock_control_subsys_t)&config->pclken[0],
 8003940:	6869      	ldr	r1, [r5, #4]
 8003942:	b183      	cbz	r3, 8003966 <uart_stm32_set_baudrate+0x34>
	return api->get_rate(dev, sys, rate);
 8003944:	aa01      	add	r2, sp, #4
 8003946:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8003948:	2800      	cmp	r0, #0
 800394a:	db0c      	blt.n	8003966 <uart_stm32_set_baudrate+0x34>
		LL_USART_SetOverSampling(config->usart,
 800394c:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003954:	6013      	str	r3, [r2, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003956:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 8003958:	682a      	ldr	r2, [r5, #0]
 800395a:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800395e:	fbb3 f3f4 	udiv	r3, r3, r4
 8003962:	b29b      	uxth	r3, r3
 8003964:	60d3      	str	r3, [r2, #12]
}
 8003966:	b003      	add	sp, #12
 8003968:	bd30      	pop	{r4, r5, pc}

0800396a <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 800396a:	6842      	ldr	r2, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800396c:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800396e:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8003970:	69d9      	ldr	r1, [r3, #28]
 8003972:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003974:	69d9      	ldr	r1, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003976:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 800397a:	bf48      	it	mi
 800397c:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003980:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003982:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8003984:	bf48      	it	mi
 8003986:	f040 0004 	orrmi.w	r0, r0, #4
 800398a:	0749      	lsls	r1, r1, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800398c:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_NOISE;
 800398e:	bf48      	it	mi
 8003990:	f040 0020 	orrmi.w	r0, r0, #32
 8003994:	05c9      	lsls	r1, r1, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8003996:	bf42      	ittt	mi
 8003998:	f44f 7180 	movmi.w	r1, #256	; 0x100
		err |= UART_BREAK;
 800399c:	f040 0008 	orrmi.w	r0, r0, #8
 80039a0:	6219      	strmi	r1, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 80039a2:	07c1      	lsls	r1, r0, #31
		LL_USART_ClearFlag_ORE(config->usart);
 80039a4:	bf42      	ittt	mi
 80039a6:	6813      	ldrmi	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80039a8:	2108      	movmi	r1, #8
 80039aa:	6219      	strmi	r1, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80039ac:	0783      	lsls	r3, r0, #30
		LL_USART_ClearFlag_PE(config->usart);
 80039ae:	bf42      	ittt	mi
 80039b0:	6813      	ldrmi	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80039b2:	2101      	movmi	r1, #1
 80039b4:	6219      	strmi	r1, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 80039b6:	0741      	lsls	r1, r0, #29
		LL_USART_ClearFlag_FE(config->usart);
 80039b8:	bf42      	ittt	mi
 80039ba:	6813      	ldrmi	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80039bc:	2102      	movmi	r1, #2
 80039be:	6219      	strmi	r1, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 80039c0:	0683      	lsls	r3, r0, #26
		LL_USART_ClearFlag_NE(config->usart);
 80039c2:	bf42      	ittt	mi
 80039c4:	6813      	ldrmi	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 80039c6:	2204      	movmi	r2, #4
 80039c8:	621a      	strmi	r2, [r3, #32]
}
 80039ca:	4770      	bx	lr

080039cc <uart_stm32_poll_out>:
{
 80039cc:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80039ce:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80039d0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80039d2:	69d3      	ldr	r3, [r2, #28]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	d5fc      	bpl.n	80039d2 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80039d8:	f04f 0210 	mov.w	r2, #16
 80039dc:	f3ef 8311 	mrs	r3, BASEPRI
 80039e0:	f382 8812 	msr	BASEPRI_MAX, r2
 80039e4:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80039e8:	6802      	ldr	r2, [r0, #0]
 80039ea:	69d4      	ldr	r4, [r2, #28]
 80039ec:	0624      	lsls	r4, r4, #24
 80039ee:	d404      	bmi.n	80039fa <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80039f8:	e7ea      	b.n	80039d0 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80039fa:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
}
 8003a04:	bd10      	pop	{r4, pc}

08003a06 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 8003a06:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8003a08:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003a0a:	69d0      	ldr	r0, [r2, #28]
 8003a0c:	0700      	lsls	r0, r0, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003a0e:	bf44      	itt	mi
 8003a10:	2008      	movmi	r0, #8
 8003a12:	6210      	strmi	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8003a14:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003a1a:	bf43      	ittte	mi
 8003a1c:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8003a1e:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8003a20:	2000      	movmi	r0, #0
		return -1;
 8003a22:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8003a26:	4770      	bx	lr

08003a28 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8003a28:	6903      	ldr	r3, [r0, #16]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8003a2e:	6843      	ldr	r3, [r0, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d035      	beq.n	8003aaa <uart_stm32_config_get+0x82>
 8003a3e:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8003a42:	f1dc 0300 	rsbs	r3, ip, #0
 8003a46:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8003a4a:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 8003a4c:	6843      	ldr	r3, [r0, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	d028      	beq.n	8003aae <uart_stm32_config_get+0x86>
 8003a5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a60:	d027      	beq.n	8003ab2 <uart_stm32_config_get+0x8a>
		return UART_CFG_STOP_BITS_2;
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8003a6a:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 8003a6c:	6843      	ldr	r3, [r0, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003a70:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003a72:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003a74:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	switch (db) {
 8003a78:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a80:	d019      	beq.n	8003ab6 <uart_stm32_config_get+0x8e>
 8003a82:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003a86:	d11b      	bne.n	8003ac0 <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_7;
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8003a90:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003a92:	6843      	ldr	r3, [r0, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8003a9c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8003aa0:	4253      	negs	r3, r2
 8003aa2:	4153      	adcs	r3, r2
 8003aa4:	71cb      	strb	r3, [r1, #7]
}
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	4770      	bx	lr
	switch (parity) {
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e7cd      	b.n	8003a4a <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e7db      	b.n	8003a6a <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e7d9      	b.n	8003a6a <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2303      	movne	r3, #3
 8003abc:	2304      	moveq	r3, #4
 8003abe:	e7e7      	b.n	8003a90 <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf14      	ite	ne
 8003ac4:	2302      	movne	r3, #2
 8003ac6:	2303      	moveq	r3, #3
 8003ac8:	e7e2      	b.n	8003a90 <uart_stm32_config_get+0x68>

08003aca <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8003aca:	4770      	bx	lr

08003acc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8003acc:	b140      	cbz	r0, 8003ae0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8003ace:	68c3      	ldr	r3, [r0, #12]
 8003ad0:	7858      	ldrb	r0, [r3, #1]
 8003ad2:	f010 0001 	ands.w	r0, r0, #1
 8003ad6:	bf1e      	ittt	ne
 8003ad8:	7818      	ldrbne	r0, [r3, #0]
 8003ada:	fab0 f080 	clzne	r0, r0
 8003ade:	0940      	lsrne	r0, r0, #5
}
 8003ae0:	4770      	bx	lr

08003ae2 <arch_system_halt>:
	__asm__ volatile(
 8003ae2:	f04f 0210 	mov.w	r2, #16
 8003ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8003aea:	f382 8812 	msr	BASEPRI_MAX, r2
 8003aee:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8003af2:	e7fe      	b.n	8003af2 <arch_system_halt+0x10>

08003af4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003af4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003af6:	f7ff fff4 	bl	8003ae2 <arch_system_halt>

08003afa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afc:	4605      	mov	r5, r0
 8003afe:	460e      	mov	r6, r1
 8003b00:	f04f 0310 	mov.w	r3, #16
 8003b04:	f3ef 8711 	mrs	r7, BASEPRI
 8003b08:	f383 8812 	msr	BASEPRI_MAX, r3
 8003b0c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8003b10:	f7ff f8b8 	bl	8002c84 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8003b14:	4631      	mov	r1, r6
 8003b16:	4604      	mov	r4, r0
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f7ff ffeb 	bl	8003af4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8003b1e:	f387 8811 	msr	BASEPRI, r7
 8003b22:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003b26:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8003b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b2c:	f7fd bbde 	b.w	80012ec <z_impl_k_thread_abort>

08003b30 <z_early_memset>:
	(void) memset(dst, c, n);
 8003b30:	f7ff bbce 	b.w	80032d0 <memset>

08003b34 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8003b34:	f7ff bbc1 	b.w	80032ba <memcpy>

08003b38 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8003b38:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003b3a:	f04f 0210 	mov.w	r2, #16
 8003b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b42:	f382 8812 	msr	BASEPRI_MAX, r2
 8003b46:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003b4a:	f7fd f943 	bl	8000dd4 <arch_cpu_idle>
 8003b4e:	e7f4      	b.n	8003b3a <idle+0x2>

08003b50 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8003b50:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8003b54:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8003b56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003b58:	2300      	movs	r3, #0
	node->prev = NULL;
 8003b5a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8003b5e:	4770      	bx	lr

08003b60 <unpend_thread_no_timeout>:
{
 8003b60:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003b62:	f7ff fff5 	bl	8003b50 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003b66:	7b43      	ldrb	r3, [r0, #13]
 8003b68:	f023 0302 	bic.w	r3, r3, #2
 8003b6c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6083      	str	r3, [r0, #8]
}
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <add_to_waitq_locked>:
{
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	460d      	mov	r5, r1
	unready_thread(thread);
 8003b7a:	f7fe fe97 	bl	80028ac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8003b7e:	7b63      	ldrb	r3, [r4, #13]
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8003b86:	b1e5      	cbz	r5, 8003bc2 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 8003b88:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 8003b8a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	d109      	bne.n	8003ba4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 8003b90:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8003b92:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8003b96:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8003b98:	606c      	str	r4, [r5, #4]
}
 8003b9a:	e012      	b.n	8003bc2 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8003b9c:	686a      	ldr	r2, [r5, #4]
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d0f6      	beq.n	8003b90 <add_to_waitq_locked+0x1c>
 8003ba2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f3      	beq.n	8003b90 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 8003ba8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8003bac:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8003bb0:	428a      	cmp	r2, r1
 8003bb2:	d0f3      	beq.n	8003b9c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003bb4:	4291      	cmp	r1, r2
 8003bb6:	ddf1      	ble.n	8003b9c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8003bb8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003bba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8003bbe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8003bc0:	605c      	str	r4, [r3, #4]
}
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}

08003bc4 <z_ready_thread>:
{
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	f04f 0310 	mov.w	r3, #16
 8003bca:	f3ef 8411 	mrs	r4, BASEPRI
 8003bce:	f383 8812 	msr	BASEPRI_MAX, r3
 8003bd2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8003bd6:	f7fe fe35 	bl	8002844 <ready_thread>
	__asm__ volatile(
 8003bda:	f384 8811 	msr	BASEPRI, r4
 8003bde:	f3bf 8f6f 	isb	sy
}
 8003be2:	bd10      	pop	{r4, pc}

08003be4 <z_unpend_thread_no_timeout>:
{
 8003be4:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003be6:	f04f 0210 	mov.w	r2, #16
 8003bea:	f3ef 8111 	mrs	r1, BASEPRI
 8003bee:	f382 8812 	msr	BASEPRI_MAX, r2
 8003bf2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8003bf6:	6883      	ldr	r3, [r0, #8]
 8003bf8:	b10b      	cbz	r3, 8003bfe <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
 8003bfa:	f7ff ffb1 	bl	8003b60 <unpend_thread_no_timeout>
	__asm__ volatile(
 8003bfe:	f381 8811 	msr	BASEPRI, r1
 8003c02:	f3bf 8f6f 	isb	sy
}
 8003c06:	bd08      	pop	{r3, pc}

08003c08 <z_sched_wake_thread>:
{
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4604      	mov	r4, r0
	__asm__ volatile(
 8003c0c:	f04f 0310 	mov.w	r3, #16
 8003c10:	f3ef 8511 	mrs	r5, BASEPRI
 8003c14:	f383 8812 	msr	BASEPRI_MAX, r3
 8003c18:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8003c1c:	7b43      	ldrb	r3, [r0, #13]
 8003c1e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8003c22:	d10b      	bne.n	8003c3c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 8003c24:	6883      	ldr	r3, [r0, #8]
 8003c26:	b10b      	cbz	r3, 8003c2c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 8003c28:	f7ff ff9a 	bl	8003b60 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003c2c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 8003c2e:	b951      	cbnz	r1, 8003c46 <z_sched_wake_thread+0x3e>
 8003c30:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8003c34:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7fe fe04 	bl	8002844 <ready_thread>
	__asm__ volatile(
 8003c3c:	f385 8811 	msr	BASEPRI, r5
 8003c40:	f3bf 8f6f 	isb	sy
}
 8003c44:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003c46:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
 8003c4a:	e7f3      	b.n	8003c34 <z_sched_wake_thread+0x2c>

08003c4c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	3818      	subs	r0, #24
 8003c50:	f7ff bfda 	b.w	8003c08 <z_sched_wake_thread>

08003c54 <z_unpend1_no_timeout>:
{
 8003c54:	b508      	push	{r3, lr}
 8003c56:	4603      	mov	r3, r0
	__asm__ volatile(
 8003c58:	f04f 0210 	mov.w	r2, #16
 8003c5c:	f3ef 8111 	mrs	r1, BASEPRI
 8003c60:	f382 8812 	msr	BASEPRI_MAX, r2
 8003c64:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8003c68:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003c6a:	4283      	cmp	r3, r0
 8003c6c:	d007      	beq.n	8003c7e <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
 8003c6e:	b108      	cbz	r0, 8003c74 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
 8003c70:	f7ff ff76 	bl	8003b60 <unpend_thread_no_timeout>
	__asm__ volatile(
 8003c74:	f381 8811 	msr	BASEPRI, r1
 8003c78:	f3bf 8f6f 	isb	sy
}
 8003c7c:	bd08      	pop	{r3, pc}
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e7f8      	b.n	8003c74 <z_unpend1_no_timeout+0x20>

08003c82 <z_unpend_first_thread>:
{
 8003c82:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8003c84:	f04f 0310 	mov.w	r3, #16
 8003c88:	f3ef 8511 	mrs	r5, BASEPRI
 8003c8c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003c90:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8003c94:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003c96:	42a0      	cmp	r0, r4
 8003c98:	d00d      	beq.n	8003cb6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 8003c9a:	b134      	cbz	r4, 8003caa <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff ff5f 	bl	8003b60 <unpend_thread_no_timeout>
 8003ca2:	f104 0018 	add.w	r0, r4, #24
 8003ca6:	f000 f82f 	bl	8003d08 <z_abort_timeout>
	__asm__ volatile(
 8003caa:	f385 8811 	msr	BASEPRI, r5
 8003cae:	f3bf 8f6f 	isb	sy
}
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
 8003cb6:	2400      	movs	r4, #0
 8003cb8:	e7f7      	b.n	8003caa <z_unpend_first_thread+0x28>

08003cba <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b920      	cbnz	r0, 8003cc8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cbe:	f3ef 8205 	mrs	r2, IPSR
 8003cc2:	b90a      	cbnz	r2, 8003cc8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8003cc4:	f7fd b8e2 	b.w	8000e8c <arch_swap>
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
}
 8003cd0:	4770      	bx	lr

08003cd2 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003cd2:	f04f 0310 	mov.w	r3, #16
 8003cd6:	f3ef 8011 	mrs	r0, BASEPRI
 8003cda:	f383 8812 	msr	BASEPRI_MAX, r3
 8003cde:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8003ce2:	f7ff bfea 	b.w	8003cba <z_reschedule_irqlock>

08003ce6 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 8003ce6:	17c1      	asrs	r1, r0, #31
		t += off;
 8003ce8:	3063      	adds	r0, #99	; 0x63
{
 8003cea:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 8003cec:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	f141 0100 	adc.w	r1, r1, #0
 8003cf8:	f7fc fa4c 	bl	8000194 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 8003cfc:	17c1      	asrs	r1, r0, #31
 8003cfe:	f7fe ff65 	bl	8002bcc <z_tick_sleep>
}
 8003d02:	2364      	movs	r3, #100	; 0x64
 8003d04:	4358      	muls	r0, r3
 8003d06:	bd08      	pop	{r3, pc}

08003d08 <z_abort_timeout>:
{
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	f04f 0210 	mov.w	r2, #16
 8003d0e:	f3ef 8411 	mrs	r4, BASEPRI
 8003d12:	f382 8812 	msr	BASEPRI_MAX, r2
 8003d16:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003d1a:	6803      	ldr	r3, [r0, #0]
 8003d1c:	b13b      	cbz	r3, 8003d2e <z_abort_timeout+0x26>
			remove_timeout(to);
 8003d1e:	f7ff f85b 	bl	8002dd8 <remove_timeout>
			ret = 0;
 8003d22:	2000      	movs	r0, #0
	__asm__ volatile(
 8003d24:	f384 8811 	msr	BASEPRI, r4
 8003d28:	f3bf 8f6f 	isb	sy
}
 8003d2c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8003d2e:	f06f 0015 	mvn.w	r0, #21
 8003d32:	e7f7      	b.n	8003d24 <z_abort_timeout+0x1c>

08003d34 <sys_clock_tick_get_32>:
{
 8003d34:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8003d36:	f7ff f94b 	bl	8002fd0 <sys_clock_tick_get>
}
 8003d3a:	bd08      	pop	{r3, pc}

08003d3c <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8003d3c:	f7ff b948 	b.w	8002fd0 <sys_clock_tick_get>

08003d40 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 8003d44:	f7ff ffe0 	bl	8003d08 <z_abort_timeout>

	if (inactive) {
 8003d48:	b9b0      	cbnz	r0, 8003d78 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 8003d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d4c:	b10b      	cbz	r3, 8003d52 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8003d52:	f104 0018 	add.w	r0, r4, #24
 8003d56:	f7ff ff7d 	bl	8003c54 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8003d5a:	b168      	cbz	r0, 8003d78 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8003d5c:	f7ff ff32 	bl	8003bc4 <z_ready_thread>
	__asm__ volatile(
 8003d60:	f04f 0310 	mov.w	r3, #16
 8003d64:	f3ef 8011 	mrs	r0, BASEPRI
 8003d68:	f383 8812 	msr	BASEPRI_MAX, r3
 8003d6c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 8003d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d74:	f7ff bfa1 	b.w	8003cba <z_reschedule_irqlock>
 8003d78:	bd10      	pop	{r4, pc}
	...
